facet_wrap(~ unit_name)
ggplot(sal, aes(x = length_1_mm)) +
geom_histogram() +
facet_wrap(~ unit_name)
ggplot(sal, aes(x = length_1_mm)) +
geom_histogram() +
facet_wrap(~ unit_name, scales = "free")
lm(length_1_mm ~ unit_name, data = sal)
reg_anova
summary(reg_anova)
lm(length_1_mm ~ unit_name, data = sal)
summary(lm(length_1_mm ~ unit_name, data = sal))
summary(reg_anova)
plot(reg_anova)
sal_summary <- sal %>%
group_by(unit_name) %>%
summarize(mean = mean(length_1_mm, na.rm = TRUE),
sd = sd(length_1_mm, na.rm = TRUE),
count = length(length_1_mm),
se = sd/sqrt(count),
var = var(length_1_mm, na.rm = TRUE))
324*4
sal <- and_vertebrates %>%
filter(species == "Coastal giant salamander",
unittype %in% c("C", "P", "SC")) %>%
mutate(unit_name = case_when(
unittype == "C" ~ "cascade",
unittype == "P" ~ "pool",
unittype == "SC" ~ "channel"
)) %>%
mutate(tf = log(length_1_mm))
log_anova <- aov(tf ~ unit_name, data = sal)
reg_anova <- aov(length_1_mm ~ unit_name, data = sal)
plot(reg_anova)
plot(log_anova)
summary(log_anova)
summary(reg_anova)
TukeyHSD(reg_anova)
TukeyHSD(log_anova)
leveneTest(tf ~ unit_name, data = sal)
flextable(model_squares)
model_squares
model_squares_table
model_squares_table <- tidy(model_squares) %>%
flextable()
model_squares_table
model_squares_table <- tidy(model_squares) %>%
flextable() %>%
add_header_labels(df = "Degrees of Freedom")
model_squares_table
model_squares_table <- tidy(model_squares) %>%
flextable() %>%
set_header_labels(df = "Degrees of Freedom")
model_squares_table
model_squares_table <- tidy(model_squares) %>%
flextable() %>%
set_header_labels(df = "Degrees of Freedom", sumsq = "Sum of squares")
model_squares_table
model_squares_table <- tidy(model_squares) %>%
flextable() %>%
set_header_labels(df = "Degrees of Freedom",
sumsq = "Sum of squares",
meansq = "Mean squares",
statistic = "F-statistic",
p.value = "p-value")
model_squares_table
model_squares_table <- tidy(model_squares)
model_squares_table
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq), ~ round(.x, digits = 5))
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq), ~ round(., digits = 5))
?mutate(across)
?across
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq), ~ round(.x, digits = 5))
model_squares_table <- tidy(model_squares)
model_squares_table
model_squares_table <- tidy(model_squares) %>%
mutate(across(contains("sq")), ~ round(.x, digits = 5))
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))
= 5))
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5)))
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
flextable() %>%
set_header_labels(df = "Degrees of Freedom",
sumsq = "Sum of squares",
meansq = "Mean squares",
statistic = "F-statistic",
p.value = "p-value")
model_squares_table
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 2)) %>%
flextable() %>%
set_header_labels(df = "Degrees of Freedom",
sumsq = "Sum of squares",
meansq = "Mean squares",
statistic = "F-statistic",
p.value = "p-value")
model_squares_table
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 1)) %>%
flextable() %>%
set_header_labels(df = "Degrees of Freedom",
sumsq = "Sum of squares",
meansq = "Mean squares",
statistic = "F-statistic",
p.value = "p-value")
model_squares_table
?recode
sal <- and_vertebrates %>%
filter(species == "Coastal giant salamander",
unittype %in% c("C", "P", "SC")) %>%
mutate(unit_name = case_when(
unittype == "C" ~ "cascade",
unittype == "P" ~ "pool",
unittype == "SC" ~ "channel"
)) %>%
mutate(tf = log(length_1_mm))
naniar::gg_miss_var(sal, facet = unit_name)
sal_summary <- sal %>%
group_by(unit_name) %>%
summarize(mean = mean(length_1_mm, na.rm = TRUE),
sd = sd(length_1_mm, na.rm = TRUE),
count = length(length_1_mm),
se = sd/sqrt(count),
var = var(length_1_mm, na.rm = TRUE))
sal_summary
ggplot(sal, aes(x = unit_name, y = length_1_mm)) +
geom_boxplot()
ggplot(sal, aes(x = length_1_mm)) +
geom_histogram() +
facet_wrap(~ unit_name, scales = "free")
ggplot(sal, aes(sample = log(length_1_mm))) +
stat_qq_line(color = "blue") +
stat_qq() +
facet_wrap(~ unit_name)
ggplot(sal, aes(sample = length_1_mm)) +
stat_qq_line(color = "blue") +
stat_qq() +
facet_wrap(~ unit_name)
ggplot(sal, aes(x = length_1_mm)) +
geom_histogram() +
facet_wrap(~ unit_name, scales = "free")
ggplot(sal, aes(sample = length_1_mm)) +
stat_qq_line(color = "blue") +
stat_qq() +
facet_wrap(~ unit_name)
leveneTest(length_1_mm ~ unit_name, data = sal)
ggplot(sal, aes(x = length_1_mm)) +
geom_histogram() +
facet_wrap(~ unit_name, scales = "free")
ggplot(sal, aes(sample = length_1_mm)) +
stat_qq_line(color = "blue") +
stat_qq() +
facet_wrap(~ unit_name)
reg_anova <- aov(length_1_mm ~ unit_name, data = sal)
plot(reg_anova)
log_anova <- aov(tf ~ unit_name, data = sal)
plot(log_anova)
tbl_regression(model_summary)
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 1)) %>%
mutate(p.value)
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 1))
?recode
?switch
model_squares_table
p.value < 0.001 ~ "< 0.001"
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 1)) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001"
))
model_squares_table
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 1)) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001"
)) %>%
flextable() %>%
set_header_labels(df = "Degrees of Freedom",
sumsq = "Sum of squares",
meansq = "Mean squares",
statistic = "F-statistic",
p.value = "p-value")
model_squares_table
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 1)) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001"
))
View(model_squares_table)
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 1)) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001"
)) %>%
mutate(term = case_when(
term == "stem_length" ~ "Stem length (mm)",
TRUE ~ term
))
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 1)) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001"
)) %>%
mutate(term = case_when(
term == "stem_length" ~ "Stem length (mm)",
TRUE ~ term
)) %>%
flextable() %>%
set_header_labels(df = "Degrees of Freedom",
sumsq = "Sum of squares",
meansq = "Mean squares",
statistic = "F-statistic",
p.value = "p-value")
model_squares_table
model_summary
maples_data <- hbr_maples %>%
filter(year == 2003 & watershed == "Reference")
ggplot(data = maples_data, aes(x = stem_length, y = stem_dry_mass)) +
geom_point()
modelobject <- lm(stem_dry_mass ~ stem_length, data = maples_data)
plot_predictions <- ggplot(data = maples_data,
aes(x = stem_length, y = stem_dry_mass)) +
# first plot the underlying data from maples_data
geom_point() +
# then plot the predictions
geom_line(data = predictions,
aes(x = x, y = predicted),
color = "blue", linewidth = 1) +
# then plot the 95% confidence interval from ggpredict
geom_ribbon(data = predictions,
aes(x = x, y = predicted, ymin = conf.low, ymax = conf.high),
alpha = 0.2) +
# theme and meaningful labels
theme_bw() +
labs(x = "Stem length (mm)",
y = "Stem dry mass (g)")
plot_predictions
# store the ANOVA table as an object
model_squares <- anova(modelobject)
model_summary
model_squares
# store the ANOVA table as an object
model_squares <- aov(modelobject)
model_squares
# store the ANOVA table as an object
model_squares <- anova(modelobject)
model_squares
?anova
model_squares_table <- tidy(model_squares) %>%
mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>%
mutate(statistic = round(statistic, digits = 1)) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001"
)) %>%
mutate(term = case_when(
term == "stem_length" ~ "Stem length (mm)",
TRUE ~ term
)) %>%
flextable() %>%
set_header_labels(df = "Degrees of Freedom",
sumsq = "Sum of squares",
meansq = "Mean squares",
statistic = "F-statistic",
p.value = "p-value")
model_squares_table
# makes the viewer pane show a 2x2 grid of plots
# format: par(mfrow = c(number of columns, number of rows))
par(mfrow = c(1, 4))
plot(modelobject)
# makes the viewer pane show a 2x2 grid of plots
# format: par(mfrow = c(number of rows, number of columns))
par(mfrow = c(2, 2))
plot(modelobject)
# turns off the 2x2 grid - pop this under the code chunk where you set the 2x2 grid
dev.off()
# note different function from before!
sal_anova <- aov(length_1_mm ~ unit_name, data = sal)
sal_anova
TukeyHSD(reg_anova)
TukeyHSD(sal_anova)
sal_anova
tidy(sal_anova)
leveneTest(tf ~ unit_name, data = sal)
log_anova <- aov(tf ~ unit_name, data = sal)
plot(log_anova)
plot(log_anova, which = c(2))
summary(sal_anova)
sal_anova_summary <- summary(sal_anova)
tidy(sal_anova_summary)
tidy(sal_anova)
View(df_lm)
cor.test(x, y, data = df_lm)
?cor.test
cor.test(y ~ x, data = df_lm, method = "pearson")
cor.test(~ x + y, data = df_lm, method = "pearson")
cor.test(x, y, method = "pearson")
x <- x_lm
y <- y_lm
cor.test(x, y, method = "pearson")
df_para <- cbind(
x = x_lm,
y = x_lm^2 + 1
) %>%
as_tibble()
x_lm <- seq(from = 1, to = 30, by = 1)
df_para <- cbind(
x = x_lm,
y = x_lm^2 + 1
) %>%
as_tibble()
ggplot(x_lm, aes(x = x, y = y)) +
geom_point()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
df_para <- cbind(
x = x_lm,
y = -x_lm^2 + 1
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
df_para <- cbind(
x = x_lm,
y = -x_lm^2 + x_lm + 1
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 2(x - 1)^2 + 3
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = function(x) 2*(x - 1)^2 + 3
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 2*(x - 1)^2 + 3
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
x_lm <- seq(from = 1, to = 30, by = 1)
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 2*(x - 1)^2 + 3
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 2*x^2 + 3*x + 4
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
x_lm <- seq(from = -30, to = 30, by = 1)
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 2*x^2 + 3*x + 4
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
x_lm <- seq(from = 1, to = 30, by = 1)
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 3*(x - 2)^2 + 10
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.33*(x - 0.2)^2 + 0.5
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.03*(x - 0.2)^2 + 0.5
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.03*(x - 10)^2 + 10
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.03*(x - 15)^2 + 10
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
cor.test(df_para$x, df_para$y, method = "pearson")
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.03*(x - 15)^2 + 12
) %>%
as_tibble()
cor.test(df_para$x, df_para$y, method = "pearson")
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.1*(x - 15)^2 + 12
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
cor.test(df_para$x, df_para$y, method = "pearson")
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.1*(x - 15)^2 + 12
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point()
cor.test(df_para$x, df_para$y, method = "pearson")
ggplot(df_para, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_bw()
x_lm <- seq(from = 1, to = 30, by = 0.5)
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.1*(x - 15)^2 + 12
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_bw()
x_lm <- seq(from = 1, to = 30, length.out = 50)
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.1*(x - 15)^2 + 12
) %>%
as_tibble()
x_lm
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.1*(x_lm - 15)^2 + 12
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_bw()
cor.test(df_para$x, df_para$y, method = "pearson")
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.1*(x_lm - 17)^2 + 12
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_bw()
cor.test(df_para$x, df_para$y, method = "pearson")
# y = a( x – h) 2 + k
df_para <- cbind(
x = x_lm,
y = 0.1*(x_lm - 15)^2 + 12
) %>%
as_tibble()
ggplot(df_para, aes(x = x, y = y)) +
geom_point(size = 3) +
theme_bw()
cor.test(df_para$x, df_para$y, method = "pearson")
