"driving_distance", 41, 25, 29,
"out_of_town", 22, 27, 45
) %>%
# turning the column `distance` into the matrix rownames ----
column_to_rownames("distance")
survey_test <- chisq.test(survey)
# calculate proportions
survey_summary <- survey %>%
# turning `survey` into a data frame ----
as_tibble(rownames = "distance") %>%
# making it long format
pivot_longer(cols = trails:wildlife_habitat, names_to = "responses", values_to = "counts") %>%
# calculating proportions ----
# grouping by living distance
group_by(distance) %>%
# counting the total number of respondents per living distance
mutate(sum = sum(counts)) %>%
# ungrouping to make sure that distance groups don't mess up downstream functions
ungroup() %>%
# calculating proportion of responses per living distance
mutate(prop = counts/sum) %>%
# making the table look nicer ----
# making a new column where counts and proportions are displayed together
mutate(text = paste0(counts, " (", round(prop, digits = 2), ")")) %>%
# selecting columns of interest
select(distance, responses, text) %>%
# making the data frame wider so that the columns are responses and rows are distance
pivot_wider(names_from = "responses", values_from = "text") %>%
# making the row labels nicer
mutate(distance = case_match(
distance,
"walking_distance" ~ "Walking distance",
"driving_distance" ~ "Driving distance",
"out_of_town" ~ "Out of town"
)) %>%
# turning everything into a table ----
flextable() %>%
# changing the column names to look nicer
set_header_labels(distance = "Living distance",
trails = "Trails",
dog_access = "Dog access",
wildlife_habitat = "Wildlife habitat") %>%
# making the table fit the viewer window
autofit()
survey_summary
survey_test
#| fig.height: 12
#| fig.width: 10
#| out.width: 60%
#| fig.align: center
#| echo: fenced
# setting some color options
col1 <- "cornflowerblue"
col2 <- "orange"
col3 <- "darkgreen"
# making separate data frames for each species
adelie <- penguins %>%
filter(species == "Adelie")
chinstrap <- penguins %>%
filter(species == "Chinstrap")
gentoo <- penguins %>%
filter(species == "Gentoo")
# making histograms for each species
adelie_hist <- ggplot(data = adelie, aes(x = bill_length_mm)) +
geom_histogram(bins = 10, fill = col1, color = col1, alpha = 0.8) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 32)) +
labs(x = "Bill length (mm)", y = "Count",
title = "A)") +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
axis.ticks = element_blank(),
text = element_text(family = "Lato"),
plot.title.position = "plot")
chinstrap_hist <- ggplot(data = chinstrap, aes(x = bill_length_mm)) +
geom_histogram(bins = 10, fill = col2, color = col2, alpha = 0.8) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 23)) +
labs(x = "Bill length (mm)", y = "Count",
title = "C)") +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
axis.ticks = element_blank(),
text = element_text(family = "Lato"),
plot.title.position = "plot")
gentoo_hist <- ggplot(data = gentoo, aes(x = bill_length_mm)) +
geom_histogram(bins = 10, fill = col3, color = col3, alpha = 0.8) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 37)) +
labs(x = "Bill length (mm)", y = "Count",
title = "E)") +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
axis.ticks = element_blank(),
text = element_text(family = "Lato"),
plot.title.position = "plot")
# making QQ plots for each species
adelie_qq <- ggplot(data = adelie, aes(sample = bill_length_mm)) +
stat_qq_line(linewidth = 1) +
stat_qq(col = col1) +
labs(x = "Theoretical", y = "Sample",
title = "B)") +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
axis.ticks = element_blank(),
text = element_text(family = "Lato"),
plot.title.position = "plot")
chinstrap_qq <- ggplot(data = chinstrap, aes(sample = bill_length_mm)) +
stat_qq_line(linewidth = 1) +
stat_qq(col = col2) +
labs(x = "Theoretical", y = "Sample",
title = "D)") +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
axis.ticks = element_blank(),
text = element_text(family = "Lato"),
plot.title.position = "plot")
gentoo_qq <- ggplot(data = gentoo, aes(sample = bill_length_mm)) +
stat_qq_line(linewidth = 1) +
stat_qq(col = col3) +
labs(x = "Theoretical", y = "Sample",
title = "F)") +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
axis.ticks = element_blank(),
text = element_text(family = "Lato"),
plot.title.position = "plot")
# putting all the plots together using `patchwork`
(adelie_hist + adelie_qq) / (chinstrap_hist + chinstrap_qq) / (gentoo_hist + gentoo_qq)
shapiro.test(adelie$bill_length_mm)
shapiro.test(chinstrap$bill_length_mm)
shapiro.test(gentoo$bill_length_mm)
leveneTest(bill_length_mm ~ species, data = penguins)
penguins_anova <- aov(bill_length_mm ~ species, data = penguins)
penguins_HSD <- TukeyHSD(penguins_anova)
penguins_anova
# getting table from ANOVA object ----
tidy(penguins_anova) %>%
# changing very small p-values to < 0.001
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001"
)) %>%
# rounding values in numerical columns to 1 decimal point
mutate(across(sumsq:statistic, ~ round(.x, digits = 1))) %>%
# changing the row names to be nicer (capitalizing Species)
mutate(term = case_match(
term,
"species" ~ "Species",
.default = term
)) %>%
# turning the data frame into a flextable ----
flextable() %>%
# changing the column names to be nicer
set_header_labels(term = "Source of variation",
df = "Degrees of freedom",
sumsq = "Sum of squares",
meansq = "Mean squares",
statistic = "F-statistic",
p.value = "p-value") %>%
# making small p-values bold
bold(~ p.value == "< 0.001", 6) %>%
# fitting the table to the viewer
autofit()
penguins_HSD
set.seed(666)
# sample size
n <- 64
plant_df <- tibble(
# predictor variables
temperature = round(rnorm(n = n, mean = 28, sd = 1), digits = 1),
light = round(rnorm(n = n, mean = 1, sd = 0.2), digits = 1),
ph = rnorm(n = n, mean = 7, sd = 0.01),
# response: growth in cm/week
growth = light*rnorm(n = n, mean = 0.3, sd = 0.1) + temperature/round(rnorm(n = n, mean = 5, sd = 0.1))
)
plant_model <- lm(growth ~ light + temperature + ph, data = plant_df)
#| fig-width: 10
#| fig-height: 10
#| out.width: 90%
#| fig.align: center
#| echo: fenced
par(mfrow = c(2, 2))
plot(plant_model, which = c(1))
title("A)", adj = 0)
plot(plant_model, which = c(2))
title("B)", adj = 0)
plot(plant_model, which = c(3))
title("C)", adj = 0)
plot(plant_model, which = c(5))
title("D)", adj = 0)
summary(plant_model)
plant_model %>%
# turning the model object into a flextable ----
as_flextable() %>%
# changing the row labels using `compose()` ----
# i selects the row, j selects the column
compose(i = 2, j = 1,
# value is whatever you want to change the text to
value = as_paragraph(
# `as_sup()` makes something a superscript - good for units etc.
"Light (watts/m", as_sup("2"), ")"
)) %>%
compose(i = 3, j = 1,
value = as_paragraph(
"Temperature (°C)"
)) %>%
compose(i = 4, j = 1,
value = as_paragraph(
"pH"
)) %>%
# formatting the numbers to display to 3 decimal points ----
set_formatter(estimate = function(x) sprintf("%.03f", x),
std.error = function(x) sprintf("%.03f", x),
statistic = function(x) sprintf("%.03f", x),
p.value = function(x) sprintf("%.03f", x)) %>%
# changing the p.value to display as < 0.001 when very small ----
compose(j = "p.value", i = ~ p.value < 0.001,
value = as_paragraph(
"< 0.001"
)) %>%
# adding model equation at the top ----
# inserting new header row (to make space for equation)
add_header_lines("", top = TRUE) %>%
# putting in equation
compose(
# choosing row 1, column 1, indicating that is a header
j = 1, i = 1, part = "header",
# putting in the equation using as_equation and extract_eq from {equatiomatic}
value = as_paragraph(
as_equation(extract_eq(plant_model),
# formatting equation
width = 2, height = .5)
)) %>%
# making sure the equation is centered on the table
align(i = 1, part = "header", align = "center") %>%
# formatting header labels ----
set_header_labels(statistic = "t-statistic",
p.value = "p-value") %>%
# making cells bold when p.value < 0.05 ----
bold(i = ~ p.value < .05, j = "p.value") %>%
# making table fit viewer ----
autofit()
plant_model %>%
tidy() %>%
mutate(across(estimate:p.value, ~round(.x, digits = 3))) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001",
TRUE ~ as.character(p.value)
)) %>%
flextable() %>%
# changing the row labels using `compose()`
compose(i = 2, j = 1,
value = as_paragraph(
"Light (watts/m", as_sup("2"), ")"
)) %>%
compose(i = 3, j = 1,
value = as_paragraph(
"Temperature (°C)"
)) %>%
compose(i = 4, j = 1,
value = as_paragraph(
"pH"
)) %>%
# formatting header labels
set_header_labels(term = "Term",
estimate = "Estimate",
std.error = "Standard error",
statistic = "t-statistic",
p.value = "p-value") %>%
bold(j = 5, i = ~p.value == "< 0.001") %>%
autofit()
Anova(plant_model) %>%
tidy() %>%
mutate(across(sumsq:p.value, ~round(.x, digits = 3))) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001",
TRUE ~ as.character(p.value)
)) %>%
flextable() %>%
# changing the row labels using `compose()`
compose(i = 1, j = 1,
value = as_paragraph(
"Light (watts/m", as_sup("2"), ")"
)) %>%
compose(i = 2, j = 1,
value = as_paragraph(
"Temperature (°C)"
)) %>%
compose(i = 3, j = 1,
value = as_paragraph(
"pH"
)) %>%
# formatting header labels
set_header_labels(term = "Source of variation",
df = "Degrees of freedom",
sumsq = "Sum of squares",
meansq = "Mean squares",
statistic = "F-statistic",
p.value = "p-value") %>%
bold(j = 6, i = ~p.value == "< 0.001") %>%
autofit()
Anova(plant_model) %>%
tidy()
Anova(plant_model) %>%
tidy() %>%
mutate(across(sumsq:p.value, ~round(.x, digits = 3))) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001",
TRUE ~ as.character(p.value)
)) %>%
flextable()
Anova(plant_model) %>%
tidy() %>%
mutate(across(sumsq:p.value, ~round(.x, digits = 3))) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001",
TRUE ~ as.character(p.value)
)) %>%
flextable() %>%
# changing the row labels using `compose()`
compose(i = 1, j = 1,
value = as_paragraph(
"Light (watts/m", as_sup("2"), ")"
))
Anova(plant_model) %>%
tidy() %>%
mutate(across(sumsq:p.value, ~round(.x, digits = 3))) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001",
TRUE ~ as.character(p.value)
)) %>%
flextable() %>%
# changing the row labels using `compose()`
compose(i = 1, j = 1,
value = as_paragraph(
"Light (watts/m", as_sup("2"), ")"
)) %>%
compose(i = 2, j = 1,
value = as_paragraph(
"Temperature (°C)"
)) %>%
compose(i = 3, j = 1,
value = as_paragraph(
"pH"
)) %>%
# formatting header labels
set_header_labels(term = "Source of variation",
sumsq = "Sum of squares",
df = "Degrees of freedom",
statistic = "F-statistic",
p.value = "p-value") %>%
bold(j = 6, i = ~p.value == "< 0.001") %>%
autofit()
Anova(plant_model) %>%
tidy() %>%
mutate(across(sumsq:p.value, ~round(.x, digits = 3))) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001",
TRUE ~ as.character(p.value)
)) %>%
flextable() %>%
# changing the row labels using `compose()`
compose(i = 1, j = 1,
value = as_paragraph(
"Light (watts/m", as_sup("2"), ")"
)) %>%
compose(i = 2, j = 1,
value = as_paragraph(
"Temperature (°C)"
)) %>%
compose(i = 3, j = 1,
value = as_paragraph(
"pH"
)) %>%
# formatting header labels
set_header_labels(term = "Source of variation",
sumsq = "Sum of squares",
df = "Degrees of freedom",
statistic = "F-statistic",
p.value = "p-value") %>%
bold(j = 5, i = ~p.value == "< 0.001") %>%
autofit()
?Anova
Anova(plant_model)
lmtest::lrtest(plant_model)
plant_model %>%
tidy() %>%
mutate(across(estimate:p.value, ~round(.x, digits = 3))) %>%
mutate(p.value = case_when(
p.value < 0.001 ~ "< 0.001",
TRUE ~ as.character(p.value)
)) %>%
flextable() %>%
# changing the row labels using `compose()`
compose(i = 2, j = 1,
value = as_paragraph(
"Light (watts/m", as_sup("2"), ")"
)) %>%
compose(i = 3, j = 1,
value = as_paragraph(
"Temperature (°C)"
)) %>%
compose(i = 4, j = 1,
value = as_paragraph(
"pH"
)) %>%
# formatting header labels
set_header_labels(term = "Term",
estimate = "Estimate",
std.error = "Standard error",
statistic = "t-statistic",
p.value = "p-value") %>%
bold(j = 5, i = ~p.value == "< 0.001") %>%
autofit()
plant_model %>%
# turning the model object into a flextable ----
as_flextable() %>%
# changing the row labels using `compose()` ----
# i selects the row, j selects the column
compose(i = 2, j = 1,
# value is whatever you want to change the text to
value = as_paragraph(
# `as_sup()` makes something a superscript - good for units etc.
"Light (watts/m", as_sup("2"), ")"
)) %>%
compose(i = 3, j = 1,
value = as_paragraph(
"Temperature (°C)"
)) %>%
compose(i = 4, j = 1,
value = as_paragraph(
"pH"
)) %>%
# formatting the numbers to display to 3 decimal points ----
set_formatter(estimate = function(x) sprintf("%.03f", x),
std.error = function(x) sprintf("%.03f", x),
statistic = function(x) sprintf("%.03f", x),
p.value = function(x) sprintf("%.03f", x)) %>%
# changing the p.value to display as < 0.001 when very small ----
compose(j = "p.value", i = ~ p.value < 0.001,
value = as_paragraph(
"< 0.001"
)) %>%
# adding model equation at the top ----
# inserting new header row (to make space for equation)
add_header_lines("", top = TRUE) %>%
# putting in equation
compose(
# choosing row 1, column 1, indicating that is a header
j = 1, i = 1, part = "header",
# putting in the equation using as_equation and extract_eq from {equatiomatic}
value = as_paragraph(
as_equation(extract_eq(plant_model),
# formatting equation
width = 2, height = .5)
)) %>%
# making sure the equation is centered on the table
align(i = 1, part = "header", align = "center") %>%
# formatting header labels ----
set_header_labels(statistic = "t-statistic",
p.value = "p-value") %>%
# making cells bold when p.value < 0.05 ----
bold(i = ~ p.value < .05, j = "p.value") %>%
# making table fit viewer ----
autofit()
#| fig-width: 12
#| fig-height: 6
#| fig-align: center
temp_pred <- ggpredict(plant_model, terms = "temperature")
light_pred <- ggpredict(plant_model, terms = "light")
temp_plot <- ggplot(data = plant_df, aes(x = temperature, y = growth)) +
geom_point() +
geom_ribbon(data = temp_pred, aes(x = x, y = predicted, ymin = conf.low, ymax = conf.high), alpha = 0.2) +
geom_line(data = temp_pred, aes(x = x, y = predicted), color = "blue", linewidth = 1) +
theme_classic() +
labs(x = "Temperature (°C)", y = "Growth (cm/week)",
title = "A)") +
theme(plot.title.position = "plot",
text = element_text(size = 15))
light_plot <- ggplot(data = plant_df, aes(x = light, y = growth)) +
geom_point() +
geom_ribbon(data = light_pred, aes(x = x, y = predicted, ymin = conf.low, ymax = conf.high), alpha = 0.2) +
geom_line(data = light_pred, aes(x = x, y = predicted), color = "darkorange", linewidth = 1) +
theme_classic() +
labs(x = expression(paste("Light (watts/"~m^2~")")), y = "Growth (cm/week)",
title = "B)") +
theme(plot.title.position = "plot",
text = element_text(size = 15))
temp_plot + light_plot
#| echo: false
library(tidyverse)
library(palmerpenguins)
# trying out a model
penguin_model <- lm(body_mass_g ~ flipper_length_mm*species, data = penguins)
plot(penguin_model)
# trying out a model
penguin_model <- lm(bill_length_mm ~ bill_depth_mm*species, data = penguins)
plot(penguin_model)
model_summary <- tidy(penguin_model, conf.int = TRUE)
model_summary
usethis::git_sitrep()
5.926^2
0.994^1
