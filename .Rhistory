value = as_paragraph(
as_equation(extract_eq(plant_model),
width = 2, height = .5)
)) %>%
align(i = 1, part = "header", align = "center") %>%
# formatting header labels
set_header_labels(statistic = "t-statistic",
p.value = "p-value") %>%
# making cells bold when p.value < 0.05
bold(i = ~ p.value < .05, j = "p.value") %>%
# making table fit viewer
autofit()
plant_model %>%
# turning the model object into a flextable
as_flextable() %>%
# changing the row labels using `compose()`
# i selects the row, j selects the column
compose(i = 2, j = 1,
# value is whatever you want to change the text to
value = as_paragraph(
# `as_sup()` makes something a superscript - good for units etc.
"Light (watts/m", as_sup("2"), ")"
)) %>%
compose(i = 3, j = 1,
value = as_paragraph(
"Temperature (°C)"
)) %>%
compose(i = 4, j = 1,
value = as_paragraph(
"pH"
)) %>%
# formatting the numbers to display to 3 decimal points
set_formatter(estimate = function(x) sprintf("%.03f", x),
std.error = function(x) sprintf("%.03f", x),
statistic = function(x) sprintf("%.03f", x),
p.value = function(x) sprintf("%.03f", x)) %>%
# changing the p.value to display as < 0.001 when very small
compose(j = "p.value", i = ~ p.value < 0.001,
value = as_paragraph(
"< 0.001"
)) %>%
# adding model equation at the top
compose(
part = "header",
value = as_paragraph(
as_equation(extract_eq(plant_model),
width = 2, height = .5)
)) %>%
align(part = "header", align = "center") %>%
# formatting header labels
set_header_labels(statistic = "t-statistic",
p.value = "p-value") %>%
# making cells bold when p.value < 0.05
bold(i = ~ p.value < .05, j = "p.value") %>%
# making table fit viewer
autofit()
plant_model %>%
# turning the model object into a flextable
as_flextable() %>%
# changing the row labels using `compose()`
# i selects the row, j selects the column
compose(i = 2, j = 1,
# value is whatever you want to change the text to
value = as_paragraph(
# `as_sup()` makes something a superscript - good for units etc.
"Light (watts/m", as_sup("2"), ")"
)) %>%
compose(i = 3, j = 1,
value = as_paragraph(
"Temperature (°C)"
)) %>%
compose(i = 4, j = 1,
value = as_paragraph(
"pH"
)) %>%
# formatting the numbers to display to 3 decimal points
set_formatter(estimate = function(x) sprintf("%.03f", x),
std.error = function(x) sprintf("%.03f", x),
statistic = function(x) sprintf("%.03f", x),
p.value = function(x) sprintf("%.03f", x)) %>%
# changing the p.value to display as < 0.001 when very small
compose(j = "p.value", i = ~ p.value < 0.001,
value = as_paragraph(
"< 0.001"
)) %>%
# adding model equation at the top
add_header_lines("", top = TRUE) %>%
compose(
j = 1, i = 1, part = "header",
value = as_paragraph(
as_equation(extract_eq(plant_model),
width = 2, height = .5)
)) %>%
align(i = 1, part = "header", align = "center") %>%
# formatting header labels
set_header_labels(statistic = "t-statistic",
p.value = "p-value") %>%
# making cells bold when p.value < 0.05
bold(i = ~ p.value < .05, j = "p.value") %>%
# making table fit viewer
autofit()
library(tidyverse)
library(palmerpenguins)
library(showtext)
library(car)
font_add_google("Lato", "Lato")
showtext_auto()
library(patchwork)
library(ggeffects)
library(performance)
library(broom)
library(flextable)
library(DHARMa)
library(GGally)
set.seed(666)
# sample size
n <- 64
plant_df <- tibble(
# predictor variables
temperature = round(rnorm(n = n, mean = 28, sd = 1), digits = 1),
light = round(rnorm(n = n, mean = 1, sd = 0.2), digits = 1),
ph = rnorm(n = n, mean = 7, sd = 0.01),
# response: growth in cm/week
growth = light*rnorm(n = n, mean = 0.3, sd = 0.1) + temperature/round(rnorm(n = n, mean = 5, sd = 0.1))
)
plant_model <- lm(growth ~ light + temperature + ph, data = plant_df)
par(mfrow = c(2, 2))
plot(plant_model)
dev.off()
check_model(plant_model)
pairs(plant_df, upper.panel = NULL)
ggpairs(plant_df)
cor(plant_df)
vif(plant_model)
summary(plant_model)
anova(plant_model)
2.85039/0.0083
set.seed(666)
frog_n <- 87
df <- cbind(
# predictor variables
color = sample(x = c("blue", "green", "red"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3)),
weight = (round(rnorm(n = frog_n, mean = 3, sd = 0.3), 2)),
pattern = sample(x = c("striped", "spotted", "none"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3))
) %>%
as_tibble() %>%
mutate(weight = as.numeric(weight),
color = as.factor(color),
pattern = as.factor(pattern)) %>%
group_by(color, pattern) %>%
# response variable
mutate(toxicity = case_when(
color == "blue" & pattern == "striped" ~ rnorm(n = length(color), mean = 5, sd = 1),
color == "blue" & pattern == "spotted" ~ rnorm(n = length(color), mean = 4, sd = 1),
color == "green" & pattern == "striped" ~ rnorm(n = length(color), mean = 4, sd = 1),
color == "green" & pattern == "spotted" ~ rnorm(n = length(color), mean = 3, sd = 1),
color == "red" ~ rnorm(n = length(color), mean = 6, sd = 1),
TRUE ~ rnorm(n = length(color), mean = 2, sd = 1)
)) %>%
ungroup()
blue_col <- "cornflowerblue"
green_col <- "darkgreen"
red_col <- "maroon"
striped_col <- "grey1"
spotted_col <- "grey50"
none_col <- "grey80"
ggplot(data = df, aes(x = color, y = toxicity, color = color, fill = color)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.3) +
scale_color_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
scale_fill_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
stat_summary(geom = "pointrange", fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), shape = 21, size = 1) +
#  geom_point(position = position_jitter(width = 0.2, height = 0, seed = 666), alpha = 0.3) +
labs(title = "Color") +
theme_bw() +
theme(legend.position = "none",
axis.title.x = element_blank(),
text = element_text(size = 22))
ggplot(data = df, aes(x = pattern, y = toxicity, shape = pattern)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.3) +
# scale_color_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
# scale_fill_manual(values = c("striped" = striped_col, "spotted" = spotted_col, "none" = none_col)) +
stat_summary(geom = "pointrange", fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), size = 1) +
labs(title = "Pattern") +
theme_bw() +
theme(legend.position = "none",
axis.title.x = element_blank(),
text = element_text(size = 22))
ggplot(data = df, aes(x = weight, y = toxicity)) +
geom_point() +
# geom_smooth(method = "lm") +
labs(title = "Weight") +
theme_bw() +
theme(legend.position = "none",
axis.title.x = element_blank(),
text = element_text(size = 22))
ggplot(data = df, aes(x = weight, y = toxicity, color = color)) +
geom_point() +
scale_color_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
geom_smooth(method = "lm") +
labs(title = "Weight")
model <- lm(toxicity ~ weight + color + pattern, data = df)
simulateResiduals(model, plot = TRUE)
par(mfrow = c(2, 2))
plot(model)
summary(model)
anova(model)
0.2673*1.082
confint(model)
-0.2893+0.2892186
?confint
confint
-0.5038-0.4229
-0.5038+0.4229
confint.default
qnorm(0.025)
summary(model)
-1.959964*0.4229
confint(model)
-0.5038-0.8288688
qnorm(0.025)
predict(model)
?predict
model_summary <- summary(model)
mse <- mean(model_summ$residuals^2)
mse <- mean(model_summary$residuals^2)
mse
multi <- qnorm(0.025)
View(df)
df_summary <- df %>%
group_by(color) %>%
summarize(mean = mean(toxicity),
sd = sd(toxicity),
var = var(toxicity),
count = length(toxicity),
se = sd/sqrt(count),
margin = qt(0.95, df = count - 1) * se)
df_summary <- df %>%
group_by(color) %>%
summarize(mean = mean(toxicity),
sd = sd(toxicity),
var = var(toxicity),
count = length(toxicity),
se = sd/sqrt(count),
margin = qnorm(0.025) * se)
View(df_summary)
6.188411-3.408276
summary(model)
confint(model)
df_summary
7.0595+(2*0.9776)
summary(model)
0.4229*2
-0.5038-0.8458
confint(model)
# Chunk 1: libraries
library(tidyverse)
library(palmerpenguins)
library(showtext)
library(car)
font_add_google("Lato", "Lato")
showtext_auto()
library(patchwork)
library(ggeffects)
library(performance)
library(broom)
library(flextable)
library(DHARMa)
library(GGally)
# Chunk 2: plant-data
set.seed(666)
# sample size
n <- 64
plant_df <- tibble(
# predictor variables
temperature = round(rnorm(n = n, mean = 28, sd = 1), digits = 1),
light = round(rnorm(n = n, mean = 1, sd = 0.2), digits = 1),
ph = rnorm(n = n, mean = 7, sd = 0.01),
# response: growth in cm/week
growth = light*rnorm(n = n, mean = 0.3, sd = 0.1) + temperature/round(rnorm(n = n, mean = 5, sd = 0.1))
)
# Chunk 3: plant-model
plant_model <- lm(growth ~ light + temperature + ph, data = plant_df)
# Chunk 4: plant-diagnostics
par(mfrow = c(2, 2))
plot(plant_model)
# Chunk 5: plant-dev-off
dev.off()
# Chunk 6: plant-model-performance
check_model(plant_model)
pairs(plant_df, upper.panel = NULL)
ggpairs(plant_df)
cor(plant_df)
vif(plant_model)
# Chunk 7: plant-summary
summary(plant_model)
anova(plant_model)
# Chunk 8
2.85039/0.0083
# Chunk 9: frog-data
set.seed(666)
frog_n <- 87
df <- cbind(
# predictor variables
color = sample(x = c("blue", "green", "red"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3)),
weight = (round(rnorm(n = frog_n, mean = 3, sd = 0.3), 2)),
pattern = sample(x = c("striped", "spotted", "none"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3))
) %>%
as_tibble() %>%
mutate(weight = as.numeric(weight),
color = as.factor(color),
pattern = as.factor(pattern)) %>%
group_by(color, pattern) %>%
# response variable
mutate(toxicity = case_when(
color == "blue" & pattern == "striped" ~ rnorm(n = length(color), mean = 5, sd = 1),
color == "blue" & pattern == "spotted" ~ rnorm(n = length(color), mean = 4, sd = 1),
color == "green" & pattern == "striped" ~ rnorm(n = length(color), mean = 4, sd = 1),
color == "green" & pattern == "spotted" ~ rnorm(n = length(color), mean = 3, sd = 1),
color == "red" ~ rnorm(n = length(color), mean = 6, sd = 1),
TRUE ~ rnorm(n = length(color), mean = 2, sd = 1)
)) %>%
ungroup()
# Chunk 10: frog-plots
blue_col <- "cornflowerblue"
green_col <- "darkgreen"
red_col <- "maroon"
striped_col <- "grey1"
spotted_col <- "grey50"
none_col <- "grey80"
ggplot(data = df, aes(x = color, y = toxicity, color = color, fill = color)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.3) +
scale_color_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
scale_fill_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
stat_summary(geom = "pointrange", fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), shape = 21, size = 1) +
#  geom_point(position = position_jitter(width = 0.2, height = 0, seed = 666), alpha = 0.3) +
labs(title = "Color") +
theme_bw() +
theme(legend.position = "none",
axis.title.x = element_blank(),
text = element_text(size = 22))
ggplot(data = df, aes(x = pattern, y = toxicity, shape = pattern)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.3) +
# scale_color_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
# scale_fill_manual(values = c("striped" = striped_col, "spotted" = spotted_col, "none" = none_col)) +
stat_summary(geom = "pointrange", fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), size = 1) +
labs(title = "Pattern") +
theme_bw() +
theme(legend.position = "none",
axis.title.x = element_blank(),
text = element_text(size = 22))
ggplot(data = df, aes(x = weight, y = toxicity)) +
geom_point() +
# geom_smooth(method = "lm") +
labs(title = "Weight") +
theme_bw() +
theme(legend.position = "none",
axis.title.x = element_blank(),
text = element_text(size = 22))
ggplot(data = df, aes(x = weight, y = toxicity, color = color)) +
geom_point() +
scale_color_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
geom_smooth(method = "lm") +
labs(title = "Weight")
# Chunk 11: frog-model
model <- lm(toxicity ~ weight + color + pattern, data = df)
simulateResiduals(model, plot = TRUE)
# Chunk 12: frog-diagnostics
par(mfrow = c(2, 2))
plot(model)
# Chunk 13: frog-dev-off
dev.off()
# Chunk 14
# F-statistic: 31.05 on 5 and 81 DF,  p-value: < 2.2e-16
# total SSE - SSE of residuals divided by degrees of freedom
totalSSE <- 6.932+140.09+21.63
totaldf <- 1+2+2
errorSSE <- 88
model_fstat <- (totalSSE/5)/(errorSSE/81)
model_fstat
# for a single coefficient
weightMS <- 6.932
weightdf <- 1
errorMS <- 1.086
fvalweight <- (weightMS/weightdf)/errorMS
fvalweight
colorMS <- 70.045
colordf <- 2
fvalcolor <- (colorMS/colordf)/errorMS
fvalcolor
# residual mean sq = 1.086 (denominator)
# equation: t = 5.5 - 0.74*W - 0.97*green + 2.1*red + 0.85*spotted + 1.2*striped
# Chunk 15
model_summary <- summary(model)
anova(model)
tidy(model, conf.int = TRUE, conf.level = 0.95)
summary(model)
tidy
confint(model)
tidy(model, conf.int = TRUE, conf.level = 0.95)
.423*2
-.504-.846
-.504+.806
-.504+.846
qnorm(0.025)
-1.959964*0.423
0.504-0.8290648
summary(model)
View(df)
qt(0.025, 87)
-1.987608*0.4229
-0.5038-0.8405594
-0.5038+0.8405594
ggpredict(model, terms = "color")
plot(ggpredict(model, terms = "color"), add.data = TRUE)
ggplot(data = df, aes(x = color, y = toxicity, color = color, fill = color)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.3) +
scale_color_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
scale_fill_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
stat_summary(geom = "pointrange", fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), shape = 21, size = 1) +
#  geom_point(position = position_jitter(width = 0.2, height = 0, seed = 666), alpha = 0.3) +
labs(title = "Color") +
theme_bw() +
theme(legend.position = "none",
axis.title.x = element_blank(),
text = element_text(size = 22))
tidy(model, conf.int = TRUE, conf.level = 0.95)
plot(ggpredict(model, terms = "color"), add.data = TRUE)
plot(ggpredict(model, terms = "color"), add.data = TRUE)
ggpredict(model, terms = "color")
tidy(model, conf.int = TRUE, conf.level = 0.95)
5.13-2.59
library(tidyverse)
library(palmerpenguins)
library(showtext)
library(car)
font_add_google("Lato", "Lato")
showtext_auto()
library(patchwork)
library(ggeffects)
library(performance)
library(broom)
library(flextable)
library(DHARMa)
library(GGally)
set.seed(666)
frog_n <- 87
df <- cbind(
# predictor variables
color = sample(x = c("blue", "green", "red"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3)),
weight = (round(rnorm(n = frog_n, mean = 3, sd = 0.3), 2)),
pattern = sample(x = c("striped", "spotted", "none"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3))
) %>%
as_tibble() %>%
mutate(weight = as.numeric(weight),
color = as.factor(color),
pattern = as.factor(pattern)) %>%
group_by(color, pattern) %>%
# response variable
mutate(toxicity = case_when(
color == "blue" & pattern == "striped" ~ rnorm(n = length(color), mean = 5, sd = 1),
color == "blue" & pattern == "spotted" ~ rnorm(n = length(color), mean = 4, sd = 1),
color == "green" & pattern == "striped" ~ rnorm(n = length(color), mean = 4, sd = 1),
color == "green" & pattern == "spotted" ~ rnorm(n = length(color), mean = 3, sd = 1),
color == "red" ~ rnorm(n = length(color), mean = 6, sd = 1),
TRUE ~ rnorm(n = length(color), mean = 2, sd = 1)
)) %>%
ungroup()
model <- lm(toxicity ~ weight + color + pattern, data = df)
simulateResiduals(model, plot = TRUE)
model_summary <- summary(model)
anova(model)
tidy(model, conf.int = TRUE, conf.level = 0.95)
model_summary
qt(0.025, 81)
View(df)
qt(0.025, 85)
anova(model)
Anova(model)
mse <- 1.090
tstat <- -1.988268
sqrt(mse/87)
0.1119318*tstat
model_summary
-0.5038-0.2225504
tidy(model, conf.int = TRUE, conf.level = 0.95)
c("lower" = model_summary$coef[2,1] - qt(0.975, df = model_summary$df[2]) * model_summary$coef[2, 2],
"upper" = model_summary[2,1] + qt(0.975, df = model_summary$df[2]) * model_summary$coef[2, 2])
model_summary <- summary(model)
str(model_summary)
model_summary$coef
model_summary$coef[2, 1]
model_summary$df
model_summary$df[2]
model_summary$df[2])
model_summary$coef[2, 2]
model_summary$coef[2,1
]
model_summary$coef[2,1]
qt(0.975, df = model_summary$df[2])
model_summary$coef[2, 2]
model_summary$coef[2,1] - qt(0.975, df = model_summary$df[2]) * model_summary$coef[2, 2]
"upper" = model_summary[2,1] + qt(0.975, df = model_summary$df[2]) * model_summary$coef[2, 2]
c("lower" = model_summary$coef[2,1] - qt(0.975, df = model_summary$df[2]) * model_summary$coef[2, 2],
"upper" = model_summary$coef[2,1] + qt(0.975, df = model_summary$df[2]) * model_summary$coef[2, 2])
tidy(model, conf.int = TRUE, conf.level = 0.95)
Anova(model)
88.304/81
model_summary
Anova(model)
anova(model)
library(MuMIn)
model.sel(model)
