{
  "hash": "ff2d3d10938e3f96581347faf03d5815",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"OPTIONAL practice problem - Central Limit Theorem\"\neditor: source\nfreeze: auto\ndate: 2024-04-18\ndate-modified: last-modified\n---\n\n\n## 1. Description\n\nIn this optional problem, you'll test out the Central Limit Theorem by repeatedly \"sampling\" a population with a uniform distribution with sample sizes of n = 2, n = 15, and n = 30. You'll create histograms of the sampling distributions (i.e. means from the samples you generate) to see how the spread of the sampling distribution gets narrower with increasing sample size.    \n\n## 2. General guidance\n\nYou don't have to follow these steps exactly (or at all), but this is a workflow that might make sense. Try it out on your own!\n\n### a. Steps\n\n1. Create a script or Quarto document to work in.  \n2. Copy/paste the code in the Set up code chunk into your script. Run the code.  \n3. Calculate the population mean. Store this as an object.  \n4. Find the function that allows you to \"sample\" from a vector of numbers. If you don't know the function, one google search could be \"r sample numbers\".  \n5. Resample (i.e. take a sample multiple times) 100 times from the population, taking a sample of n = 2 each time.  \n6. Calculate the mean every time you take a sample. Store each mean in a list.  \n7. Create a histogram of your sample means using the list from step 6.  \n8. Repeat steps 2-5 for n = 15, and n = 30.\n\n:::{.callout-tip}\n# `for()` loops\n\nDoing repetitive tasks like steps 5-6 can get tiresome. You probably do not want to sample and calculate a mean \"by hand\" 300 times. Instead, you can write what's called a `for()` loop. One resource for writing `for()` loops is in the [chapter on Iteration](https://r4ds.had.co.nz/iteration.html) in _R for Data Science_. There are other resources out there too! Try finding one that you like.  \n:::\n\n### b. Set up code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the tidyverse\nlibrary(tidyverse)\n\n# set seed: makes sure the \"random\" generation comes up with the same combination of numbers every time\nset.seed(1)\n\n# generate 10000 numbers from a uniform distribution for the population\nuniform <- runif(10000, min = 2, max = 8)\n\n# turn the vector into a data frame\nuniformdf <- as.data.frame(uniform)\n\n# make a histogram for the population\nggplot(data = uniformdf, \n       aes(x = uniform)) +\n  geom_histogram(breaks = seq(2, 8, length.out = 41), \n                 fill = \"firebrick\", \n                 alpha = 0.7, \n                 color = \"firebrick\") +\n  geom_vline(xintercept = mean(uniform), \n             linewidth = 2) +\n  scale_x_continuous(breaks = seq(from = 2, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), \n                     limits = c(0, 305)) +\n  labs(x = \"Continuous value\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18))\n```\n\n::: {.cell-output-display}\n![](optional-problem-01_files/figure-html/unnamed-chunk-1-1.png){width=1152}\n:::\n:::\n\n\n## 3. Solution\n\n### a. Resampling using a `for()` loop\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for() loop to sample 100x and calculate the mean\n\n# creating holding vectors\nstore2 <- c()\nstore15 <- c()\nstore30 <- c()\n\nfor(i in 1:100) {\n  \n  # sample from the population, calculate the mean, store that mean in the vector\n  store2[i] <- mean(sample(uniform, 2, replace = FALSE))\n  store15[i] <- mean(sample(uniform, 15, replace = FALSE))\n  store30[i] <- mean(sample(uniform, 30, replace = FALSE))\n\n}\n\n# double checking that the holding vectors actually have values in them\nhead(store2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.274438 4.708106 5.089106 5.065707 4.728355 5.068479\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(store15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.642239 4.914242 4.723196 5.237746 4.314470 5.602474\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(store30)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.432664 5.037553 5.165615 4.619024 4.573481 5.170263\n```\n\n\n:::\n:::\n\n\n### b. n = 2 histogram\n\nBefore plotting the histogram, I'll put the output from the `for()` loop into a data frame. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# putting everything together in a data frame (not necessary but nice to do)\ndf <- cbind(store2, store15, store30) %>% \n  as.data.frame()\n```\n:::\n\n\nThen, I'll plot the first histogram for n = 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# making a histogram for n = 2\nggplot(data = df) +\n  # making a histogram\n  geom_histogram(aes(x = store2), \n                 bins = 10, \n                 alpha = 0.7, \n                 fill = \"chocolate1\", \n                 color = \"chocolate1\") +\n  # controlling the axes\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  # controlling plot aesthetics\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](optional-problem-01_files/figure-html/n2-histogram-1.png){width=672}\n:::\n:::\n\n\n### c. n = 15 histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# histogram for n = 15\nggplot(data = df) +\n  # making a histogram\n  geom_histogram(aes(x = store15), \n                 bins = 12, \n                 alpha = 0.7, \n                 fill = \"darkorchid4\", \n                 color = \"darkorchid4\") +\n  # controlling the axes\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  # controlling plot aesthetics\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](optional-problem-01_files/figure-html/n15-histogram-1.png){width=672}\n:::\n:::\n\n\n### d. n = 30 histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# histogram for n = 30\nggplot(data = df) +\n  # making a histogram\n  geom_histogram(aes(x = store30), \n                 bins = 12, \n                 alpha = 0.7, \n                 fill = \"lightseagreen\", \n                 color = \"lightseagreen\") +\n  # controlling the axes\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  # controlling plot aesthetics\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](optional-problem-01_files/figure-html/n30-histogram-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "optional-problem-01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}