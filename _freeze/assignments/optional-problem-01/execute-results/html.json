{
  "hash": "d82a3536d9e461d0be4a2d4f06026f2a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"OPTIONAL practice problem - Central Limit Theorem\"\neditor: source\nfreeze: auto\npublished-title: \"Solution posted\"\ndate: 2024-04-18\ndate-modified: last-modified\n---\n\n\n[Solution will be posted on Friday April 18]{style=\"color: #79ACBD; font-size: 24px;\"}\n\n## 1. Description\n\nIn this optional problem, you'll test out the Central Limit Theorem by repeatedly \"sampling\" a population with a uniform distribution with sample sizes of n = 2, n = 15, and n = 30. You'll create histograms of the sampling distributions (i.e. means from the samples you generate) to see how the spread of the sampling distribution gets narrower with increasing sample size.    \n\n## 2. General guidance\n\nYou don't have to follow these steps exactly (or at all), but this is a workflow that might make sense. Try it out on your own!\n\n### a. Steps\n\n1. Create a script or Quarto document to work in.  \n2. Copy/paste the code in the Set up code chunk into your script. Run the code.  \n3. Calculate the population mean. Store this as an object.  \n4. Find the function that allows you to \"sample\" from a vector of numbers. If you don't know the function, one google search could be \"r sample numbers\".  \n5. Resample (i.e. take a sample multiple times) 20 times from the population, taking a sample of n = 2 each time.  \n6. Calculate the mean every time you take a sample. Store each mean in a list.  \n7. Create a histogram of your sample means using the list from step 6.  \n8. Repeat steps 2-5 for n = 15, and n = 30.\n\n:::{.callout-tip}\n# `for()` loops\n\nDoing repetitive tasks like steps 5-6 can get tiresome. For that, you can write what's called a `for()` loop. One resource for writing `for()` loops is in the [chapter on Iteration](https://r4ds.had.co.nz/iteration.html) in _R for Data Science_.  \n\nIf you write a `for()` loop, you can resample your population way more times than 20. Try resampling 100 times.\n:::\n\n### b. Set up code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in the tidyverse\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n# set seed: makes sure the \"random\" generation comes up with the same combination of numbers every time\nset.seed(1)\n\n# generate 10000 numbers from a uniform distribution for the population\nuniform <- runif(10000, min = 2, max = 8)\n\n# turn the vector into a data frame\nuniformdf <- as.data.frame(uniform)\n\n# make a histogram for the population\nggplot(uniformdf, aes(x = uniform)) +\n  geom_histogram(breaks = seq(2, 8, length.out = 41), fill = \"firebrick\", alpha = 0.7, color = \"firebrick\") +\n  geom_vline(xintercept = mean(uniform), linewidth = 2) +\n  scale_x_continuous(breaks = seq(from = 2, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 305)) +\n  labs(x = \"Continuous value\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18))\n```\n\n::: {.cell-output-display}\n![](optional-problem-01_files/figure-html/unnamed-chunk-1-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "optional-problem-01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}