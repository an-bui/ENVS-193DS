{
  "hash": "09873d681646d69035fabcd7617f170e",
  "result": {
    "markdown": "---\ntitle: \"Lecture 04 figures\"\neditor: source\nfreeze: auto\nauthor:\n  - name: An Bui\n    url: https://an-bui.com/\n    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology\n    affiliation-url: https://www.eemb.ucsb.edu/\ndate: 2023-04-24\ncategories: [t-test]\ncitation:\n  url: https://an-bui.github.io/ES-193DS-W23/lecture/lecture-01_2023-04-24.html\n---\n\n\n# 0. set up\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cleaning\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# visualization\nlibrary(showtext)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sysfonts\nLoading required package: showtextdb\n```\n:::\n\n```{.r .cell-code}\nfont_add_google(\"Lato\", \"Lato\")\nshowtext_auto()\n\n# panels together\nlibrary(patchwork)\n\n# cohen's d\nlibrary(effsize)\n```\n:::\n\n\n# 1. one vs two tailed figure\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntwo <- ggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(3, 5), fill = \"darkgrey\") +\n  geom_linerange(aes(x = 3, ymin = 0, ymax = 0.032), linewidth = 1, lty = 2, color = \"#000000\") +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(-5, -3), fill = \"darkgrey\") +\n  geom_linerange(aes(x = -3, ymin = 0, ymax = 0.032), linewidth = 1, lty = 2, color = \"#000000\") +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#000000\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  theme_void() +\n  theme(panel.grid = element_blank())\n\none <- ggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(2, 5), fill = \"darkgrey\") +\n  geom_linerange(aes(x = 2, ymin = 0, ymax = 0.063), linewidth = 1, lty = 2, color = \"#000000\") +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#000000\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  theme_void() +\n  theme(panel.grid = element_blank())\n\none + two\n```\n\n::: {.cell-output-display}\n![](lecture-04_2023-04-24_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n# 1. Acorn example\n\n$$\n\\begin{align}\nn &= 41 \\\\\n\\bar{x} &= 2.29 \\\\\ns &= 1.04\n\\end{align}\n$$\n\n## random numbers from t-distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(7)\n# acorns <- rt(n = 41, df = 40, ncp = 2.5) \nacorns <- rnorm(n = 41, mean = 2, sd = 1)\n```\n:::\n\n\n## histogram\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhist <- enframe(acorns) %>% \n  ggplot(aes(x = value)) +\n  geom_histogram(bins = 7, fill = \"cornflowerblue\", color = \"#000000\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 11.5), breaks = c(0, 3, 6, 9, 12)) +\n  theme_classic() +\n  labs(x = \"Acorn mass (g)\", y = \"Count\")\n```\n:::\n\n\n## qq plot\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nqq <- enframe(acorns) %>% \n  ggplot(aes(sample = value)) +\n  stat_qq_line(aes(sample = value)) +\n  stat_qq(aes(sample = value), color = \"cornflowerblue\", size = 3) +\n  theme_classic() +\n  labs(x = \"Theoretical quantiles\", y = \"Sample quantiles\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist + qq\n```\n\n::: {.cell-output-display}\n![](lecture-04_2023-04-24_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## calculating a critical value\n\n::: {.cell}\n\n```{.r .cell-code}\nqt(p = .05/2, df = 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -2.021075\n```\n:::\n:::\n\n\n## calculating t-score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# population mean\nmu0 <- 2\n\n# number of observations\nn <- 41\n\n# sample mean\nxbar <- mean(acorns)\n\n# sample standard deviation\ns <- sd(acorns)\n\n# sample standard error\nse <- s/sqrt(n)\n\n# degrees of freedom\ndf <- n - 1\n\n# t-score\nt <- (xbar-mu0)/se\n\nt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.803471\n```\n:::\n:::\n\n\n$$\nt_s = \\frac{\\bar{x} - \\mu}{s/\\sqrt{n}} = \\frac{2.29 - 2}{1.04/\\sqrt{41}} = 1.8\n$$\n## visual representation of sample t-statistic vs t-critical\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(1.8, 5), fill = \"darkgrey\") +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(-5, -1.8), fill = \"darkgrey\") +\n  geom_linerange(aes(x = 1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = \"#000000\") +\n  geom_linerange(aes(x = -1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = \"#000000\") +\n  \n  geom_linerange(aes(x = 2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = \"#FFFFFF\") +\n  geom_linerange(aes(x = -2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = \"#FFFFFF\") +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#000000\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  theme_void() +\n  theme(panel.grid = element_blank(),\n        plot.margin = unit(c(1, 0, 0, 0), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](lecture-04_2023-04-24_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## manually calculating p-value\n\n::: {.cell}\n\n```{.r .cell-code}\n# two-tailed: multiply probability by 2\n# lower = FALSE: probability of the value being more than t\n2*pt(t, df, lower = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.07885024\n```\n:::\n:::\n\n\n## doing a t-test\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(acorns, mu = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tOne Sample t-test\n\ndata:  acorns\nt = 1.8035, df = 40, p-value = 0.07885\nalternative hypothesis: true mean is not equal to 2\n95 percent confidence interval:\n 1.964535 2.623323\nsample estimates:\nmean of x \n 2.293929 \n```\n:::\n:::\n\n\n# 2. two-sample t-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex1 <- ggplot(data.frame(x = -8:8), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 1, sd = 2), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 1), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nset.seed(2)\nx <- rnorm(30, mean = 0, sd = 2)\ny <- rnorm(30, mean = 1, sd = 2)\n\nt.test(x = x, y = y, var.equal = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tTwo Sample t-test\n\ndata:  x and y\nt = -0.78852, df = 58, p-value = 0.4336\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -1.6721807  0.7270662\nsample estimates:\nmean of x mean of y \n0.4573436 0.9299009 \n```\n:::\n\n```{.r .cell-code}\n# 0.43\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nex2 <- ggplot(data.frame(x = -8:17), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 2, sd = 2), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 1), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nset.seed(1000000000)\nx <- rnorm(30, mean = 0, sd = 2)\ny <- rnorm(30, mean = 2, sd = 2)\n\nt.test(x = x, y = y, var.equal = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tTwo Sample t-test\n\ndata:  x and y\nt = -3.7904, df = 58, p-value = 0.0003603\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -2.7905631 -0.8617609\nsample estimates:\nmean of x mean of y \n0.1435745 1.9697364 \n```\n:::\n\n```{.r .cell-code}\n# 0.6932\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nex3 <- ggplot(data.frame(x = -8:17), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 10, sd = 2), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 10), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nset.seed(100)\nx <- rnorm(40, mean = 0, sd = 2)\ny <- rnorm(40, mean = 10, sd = 2)\n\nt.test(x = x, y = y, var.equal = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tTwo Sample t-test\n\ndata:  x and y\nt = -21.69, df = 78, p-value < 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -10.564878  -8.788488\nsample estimates:\nmean of x mean of y \n0.2003543 9.8770375 \n```\n:::\n\n```{.r .cell-code}\n# p < 0.001\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nex1 + ex2 + ex3\n```\n\n::: {.cell-output-display}\n![](lecture-04_2023-04-24_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## same differences in means, different SD\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 2), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 3), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nbig <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 0.5), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 0.5), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 3), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.8)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nsmall / big\n```\n\n::: {.cell-output-display}\n![](lecture-04_2023-04-24_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n# 3. Cohen's D\n\n\n$$\nCohen's d = \\frac{\\bar{x_A} - \\bar{x_B}}{\\sqrt{(s^2_A + s^2_B)/2}}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncohen.d(acorns ~ ., mu = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCohen's d (single sample)\n\nd estimate: 0.2816548 (small)\nReference mu: 2\n95 percent confidence interval:\n     lower      upper \n-0.3527453  0.9160549 \n```\n:::\n:::\n",
    "supporting": [
      "lecture-04_2023-04-24_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}