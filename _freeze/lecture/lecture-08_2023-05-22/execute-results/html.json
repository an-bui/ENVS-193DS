{
  "hash": "16865bc0cbdf38f3569697c6a00e2516",
  "result": {
    "markdown": "---\ntitle: \"Lecture 08 figures\"\neditor: source\nexecute:\n  message: false\n  warning: false\nauthor:\n  - name: An Bui\n    url: https://an-bui.com/\n    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology\n    affiliation-url: https://www.eemb.ucsb.edu/\ndate: 2023-05-22\ncategories: [multiple linear regression]\ncitation:\n  url: https://an-bui.github.io/ES-193DS-W23/lecture/lecture-08_2023-05-22.html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(showtext)\nlibrary(car)\nfont_add_google(\"Lato\", \"Lato\")\nshowtext_auto()\nlibrary(patchwork)\nlibrary(ggeffects)\nlibrary(performance)\nlibrary(broom)\nlibrary(flextable)\nlibrary(DHARMa)\nlibrary(GGally)\n```\n:::\n\n\n# multiple linear regression equation\n\n$$\n\\begin{align}\ny &= \\beta_0 + \\beta_1x_1 + \\beta_2x_2 + ... \\beta_kx_k + \\epsilon\n\\end{align}\n$$\n\n# formulas\n\n## sum of squares for linear regression\n\n### regression (or model)\n\n$$\nSS_{reg} = \\sum_{i = 1}^{n}(\\hat{y} - \\bar{y})^2\n$$\n\n### error\n\n$$\nSS_{err} = \\sum_{i = 1}^{n}(y_i - \\hat{y})^2\n$$\n\n### total \n\n$$\nSS_{tot} = \\sum_{i = 1}^n(y_i - \\bar{y})\n$$\n\n## mean square\n\n### regression\n\n$$\nMS_{reg} = \\frac{SS_{reg}}{1}\n$$\n\n### error\n\n$$\nMS_{err} = \\frac{SS_{err}}{n - 2}\n$$\n\n## F-statistic\n\n$$\nF = \\frac{MS_{reg}}{MS_{err}}\n$$\n\n# plant example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(666)\n# sample size\nn <- 64\nplant_df <- tibble(\n  # predictor variables\n  temperature = round(rnorm(n = n, mean = 28, sd = 1), digits = 1),\n  light = round(rnorm(n = n, mean = 1, sd = 0.2), digits = 1),\n  ph = rnorm(n = n, mean = 7, sd = 0.01),\n  \n  # response: growth in cm/week\n  growth = light*rnorm(n = n, mean = 0.3, sd = 0.1) + temperature/round(rnorm(n = n, mean = 5, sd = 0.1))\n) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplant_model <- lm(growth ~ light + temperature + ph, data = plant_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\nplot(plant_model)\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/plant-diagnostics-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(plant_model)\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/plant-model-performance-1.png){width=672}\n:::\n\n```{.r .cell-code}\npairs(plant_df, upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/plant-model-performance-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggpairs(plant_df)\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/plant-model-performance-3.png){width=672}\n:::\n\n```{.r .cell-code}\ncor(plant_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            temperature       light          ph      growth\ntemperature  1.00000000  0.15540780 -0.06657697  0.89551840\nlight        0.15540780  1.00000000 -0.04769987  0.40397013\nph          -0.06657697 -0.04769987  1.00000000 -0.02466729\ngrowth       0.89551840  0.40397013 -0.02466729  1.00000000\n```\n:::\n\n```{.r .cell-code}\nvif(plant_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      light temperature          ph \n   1.026223    1.028447    1.005897 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(plant_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = growth ~ light + temperature + ph, data = plant_df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.23209 -0.06571  0.01010  0.06173  0.19950 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -6.67140    6.80194  -0.981    0.331    \nlight        0.35196    0.05939   5.926 1.63e-07 ***\ntemperature  0.19626    0.01058  18.558  < 2e-16 ***\nph           0.96241    0.96806   0.994    0.324    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.0911 on 60 degrees of freedom\nMultiple R-squared:  0.8759,\tAdjusted R-squared:  0.8696 \nF-statistic: 141.1 on 3 and 60 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nanova(plant_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: growth\n            Df  Sum Sq Mean Sq  F value    Pr(>F)    \nlight        1 0.65459 0.65459  78.8700 1.567e-12 ***\ntemperature  1 2.85039 2.85039 343.4377 < 2.2e-16 ***\nph           1 0.00820 0.00820   0.9884    0.3241    \nResiduals   60 0.49797 0.00830                       \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nFor example, temperature F-value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2.85039/0.0083\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 343.4205\n```\n:::\n:::\n\n\n$$\n\\begin{align}\nF &= \\frac{2.85039}{0.00830} \\\\\n&= 343.4205\n\\end{align}\n$$\n\n# frog example\n\n## generating data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(666)\nfrog_n <- 87\n\ndf <- cbind(\n  # predictor variables\n  color = sample(x = c(\"blue\", \"green\", \"red\"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3)),\n  weight = (round(rnorm(n = frog_n, mean = 3, sd = 0.3), 2)),\n  pattern = sample(x = c(\"striped\", \"spotted\", \"none\"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3))\n) %>% \n  as_tibble() %>% \n  mutate(weight = as.numeric(weight),\n         color = as.factor(color),\n         pattern = as.factor(pattern)) %>% \n  group_by(color, pattern) %>% \n  # response variable\n  mutate(toxicity = case_when(\n    color == \"blue\" & pattern == \"striped\" ~ rnorm(n = length(color), mean = 5, sd = 1),\n    color == \"blue\" & pattern == \"spotted\" ~ rnorm(n = length(color), mean = 4, sd = 1),\n    color == \"green\" & pattern == \"striped\" ~ rnorm(n = length(color), mean = 4, sd = 1),\n    color == \"green\" & pattern == \"spotted\" ~ rnorm(n = length(color), mean = 3, sd = 1),\n    color == \"red\" ~ rnorm(n = length(color), mean = 6, sd = 1),\n    TRUE ~ rnorm(n = length(color), mean = 2, sd = 1)\n  )) %>%\n  ungroup()\n```\n:::\n\n\n## plotting data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblue_col <- \"cornflowerblue\"\ngreen_col <- \"darkgreen\"\nred_col <- \"maroon\"\n\nstriped_col <- \"grey1\"\nspotted_col <- \"grey50\"\nnone_col <- \"grey80\"\n\nggplot(data = df, aes(x = color, y = toxicity, color = color, fill = color)) +\n  geom_jitter(width = 0.2, height = 0, alpha = 0.3) +\n  scale_color_manual(values = c(\"blue\" = blue_col, \"green\" = green_col, \"red\" = red_col)) +\n  scale_fill_manual(values = c(\"blue\" = blue_col, \"green\" = green_col, \"red\" = red_col)) +\n  stat_summary(geom = \"pointrange\", fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), shape = 21, size = 1) +\n #  geom_point(position = position_jitter(width = 0.2, height = 0, seed = 666), alpha = 0.3) +\n  labs(title = \"Color\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        axis.title.x = element_blank(),\n        text = element_text(size = 22))\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/frog-plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = df, aes(x = pattern, y = toxicity, shape = pattern)) +\n  geom_jitter(width = 0.2, height = 0, alpha = 0.3) +\n  # scale_color_manual(values = c(\"blue\" = blue_col, \"green\" = green_col, \"red\" = red_col)) +\n  # scale_fill_manual(values = c(\"striped\" = striped_col, \"spotted\" = spotted_col, \"none\" = none_col)) +\n  stat_summary(geom = \"pointrange\", fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), size = 1) +\n  labs(title = \"Pattern\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        axis.title.x = element_blank(),\n        text = element_text(size = 22))\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/frog-plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = df, aes(x = weight, y = toxicity)) +\n  geom_point() +\n  # geom_smooth(method = \"lm\") +\n  labs(title = \"Weight\") +\n  theme_bw() +\n  theme(legend.position = \"none\",\n        axis.title.x = element_blank(),\n        text = element_text(size = 22))\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/frog-plots-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = df, aes(x = weight, y = toxicity, color = color)) +\n  geom_point() +\n  scale_color_manual(values = c(\"blue\" = blue_col, \"green\" = green_col, \"red\" = red_col)) +\n  geom_smooth(method = \"lm\") +\n  labs(title = \"Weight\")\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/frog-plots-4.png){width=672}\n:::\n:::\n\n\n## model\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(toxicity ~ weight + color + pattern, data = df)\nsimulateResiduals(model, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/frog-model-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nObject of Class DHARMa with simulated residuals based on 250 simulations with refit = FALSE . See ?DHARMa::simulateResiduals for help. \n \nScaled residual values: 0.208 0.608 0.196 0.468 0.744 0.792 0.908 0.792 0.992 0.256 0.324 0.768 0.468 0.32 0.204 0.908 0.288 0.76 0.156 0.104 ...\n```\n:::\n:::\n\n\n## diagnostics\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\nplot(model)\n```\n\n::: {.cell-output-display}\n![](lecture-08_2023-05-22_files/figure-html/frog-diagnostics-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## model summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# F-statistic: 31.05 on 5 and 81 DF,  p-value: < 2.2e-16\n# total SSE - SSE of residuals divided by degrees of freedom\ntotalSSE <- 6.932+140.09+21.63\ntotaldf <- 1+2+2\nerrorSSE <- 88\nmodel_fstat <- (totalSSE/5)/(errorSSE/81) \nmodel_fstat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31.0473\n```\n:::\n\n```{.r .cell-code}\n# for a single coefficient\nweightMS <- 6.932\nweightdf <- 1\nerrorMS <- 1.086\nfvalweight <- (weightMS/weightdf)/errorMS\nfvalweight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.383057\n```\n:::\n\n```{.r .cell-code}\ncolorMS <- 70.045\ncolordf <- 2\nfvalcolor <- (colorMS/colordf)/errorMS\nfvalcolor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32.24908\n```\n:::\n\n```{.r .cell-code}\n# residual mean sq = 1.086 (denominator)\n# equation: t = 5.5 - 0.74*W - 0.97*green + 2.1*red + 0.85*spotted + 1.2*striped\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = toxicity ~ weight + color + pattern, data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.1236 -0.7663 -0.0927  0.7146  2.8783 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)      4.0450     1.2613   3.207  0.00192 ** \nweight          -0.5038     0.4229  -1.191  0.23698    \ncolorgreen      -0.2893     0.2673  -1.082  0.28232    \ncolorred         2.5885     0.2904   8.914 1.17e-13 ***\npatternspotted   0.9517     0.3029   3.142  0.00234 ** \npatternstriped   1.6957     0.2644   6.413 8.92e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.044 on 81 degrees of freedom\nMultiple R-squared:  0.6714,\tAdjusted R-squared:  0.6511 \nF-statistic:  33.1 on 5 and 81 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nanova(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: toxicity\n          Df  Sum Sq Mean Sq F value    Pr(>F)    \nweight     1   3.955   3.955  3.6279   0.06037 .  \ncolor      2 131.602  65.801 60.3589 < 2.2e-16 ***\npattern    2  44.843  22.421 20.5669 5.981e-08 ***\nResiduals 81  88.304   1.090                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n",
    "supporting": [
      "lecture-08_2023-05-22_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}