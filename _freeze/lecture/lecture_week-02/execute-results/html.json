{
  "hash": "d14a7a68fbcd28f7eef64322148e3f8b",
  "result": {
    "markdown": "---\ntitle: \"Week 2 figures - Lectures 3 and 4\"\neditor: source\nfreeze: auto\nformat:\n  html: \n    code-fold: true\nauthor:\n  - name: An Bui\n    url: https://an-bui.com/\n    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology\n    affiliation-url: https://www.eemb.ucsb.edu/\ndate: 2024-04-08\ndate-modified: last-modified\ncategories: [central limit theorem, z-distribution, t-distribution, confidence intervales, qqplot, one-tailed, two-tailed, t-test, cohen's d]\ncitation:\n  url: https://spring-2024.envs-193ds.com//lecture/lecture_week-02.html\n---\n\n\n## 0. set up\n\n\n::: {.cell}\n\n:::\n\n\n## 1. Math\n\n### a. standard error\n\n$$\nstandard \\: error = SE_{\\bar{x}} = \\frac{s}{\\sqrt{n}}\n$$\n\n### b. confidence interval\n\n$$\n\\begin{align}\nCI = estimate \\: &\\pm \\: margin \\: of \\: error \\\\\nCI = \\bar{x} \\: &\\pm \\: t_{\\alpha(2), df} \\times \\frac{s}{\\sqrt{n}}\n\\end{align}\n$$\n\n### c. t-statistic\n\n$$\nt_{\\alpha(2), df}\n$$\n\n$$\nt_{0.05(2), 19}\n$$\n\n### d. test statistic math notation\n\n$$\nt = \\frac{\\bar{x_A} - \\bar{x_B}}{\\sqrt{\\frac{s_A^2}{N_A}+\\frac{s_B^2}{N_B}}}\n$$\n\nWhen you have unequal variances:\n\n$$\ndf = \\frac{(\\frac{s_A^2}{N_A}+\\frac{S_B^2}{N_B})^2}{\\frac{(\\frac{s_A^2}{N_A})^2}{N_A-1}+\\frac{(\\frac{s_B^2}{N_B})^2}{N_B-1}}\n$$\n\n\nso for two-sample t-test where you have equal variances:\n\n$$\nt = \\frac{\\bar{x_A} - \\bar{x_B}}{s_p \\times \\sqrt{\\frac{1}{N_A + N_B}}}\n$$\n\nthe degrees of freedom are:\n\n$$\ndf = (N_A - 1) + (N_B - 1)\n$$\n\n### e. Cohen's d\n\n$$\nCohen's \\; d = \\frac{\\bar{x_A} - \\bar{x_B}}{\\sqrt{(s^2_A + s^2_B)/2}}\n$$\n\n### f. confidence interval for two-sample t-test\n\n$$\nCI = (\\bar{x_A} - \\bar{x_B}) \\pm t \\times \\sqrt{\\frac{(n_A - 1)s_A^2 + (n_B - 1)s_B^2}{n_A+n_B-2}} \\times \\sqrt{\\frac{1}{n_A}+\\frac{1}{n_B}}\n$$\n\n## 2. central limit theorem\n\nIf you were to sample a bunch of times from any distribution (i.e. take many observations within a sample, take many observations in another sample), the mean values for each sample will be normally distributed. Kareem Carr has a nice explainer of how this works [here](https://twitter.com/kareem_carr/status/1754524686606626894).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# randomly select 10000 numbers from a uniform distribution for the population\nuniform <- runif(10000, min = 2, max = 8)\n\n# make a histogram for the population\nuniformdf <- as.data.frame(uniform)\n\nggplot(uniformdf, aes(x = uniform)) +\n  geom_histogram(breaks = seq(2, 8, length.out = 41), fill = \"firebrick\", alpha = 0.7, color = \"firebrick\") +\n  geom_vline(xintercept = mean(uniform), linewidth = 2) +\n  annotate(\"text\", x = 4, y = 290, label = \"mean = 4.967\", size = 10) +\n  scale_x_continuous(breaks = seq(from = 2, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 305)) +\n  labs(x = \"Continuous value\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18))\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/clt-setup-uniform-distribution-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# for() loop to \nstore2 <- c()\nstore5 <- c()\nstore15 <- c()\nstore30 <- c()\nstore50 <- c()\n\nfor(i in 1:100) {\n  \n  # sample 100x\n  store2[i] <- mean(sample(uniform, 2, replace = FALSE))\n  store5[i] <- mean(sample(uniform, 5, replace = FALSE))\n  store15[i] <- mean(sample(uniform, 15, replace = FALSE))\n  store30[i] <- mean(sample(uniform, 30, replace = FALSE))\n  store50[i] <- mean(sample(uniform, 50, replace = FALSE))\n\n}\n\n\ndf <- cbind(store2, store5, store15, store30, store50) %>% \n  as.data.frame()\n  \nggplot(df) +\n  geom_histogram(aes(x = store2), bins = 10, alpha = 0.7, fill = \"chocolate1\", color = \"chocolate1\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store2)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/clt-samples-1.png){width=1152}\n:::\n\n```{.r .cell-code}\nggplot(df) +\n  geom_histogram(aes(x = store5), bins = 10, alpha = 0.7, fill = \"blue3\", color = \"blue3\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store5)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/clt-samples-2.png){width=1152}\n:::\n\n```{.r .cell-code}\nggplot(df) +\n  geom_histogram(aes(x = store15), bins = 12, alpha = 0.7, fill = \"darkorchid4\", color = \"darkorchid4\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store15)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/clt-samples-3.png){width=1152}\n:::\n\n```{.r .cell-code}\nggplot(df) +\n  geom_histogram(aes(x = store30), bins = 12, alpha = 0.7, fill = \"lightseagreen\", color = \"lightseagreen\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store30)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/clt-samples-4.png){width=1152}\n:::\n\n```{.r .cell-code}\nggplot(df) +\n  geom_histogram(aes(x = store50), bins = 12, alpha = 0.7, fill = \"violetred3\", color = \"violetred3\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store50)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/clt-samples-5.png){width=1152}\n:::\n:::\n\n\n## 3. z- vs t-distribution\n\n### a. comparison with normal\n\nt-distributions allow for more uncertainty around the tails.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1, color = \"darkorange\") +\n  annotate(\"text\", x = 2.5, y = 0.4, label = \"normal\", color = \"darkorange\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#856F33\") +\n  annotate(\"text\", x = 3, y = 0.32, label = \"t-distribution (small n)\", color = \"#856F33\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 10), linewidth = 1, color = \"#56E9E7\") +\n  annotate(\"text\", x = 3, y = 0.37, label = \"t-distribution (large n)\", color = \"#56E9E7\", size = 6) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/comparison-plot-1.png){width=1152}\n:::\n:::\n\n\n### b. visual representation of significance and t-statistic\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 19), xlim = c(1.8, 5), fill = \"#0070c0\") +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 19), xlim = c(-5, -1.8), fill = \"#0070c0\") +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 19), linewidth = 1, color = \"#000000\") +\n  geom_hline(yintercept = 0) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.4)) +\n  theme_void() +\n  theme(panel.grid = element_blank(),\n        plot.margin = unit(c(1, 0, 0, 0), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/t-dist-and-significance-1.png){fig-align='center' width=1344}\n:::\n:::\n\n\n## 4. confidence intervals\n\nThis is the leaf example from lecture.\n\n### random number generation\n\nThis generates the \"population\": 10000 trees.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(7)\nleaf_pop <- rnorm(n = 10000, mean = 4.92, sd = 0.5)\nleaves <- sample(leaf_pop, size = 20, replace = FALSE)\n```\n:::\n\n\n### population histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# population histogram\nenframe(leaf_pop) %>% \n  ggplot(aes(x = value)) +\n  geom_histogram(fill = \"darkgreen\", \n                 color = \"darkgreen\",\n                 alpha = 0.8) +\n  geom_vline(xintercept = mean(leaf_pop),\n             linetype = 2,\n             linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0)) +\n  labs(x = \"Leaf length (cm)\",\n       y = \"Count\") +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/leaf-pop-hist-1.png){width=672}\n:::\n:::\n\n\n### sample histogram\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbreakpoints <- round(seq(from = min(leaves), to = max(leaves), length.out = 7), 2)\n\nhist <- enframe(leaves) %>% \n  ggplot(aes(x = value)) +\n  geom_histogram(bins = 7, fill = \"cornflowerblue\", color = \"#000000\", breaks = breakpoints) +\n  scale_x_continuous(breaks = breakpoints) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 6), breaks = c(0, 1, 2, 3, 4, 5, 6)) +\n  theme_classic() +\n  labs(x = \"Leaf length (cm)\", y = \"Count\")\nhist\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/leaf-histogram-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n### sample density plot\n\n::: {.cell}\n\n```{.r .cell-code}\nenframe(leaves) %>% \n  ggplot(aes(x = value)) +\n  geom_density(fill = \"cornflowerblue\", color = \"#000000\", linewidth = 1) +\n  scale_x_continuous(limits = c(2.5, 7)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.65)) +\n  geom_vline(xintercept = mean(leaves)) +\n  annotate(\"text\", x = 6, y = 0.6, label = \"sample mean = 4.84 cm\", size = 6) +\n  theme_classic() +\n  labs(x = \"Leaf length (cm)\", \n       y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/sample-density-1.png){width=672}\n:::\n:::\n\n\n### sample dot and whisker plot with confidence intervals\n\n::: {.cell}\n\n```{.r .cell-code}\nleaf_conflev <- tribble(\n  ~ conflev,\n  0.85,\n  0.90,\n  0.95,\n  0.99\n) %>% \n  mutate(  lower = case_when(\n    conflev == 0.85 ~ mean(leaves) - -qt(p = 0.15/2, df = 19)*sd(leaves)/sqrt(length(leaves)),\n    conflev == 0.90 ~ mean(leaves) - -qt(p = 0.1/2, df = 19)*sd(leaves)/sqrt(length(leaves)),\n    conflev == 0.95 ~ mean(leaves) - -qt(p = 0.05/2, df = 19)*sd(leaves)/sqrt(length(leaves)),\n    conflev == 0.99 ~ mean(leaves) - -qt(p = 0.01/2, df = 19)*sd(leaves)/sqrt(length(leaves)) \n  ), \n  upper = case_when(\n    conflev == 0.85 ~ mean(leaves) + -qt(p = 0.15/2, df = 19)*sd(leaves)/sqrt(length(leaves)),\n    conflev == 0.90 ~ mean(leaves) + -qt(p = 0.1/2, df = 19)*sd(leaves)/sqrt(length(leaves)),\n    conflev == 0.95 ~ mean(leaves) + -qt(p = 0.05/2, df = 19)*sd(leaves)/sqrt(length(leaves)),\n    conflev == 0.99 ~ mean(leaves) + -qt(p = 0.01/2, df = 19)*sd(leaves)/sqrt(length(leaves))\n  )) %>% \n  mutate(mean = mean(leaves))\n  # se <- s/sqrt(n)\n\nggplot() +\n  geom_point(data = enframe(leaves), aes(x = 0.84, y = leaves),\n             alpha = 0.6, shape = 21) +\n  geom_point(data = enframe(leaves), aes(x = 0.89, y = leaves),\n             alpha = 0.6, shape = 21) +\n  geom_point(data = enframe(leaves), aes(x = 0.94, y = leaves),\n             alpha = 0.6, shape = 21) +\n  geom_point(data = enframe(leaves), aes(x = 0.98, y = leaves),\n             alpha = 0.6, shape = 21) +\n  geom_point(data = leaf_conflev, aes(x = conflev, y = mean), \n             size = 3,\n             color = \"cornflowerblue\") +\n  geom_errorbar(data = leaf_conflev, aes(x = conflev, y = mean, ymin = lower, ymax = upper), \n                width = 0.006, \n                linewidth = 1,\n                color = \"cornflowerblue\") +\n  theme_void() +\n  theme(panel.grid = element_blank()) +\n  labs(x = \"Confidence levels\", \n       y = \"Leaf length (cm)\") \n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/sample-dot-and-whisker-1.png){width=672}\n:::\n:::\n\n\n### sample qq plot\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nqq <- enframe(leaves) %>% \n  ggplot(aes(sample = value)) +\n  stat_qq_line(aes(sample = value)) +\n  stat_qq(aes(sample = value), color = \"cornflowerblue\", size = 3) +\n  theme_classic() +\n  labs(x = \"Theoretical quantiles\", y = \"Sample quantiles\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist + qq\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/sample-histogram-and-qq-plot-1.png){width=672}\n:::\n:::\n\n\n### resampling visual\n\n#### resampling with different sample sizes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleaf_5 <- rep(NA, length = 1000)\nleaf_20 <- rep(NA, length = 1000)\nleaf_40 <- rep(NA, length = 1000)\n\nleaf_20_sd <- rep(NA, length = 1000)\n\n# sample 5 leaves from population 1000x\nfor(i in 1:1000) {\n  \n  # sample 5 leaves from population\n  sample_5 <- sample(leaf_pop, size = 5, replace = FALSE) \n  sample_20 <- sample(leaf_pop, size = 20, replace = FALSE) \n  sample_40 <- sample(leaf_pop, size = 40, replace = FALSE) \n  \n  leaf_5[i] <- mean(sample_5)\n  leaf_20[i] <- mean(sample_20)\n  leaf_40[i] <- mean(sample_40)\n  \n  leaf_20_sd[i] <- sd(sample_20)\n}\n\nleaf_df <- cbind(leaf_5, leaf_20, leaf_40) %>% \n  as_tibble() %>% \n  pivot_longer(cols = 1:3) %>% \n  mutate(name = case_when(\n    name == \"leaf_5\" ~ \"n = 5\",\n    name == \"leaf_20\" ~ \"n = 20\",\n    name == \"leaf_40\" ~ \"n = 40\"\n  ),\n  name = fct_relevel(name, \"n = 5\", \"n = 20\", \"n = 40\"))\n\nleaf_df %>% \n  filter(name == \"n = 20\") %>% \n  ggplot() +\n  geom_histogram(aes(x = value),\n                 color = \"cornflowerblue\",\n                 fill = \"cornflowerblue\",\n                 alpha = 0.8) +\n  geom_vline(xintercept = mean(leaf_pop),\n             linetype = 2,\n             linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 280)) +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        strip.text = element_text(size = 18)) +\n  labs(x = \"Leaf length (cm)\") +\n  facet_wrap(~name, ncol = 1) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/sampling-distributions-1.png){width=576}\n:::\n\n```{.r .cell-code}\nggplot(leaf_df) +\n  geom_histogram(aes(x = value),\n                 color = \"cornflowerblue\",\n                 fill = \"cornflowerblue\",\n                 alpha = 0.8) +\n  geom_vline(xintercept = mean(leaf_pop),\n             linetype = 2,\n             linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 280)) +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        strip.text = element_text(size = 18)) +\n  labs(x = \"Leaf length (cm)\") +\n  facet_wrap(~name, ncol = 1) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/sampling-distributions-2.png){width=576}\n:::\n:::\n\n\n#### resampling confidence intervals\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleaf_20_ci <- cbind(leaf_20, leaf_20_sd) %>% \n  as_tibble() %>% \n  mutate(ci_low = leaf_20 - -qt(p = 0.05/2, df = 19)*leaf_20_sd/sqrt(20),\n         ci_high = leaf_20 + -qt(p = 0.05/2, df = 19)*leaf_20_sd/sqrt(20),\n         iter = rownames(.)) %>% \n  mutate(color = case_when(\n    ci_low <= mean(leaf_pop) & ci_high >= mean(leaf_pop) ~ \"yes\",\n    TRUE ~ \"no\"\n  ),\n  color = fct_relevel(color, \"yes\", \"no\"))\n\n# selecting 8 resamples to plot\nleaf_20_ci_sample <- leaf_20_ci %>% \n  group_by(color) %>% \n  sample_n(4) %>% \n  ungroup() %>% \n  mutate(iter = fct_inorder(iter))\n\nleaf_20_ci_sample\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 6\n  leaf_20 leaf_20_sd ci_low ci_high iter  color\n    <dbl>      <dbl>  <dbl>   <dbl> <fct> <fct>\n1    4.90      0.429   4.70    5.10 158   yes  \n2    4.86      0.443   4.66    5.07 108   yes  \n3    4.97      0.429   4.77    5.17 712   yes  \n4    4.75      0.459   4.53    4.96 298   yes  \n5    4.71      0.432   4.51    4.91 500   no   \n6    4.75      0.369   4.58    4.92 983   no   \n7    5.28      0.483   5.06    5.51 824   no   \n8    5.22      0.450   5.00    5.43 973   no   \n```\n:::\n\n```{.r .cell-code}\nggplot(data = leaf_20_ci_sample, aes(x = leaf_20, y = iter, color = color)) +\n  geom_vline(xintercept = mean(leaf_pop),\n             lty = 2) +\n  geom_pointrange(aes(xmin = ci_low, xmax = ci_high)) +\n  scale_color_manual(values = c(\"yes\" = \"darkgreen\", \"no\" = \"orange\")) +\n  scale_x_continuous(limits = c(mean(leaf_pop)*0.85, mean(leaf_pop)*1.15)) +\n  scale_y_discrete(limits = rev) +\n  theme(axis.title.y = element_blank(),\n        axis.line.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank()) +\n  theme(legend.position = \"none\") +\n  labs(x = \"Leaf length (cm)\")\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/resampling-n-20-1.png){width=576}\n:::\n:::\n\n\n### plotting standard error\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenframe(leaves) %>% \n  mutate(group = \"Sample\") %>% \n  ggplot(aes(x = group, y = value)) +\n  geom_point(position = position_jitter(width = 0.2, height = 0, seed = 1),\n             shape = 21,\n             alpha = 0.8) +\n  geom_point(aes(x = group, y = mean(value)),\n             color = \"cornflowerblue\",\n             size = 3) +\n  geom_errorbar(aes(ymin = mean(value) - sd(value)/sqrt(20), \n                    ymax = mean(value) + sd(value)/sqrt(20),\n                    width = 0.2),\n                color = \"cornflowerblue\",\n                size = 1) +\n  labs(y = \"Leaf length (cm)\") +\n  theme(axis.title.x = element_blank())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/standard-error-1.png){width=384}\n:::\n:::\n\n\n## 5. qqplot examples\n\nWe use qqplots (quantile-quantile plots) to visually evaluate the normality of some variable. The x-axis is the \"theoretical\" quantile, and the y-axis is the \"sample\" quantile. If the points follow a 1:1 line, then the variable is normally distributed.  \n\nThe New Haven temperature data is normally distributed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnhtemp_hist <- as_tibble(nhtemp) %>% \n  ggplot(aes(x = x)) +\n  geom_histogram(breaks = seq(47, 55, length.out = 9), fill = \"turquoise3\", color = \"#000000\") +\n  scale_x_continuous(breaks = seq(47, 55, length.out = 9), expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 23)) +\n  theme_classic() +\n  labs(x = \"Bins\", y = \"Count\") +\n    theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"),\n        plot.margin = unit(c(0.1, 1, 0.1, 0.1), \"cm\")) \n\nnhtemp_qq <- ggplot(as_tibble(nhtemp)) +\n  stat_qq(aes(sample = x), color = \"turquoise3\", size = 3) +\n  theme_classic() +\n  labs(x = \"Theoretical\", y = \"Sample\") +\n      theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"),\n        plot.margin = unit(c(0.1, 1, 0.1, 0.1), \"cm\")) \n\nnhtemp_hist + nhtemp_qq\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nDon't know how to automatically pick scale for object of type <ts>. Defaulting\nto continuous.\n```\n:::\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/nhtemp-histogram-and-qq-1.png){width=1152}\n:::\n:::\n\n\nThe sunspot data is not:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsunspot_hist <- as_tibble(sunspots) %>% \n  ggplot(aes(x = x)) +\n  geom_histogram(breaks = round(seq(0, 260, length.out = 30)), fill = \"tomato2\", color = \"#000000\") +\n  scale_x_continuous(breaks = round(seq(0, 260, length.out = 30)), expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 480)) +\n  theme_classic() +\n  labs(x = \"Bins\", y = \"Count\") +\n    theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"),\n        plot.margin = unit(c(0.1, 1, 0.1, 0.1), \"cm\")) \n\nsunspot_qq <- ggplot(as_tibble(sunspots)) +\n  stat_qq(aes(sample = x), color = \"tomato2\", size = 3) +\n  theme_classic() +\n  labs(x = \"Theoretical\", y = \"Sample\") +\n      theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"),\n        plot.margin = unit(c(0.1, 1, 0.1, 0.1), \"cm\")) \n\nsunspot_hist + sunspot_qq\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nDon't know how to automatically pick scale for object of type <ts>. Defaulting\nto continuous.\n```\n:::\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/sunspots-histogram-and-qq-1.png){width=1152}\n:::\n:::\n\n\n## 6. one vs two tailed figure\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntwo <- ggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(3, 5), fill = \"darkgrey\") +\n  geom_linerange(aes(x = 3, ymin = 0, ymax = 0.032), linewidth = 1, lty = 2, color = \"#000000\") +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(-5, -3), fill = \"darkgrey\") +\n  geom_linerange(aes(x = -3, ymin = 0, ymax = 0.032), linewidth = 1, lty = 2, color = \"#000000\") +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#000000\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  theme_void() +\n  theme(panel.grid = element_blank())\n\none <- ggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(2, 5), fill = \"darkgrey\") +\n  geom_linerange(aes(x = 2, ymin = 0, ymax = 0.063), linewidth = 1, lty = 2, color = \"#000000\") +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#000000\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  theme_void() +\n  theme(panel.grid = element_blank())\n\none + two\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/one-two-tailed-test-comparison-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n### calculating a critical value\n\n::: {.cell}\n\n```{.r .cell-code}\nqt(p = 0.05/2, df = 19)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -2.093024\n```\n:::\n:::\n\n\n### calculating t-score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# population mean\nmu0 <- 2\n\n# number of observations\nn <- 20\n\n# sample mean\nybar <- mean(leaves)\n\n# sample standard deviation\ns <- sd(leaves)\n\n# sample standard error\nse <- s/sqrt(n)\n\n# degrees of freedom\ndf <- n - 1\n\n# t-score\nt <- (ybar-mu0)/se\n\nt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22.43934\n```\n:::\n:::\n\n\n$$\nSE = \\frac{s}{\\sqrt{n}} = \\frac{0.371}{4.47} = 0.08\n$$\n\n### visual representation of sample t-statistic vs t-critical\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(1.8, 5), fill = \"darkgrey\") +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(-5, -1.8), fill = \"darkgrey\") +\n  geom_linerange(aes(x = 1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = \"#000000\") +\n  geom_linerange(aes(x = -1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = \"#000000\") +\n  \n  geom_linerange(aes(x = 2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = \"#FFFFFF\") +\n  geom_linerange(aes(x = -2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = \"#FFFFFF\") +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#000000\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  theme_void() +\n  theme(panel.grid = element_blank(),\n        plot.margin = unit(c(1, 0, 0, 0), \"cm\"))\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/sample-t-vs-t-crit-1.png){width=672}\n:::\n:::\n\n\n### manually calculating p-value\n\n::: {.cell}\n\n```{.r .cell-code}\n# two-tailed: multiply probability by 2\n# lower = FALSE: probability of the value being more than t\n2*pt(t, df, lower = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.892855e-15\n```\n:::\n:::\n\n\n### doing a t-test\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(leaves, mu = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tOne Sample t-test\n\ndata:  leaves\nt = 38.219, df = 19, p-value < 2.2e-16\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 4.578826 5.109393\nsample estimates:\nmean of x \n  4.84411 \n```\n:::\n:::\n\n\n## 8. two-sample t-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex1 <- ggplot(data.frame(x = -8:8), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 1, sd = 2), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 1), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nset.seed(2)\nx <- rnorm(30, mean = 0, sd = 2)\ny <- rnorm(30, mean = 1, sd = 2)\n\nt.test(x = x, y = y, var.equal = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tTwo Sample t-test\n\ndata:  x and y\nt = -0.78852, df = 58, p-value = 0.4336\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -1.6721807  0.7270662\nsample estimates:\nmean of x mean of y \n0.4573436 0.9299009 \n```\n:::\n\n```{.r .cell-code}\n# 0.43\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nex2 <- ggplot(data.frame(x = -8:17), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 2, sd = 2), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 2), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nset.seed(1000000000)\nx <- rnorm(30, mean = 0, sd = 2)\ny <- rnorm(30, mean = 2, sd = 2)\n\nt.test(x = x, y = y, var.equal = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tTwo Sample t-test\n\ndata:  x and y\nt = -3.7904, df = 58, p-value = 0.0003603\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -2.7905631 -0.8617609\nsample estimates:\nmean of x mean of y \n0.1435745 1.9697364 \n```\n:::\n\n```{.r .cell-code}\n# 0.6932\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nex3 <- ggplot(data.frame(x = -8:17), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 10, sd = 2), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 10), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nset.seed(100)\nx <- rnorm(40, mean = 0, sd = 2)\ny <- rnorm(40, mean = 10, sd = 2)\n\nt.test(x = x, y = y, var.equal = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tTwo Sample t-test\n\ndata:  x and y\nt = -21.69, df = 78, p-value < 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -10.564878  -8.788488\nsample estimates:\nmean of x mean of y \n0.2003543 9.8770375 \n```\n:::\n\n```{.r .cell-code}\n# p < 0.001\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nex1 + ex2 + ex3\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/two-sample-examples-together-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\n### same differences in means, different SD\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 2), linewidth = 2, color = \"#0070C0\") +\n  geom_vline(aes(xintercept = 3), color = \"#0070C0\", lty = 2, linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nbig <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 0.5), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 0.5), linewidth = 2, color = \"#0070C0\") +\n  geom_vline(aes(xintercept = 3), color = \"#0070C0\", lty = 2, linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.8)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\ndiff <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 0.5), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 1.25), linewidth = 2, color = \"#0070C0\") +\n  geom_vline(aes(xintercept = 3), color = \"#0070C0\", lty = 2, linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.85)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nsmall / big / diff\n```\n\n::: {.cell-output-display}\n![](lecture_week-02_files/figure-html/two-sample-means-different-variances-1.png){width=768}\n:::\n:::\n\n\n\ntesting test statistic formula to compare against t-test from above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxa <- mean(x)\nxb <- mean(y)\n\nvara <- var(x)\nvarb <- var(y)\n\nnA <- length(x)\nnB <- length(y)\n\n(xa - xb)/sqrt((vara/nA)+(varb/nB))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -21.68982\n```\n:::\n\n```{.r .cell-code}\n(nA - 1) + (nB - 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 78\n```\n:::\n\n```{.r .cell-code}\n(((vara/nA)+(varb/nB))^2)/((vara/nA)^2/(nA-1)+(varb/nB)^2/(nB-1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 62.96963\n```\n:::\n:::\n\n\n\n\n## 9. Cohen's D\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncohen.d(leaves ~ ., mu = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCohen's d (single sample)\n\nd estimate: 5.017588 (large)\nReference mu: 2\n95 percent confidence interval:\n   lower    upper \n3.111437 6.923740 \n```\n:::\n:::\n",
    "supporting": [
      "lecture_week-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}