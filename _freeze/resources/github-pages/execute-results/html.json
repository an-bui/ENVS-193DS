{
  "hash": "c7a0fa62de0a3e41482c3b33c3ce3745",
  "result": {
    "markdown": "---\ntitle: \"Setting up GitHub pages\"\ndescription: \"simple options to turn your repository into a website\"\nfreeze: auto\nexecute: \n  warning: false\n  message: false\nauthor:\n  - name: An Bui\n    url: https://an-bui.com/\n    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology\n    affiliation-url: https://www.eemb.ucsb.edu/\ndate: 2023-05-17\ncategories: [GitHub pages]\ncitation:\n  url: https://an-bui.github.io/ES-193DS-W23/resources/github-pages.html\n---\n\n\n# Why set up GitHub pages?\n\nIf you render/knit your documents to html, someone else who wants to see your document will have to fork/clone your repo into their computer, and open up your html document. By setting up GitHub pages, you can essentially make your repository into a website and create a URL to your rendered html document. Then, if you want to share your code, someone can just look at the page on that URL and not have to deal with your whole repository.  \n\nIn class, we walked through the simplest way to set up GitHub pages. However, there are lots of advanced options to make your repository into a website. For example, in CHOYOA 2, you'll set some different options when you set up GitHub pages.\n\n# 1. Create a new repository on GitHub\n\nMake sure you have the repository set to be **public** and that you are adding a README.\n\n<img src = \"/resources/images/01_create-repo.png\" width = \"90%\">\n\n# 2. Set up GitHub pages\n\nNavigate to the main page of your repository. Click on Settings > Pages. Select your `main` branch as the deployed branch. Click save.\n\n<img src = \"/resources/images/02_github-pages.png\" width = \"90%\">\n\nYou know that this worked if you get a message at the top of the window saying \"GitHub Pages source saved.\"\n\n# 3. Clone your repo to your computer and create some code.\n\nIn the demo, we put all our code into a new folder in the repo called `code`. Then, create a new Quarto/RMarkdown document and make sure it is saved as _either_ an HTML (ideal) or a PDF (also works but not as aesthetically pleasing). Save that document in the `code` folder.\n\n<img src = \"/resources/images/03_save-as-html.png\" width = \"90%\">\n\n# 4. Adjust the YAML options.\n\nThere are lots of document options you can adjust in the metadata. In class, we went through how to set _global options_ for code chunks using `execute:`. \n\n<img src = \"/resources/images/04_yaml-options.png\" width = \"90%\">\n\n**In RMarkdown:** this happens in the `knitr` set up chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\n```\n:::\n\n\n# 5. Render/knit your code.\n\nNote the file path for the `.qmd` document is: `code/newcode.qmd`. That means the file path for the `.html` document is: `code/newcode.html`.\n\n<img src = \"/resources/images/05_file-paths.png\" width = \"90%\">\n\n# 6. Stage/commit/push those changes\n\nIf you are using Quarto, you'll see a lot of files for the rendered plots, formatting options, etc. If you are using RMarkdown, you won't. This is just a little difference between Quarto and RMarkdown.\n\n<img src = \"/resources/images/06_commit-push.png\" width = \"90%\">\n\n# 7. Return to GitHub and look at the environment\n\nGo back to your repository on GitHub. You should see two visual cues that this has worked:  \n1. You have a brown circle by your most recent commit. This corresponds to what's happening in...  \n2. The \"Environments\". You will see **github-pages** marked as \"active\".\n\n<img src = \"/resources/images/07_new-environment.png\" width = \"90%\">\n\n# 8. Check the deployment\n\nClick on **github-pages** under Environments. You should see that the deployment (your commit/push) shows up as \"Queued\". This will eventually turn into \"In Progress\", then \"Active\".  \n\n<img src = \"/resources/images/08_deployments.png\" width = \"90%\">\n\n**Note:** depending how how many other actions are happening on GitHub at any given time, this may take a couple minutes. Be patient! Eventually it will be active.\n\n# 9. Look at the your rendered document!\n\nYour deployed repository will have the URL your-github-username.github.io/repository-name. In this example, the URL is `an-bui.github.io/my-repository`.  \n\nTo find your rendered html document, use the file path as your URL. In this example, the file path to the rendered document is `code/newcode.html`. This means the URL for the .html on my deployed repository is `an-bui.github.io/my-repository/code/newcode.html`.\n\n<img src = \"/resources/images/09_page-and-URL.png\" width = \"90%\">\n\n**Note:** sometimes it's useful to link this URL in the README!  \n\n# example repo\n\nThe repo for this example is [here](https://github.com/an-bui/my-repository).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}