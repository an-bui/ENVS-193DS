{
  "hash": "aa670463c8afa6eb02b55c41b7c7006f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Coding workshop: Week 1\"\nsubtitle: \"basics of using RStudio, intro to `tidyverse`\"\ncategories: [tidyverse, mean, max, read_csv, filter, arrange, mutate, group_by, pipe (%>%) operator, ggplot, geom_point, geom_line, ufos]\n---\n\n\n**Workshop dates: April 3 (Thursday), April 4 (Friday)**\n\n:::{.callout-warning title=\"WORK IN PROGRESS\"}\nStill working on this - subject to change before Thursday/Friday!\n:::\n\n## 1. Summary\n\n### Packages\n- `tidyverse`\n\n### Operations\n- calculations using `mean()` and `max()`  \n- read in data using `read_csv()`  \n- filter data using `filter()`  \n- arrange data using `arrange()`  \n- create new column using `mutate()`  \n- group data using `group_by()`  \n- count observations using `count()`  \n- chain functions together using ` %>% `  \n- visualize data using `ggplot()`  \n- creating points and lines using `geom_point()` and `geom_line()`  \n\n### Data source\n\nThis workshop's data comes from [Tidy Tuesday 2023-06-20](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-06-20/readme.md), which was from the [National UFO Reporting Center](https://nuforc.org/ndx/?id=shape) and  [sunrise-sunset.org](https://sunrise-sunset.org/) by [Jon Harmon](https://github.com/jonthegeek/apis/).\n\n## 2. Code\n\n### 1. Intro to scripts\n\nIn class, we use an R Script. It allows you to write your code (recipe) and run the code in the console (kitchen).\n\nR considers everything in the script as code to run, so you can write comments in the R Script by putting a pound sign at the beginning of the line. This is especially useful when you want to explain what your code is doing at each line in plain language.\n\nTry writing a comment of your own in the line below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is a comment!\n```\n:::\n\n\n### 2. Intro to functions\n\nR allows you to apply functions to do calculations, from simple to complex structures.\nRun code by putting your cursor on the line and hitting `Ctrl + Enter` or `Cmd + Enter`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(c(4, 5, 1, 2, 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.6\n```\n\n\n:::\n:::\n\n\nYou can store things you want to use over and over again as objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- c(4, 6, 2, 5, 3, 10)\n```\n:::\n\n\nand then you can use those objects in functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n### 3. loading in packages and data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nufo_sightings <- read_csv(\"ufo_sightings.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(ufo_sightings)\n```\n:::\n\n\n### 4. cleaning and wranging\n\nThese are all functions in the `tidyverse` that allow you to work with your data in R. \n\nFirst, you can filter by state to only include California.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- filter(ufo_sightings, \n              state == \"CA\") \n```\n:::\n\n\nThen, you can arrange the data frame by date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- arrange(df1,\n               reported_date_time)\n```\n:::\n\n\nThen, you can make a new column just with the year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 <- mutate(df2,\n              extracted_year = year(reported_date_time)) \n```\n:::\n\n\nThen, you can group the data frame by year and shape.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf4 <- group_by(df3, \n                extracted_year, shape)\n```\n:::\n\n\nThen, you can count the number of occurrences by year and shape.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf5 <- count(df4) \n```\n:::\n\n\nThen, you can filter the data frame by the shapes you're interested in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf6 <- filter(df5, \n              shape %in% c(\"formation\", \"circle\", \"orb\", \"changing\", \"light\"))\n```\n:::\n\n\n\n### 5. an easier way to clean and wrangle \n\nYou can use what's called a pipe operator to chain functions together. The keyboard shortcut for a pipe is `Ctrl + Shift + M` or `Cmd + Shift + M`.  \n\nWhen reading your code aloud, you can read the pipe as \"and then\"  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_mexico <- ufo_sightings %>% # use the ufo_sightings data frame\n  filter(state == \"NM\") %>% # and then, filter by state to only include New Mexico\n  arrange(reported_date_time) %>% # and then, arrange by date\n  mutate(extracted_year = year(reported_date_time)) %>% # and then, create a new column for the year\n  group_by(extracted_year, shape) %>% # and then, group by extracted_year and shape\n  count() # and then, count occurrences\n```\n:::\n\n \n### 6. data visualization \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df6, \n       aes(x = extracted_year, \n           y = n,\n           color = shape)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Number of sightings\",\n       title = \"UFOs in California are mostly light\")\n```\n\n::: {.cell-output-display}\n![](workshop-01_2025_files/figure-html/data-visualization-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "workshop-01_2025_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}