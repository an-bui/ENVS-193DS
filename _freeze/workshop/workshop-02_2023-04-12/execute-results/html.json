{
  "hash": "fc10c7ce55e3eda4e9be3f99982c80db",
  "result": {
    "markdown": "---\ntitle: \"Coding workshop: Week 2\"\ndescription: \"basics of using Quarto documents, summarizing, and exploratory data visualization\"\nfreeze: auto\nauthor:\n  - name: An Bui\n    url: https://an-bui.com/\n    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology\n    affiliation-url: https://www.eemb.ucsb.edu/\ndate: 2023-04-12\ncategories: [tidyverse, palmerpenguins, ggplot, quarto]\ncitation:\n  url: https://an-bui.github.io/ES-193DS-W23/workshop/workshop-02_2023-04-12.html\n---\n\n\n# 0. Getting oriented\n\nThis is a Quarto document. It allows you to write in plain text and code at the same time. If you have used RMarkdown before, this is a similar concept.\n\n## a. Formatting\n\nYou can format your document with headers, *italics* and **bold** text, and [color]{style=\"color:blue;\"}.  \n\nYou can insert code chunks using `Command` (or `Control`) + `Shift` + `I`.\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is a code chunk!\n```\n:::\n\n\nYou can also adjust code chunk options using the options [listed here](https://yihui.org/knitr/options/) inside of the `{r}` curly brackets. For example, if I want to run code but not display it, the option is `echo = FALSE`. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n:::\n\n\nIn contrast, if I want to display code but not run it, the option is `eval = FALSE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 5\n```\n:::\n\n\nPutting text and code together makes writing documents very streamlined. You can do all your analysis _and_ write about it in the same document.  \n\n## b. Rendering\n\nThe right-pointing arrow at the top of the document labelled \"Render\" allows you to put all the text and code together into one clean document.\n\nFor this class, homework assignments will be expected in Quarto Markdown or RMarkdown format _submitted in PDF form_. This means that you can either 1) render to PDF or 2) render to one of the other formats (e.g. docx or html) and convert it to PDF.  \n\n**Note about rendering:** if you're having trouble rendering your document, the error will pop up in the \"Background Jobs\" tab down below. Similarly to troubleshooting your code when you get error messages while you're writing, you can be a detective and figure out which line caused the error. Rendering will work best if you make sure your code runs from top to bottom. A good way to check this is to restart your R session, then run each code chunk sequentially.\n\n# 1. Review from last Wednesday\n\nWe're going to keep exploring this using the `{palmerpenguins}` data set using functions from the `{tidyverse}`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load in libraries\nlibrary(tidyverse) # wrangling tools\nlibrary(palmerpenguins) # penguin data frame\n```\n:::\n\n\nRemember that the first step to working with data is to look at your data set. You can use `View()`, or if you want a little snippet of your data you can use `head()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g\n```\n:::\n:::\n\n\nYou can also see the structure of a data frame using `str()` (a **very handy** function!).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n```\n:::\n:::\n\n\n\n\nLet's say you want to calculate the mean flipper length. You could use the function `mean()` on the `flipper_length_mm` column in the `penguins` data frame. To denote that, you write the name of the data frame with a dollar sign, then the column name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(penguins$flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nThis output is NA. Why is that, and how can we change it? \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(penguins$flipper_length_mm, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 200.9152\n```\n:::\n:::\n\n\n**NOTE:** putting `na.rm = TRUE` into these functions _does not_ mean that you can go about your data analysis without dealing with missing values. We'll talk about these later, but broadly: missing values aren't always meaningless! In this case, it's ok that we don't have a couple missing values.  \n\n# 2. Central tendency and data spread\n\nOn Monday, we talked about ways to represent centrality and spread in a sample. List the common ways of representing central tendency and data spread below:  \n\nCentral tendency:  \n- mean  \n- median  \n- mode  \n\nData spread:  \n- standard deviation  \n- range  \n- variance  \n- coefficient of variation\n\nLet's say we want to calculate some summary statistics for mean body mass for the three penguin species. You can do this the somewhat difficult way, using functions in `{base}` R. We're not going to do that because, as we talked about last week, it's a lot easier to do this using `{tidyverse}` functions because they operate more similarly to how we think and speak as humans.  \n\nSummarizing data using `{tidyverse}` functions usually uses one if not all of the following functions/operators:  \n- `group_by()`: identifying natural groups in the data frame (categorical variables)  \n- `summarize()`: summarizes the data based on what you want  \n- `%>%` : a very!!! useful operator (not a function). This is called a \"pipe\" and it allows you to string functions together. You're basically telling R, \"... and then\". The keyboard shortcut for this is `Command`/`Control` + `Shift` + `M`.    \n\nSo, if you wanted to figure out the mean body mass for each penguin species, you could write something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify the data frame\npenguins %>% \n  # group the data frame by species (a column in the data frame)\n  group_by(species) %>% \n  # summarize by creating a new column called mean_body_mass\n  # calculate the mean of body_mass_g\n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species   mean_body_mass\n  <fct>              <dbl>\n1 Adelie             3701.\n2 Chinstrap          3733.\n3 Gentoo             5076.\n```\n:::\n:::\n\n\nWhat if we also wanted to calculate the standard deviation for each species? You can add in another argument in the `summarize()` call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify the data frame\npenguin_summary <- penguins %>% \n  # group the data frame by species (a column in the data frame)\n  group_by(species) %>% \n  # summarize the data frame\n  # calculate mean and standard deviation of body mass\n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE),\n            sd_body_mass = sd(body_mass_g, na.rm = TRUE))\n```\n:::\n\n\nWe can also do this for a single island. For example, if we wanted to calculate the mean and standard deviation of flipper lengths on Dream Island, we could use the `filter()` function to _filter_ the data frame to only include observations from Dream.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify the data frame\npenguins %>% \n  # filter data frame to only include observations from Dream\n  filter(island == \"Dream\") %>% \n  # group the data frame by species (a column in the data frame)\n  group_by(species) %>% \n  # summarize the data frame\n  # calculate mean and standard deviation of body mass\n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE),\n            sd_body_mass = sd(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  species   mean_body_mass sd_body_mass\n  <fct>              <dbl>        <dbl>\n1 Adelie             3688.         455.\n2 Chinstrap          3733.         384.\n```\n:::\n:::\n\n\n# 3. Exploratory data analysis and/or visualization\n\n## a. Using `ggplot`\n\nWe'll do most of our data visualization using `{ggplot2}` (also commonly referred to as `{ggplot}`), which is a `{tidyverse}` package. Making a plot using `{ggplot}` takes 3 important parts:  \n1. the `ggplot()` call: you're telling R that you want to use ggplot on a specific data frame  \n2. the `aes()` call: within the `ggplot()` call, you're telling R which columns contain the x- and y- axes  \n3. the `geom_()` call: you're telling R what kind of plot you want to make.\n\n## b. histograms\n\nOne of the first plots you should make when working with a new data set is a **histogram.** You've seen these plots in lecture, so now let's make them with code.  \n\nThe **Rice Rule** is one of many rules to figure out how many bins should be in your histogram: \n\n$$\nbins = 2n^{1/3}\n$$\n\nSo, for example, the penguin data set has 344 observations. Therefore, according to the Rice Rule, you could use around 14 bins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = body_mass_g)) +\n  geom_histogram(bins = 14) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## c. central tendency and data spread\n\nUsually, calculating the central tendency or data spread can only go so far. To communicate effectively, we can represent these two characteristics of our data set visually. There are a few ways to do this:  \n- box plot (aka box and whisker plot)  \n- violin plot  \n- jitter plot  \n- points with bars  \n- some combination of the above  \n- some other form (e.g. beeswarm) \n\n### i. box plots\n\nFor example, let's make a box plot of body masses for the different penguin species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nBox plots are the most common way of representing central tendency and spread, but they're not easy to parse. They usually include 1) the median, 2) the 25th quartile (median of bottom half of dataset), 3) the 75th quartile (median of top half of data set), and 4) the 1.5*inter-quartile range (distance between lower and upper quartiles). If there are any outliers, they'll be represented as dots.  \n\n### ii. violin plots\n\nViolin plots show a symmetrical shape, and the width is based on the number of points at that particular value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_violin()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### iii. jitter plot\n\nJitter plots are a random smattering of points in a cloud, but the y-axis position corresponds to the real value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### iv. points with bars \n\nYou can also represent central tendency and spread using a single point to represent the mean and bars to represent standard deviation. We can use the data frame we created above: `penguin_summary`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguin_summary, aes(x = species, y = mean_body_mass)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = mean_body_mass - sd_body_mass, \n                    ymax = mean_body_mass + sd_body_mass))\n```\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### v. some combination of the above\n\nThere are some common combinations of the above plots, for example:\n\n#### violin plot with boxplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_violin() +\n  geom_boxplot(width = 0.2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n#### boxplot with jittered points\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n# 4. Adjusting `ggplot` defaults\n\nThe plots above use the regular settings in `ggplot`, which is fine, but not exactly aesthetically pleasing. Remember that a big part of data science is _data storytelling_ using visuals, and making those visuals clear and compelling to anyone who looks at them.  \n\nIn this class, you'll be expected to turn in \"finalized\" figures. This means that, at the very least, your axes are labelled something meaningful (for example, \"Body mass (g)\" instead of `body_mass_g`). However, there is a lot more to \"finalizing\" a plot than the bare minimum. Check out the resource posted on Canvas for more.  \n\nWe'll use the violin + boxplot example to make into a finalized version.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_violin(aes(fill = species), alpha = 0.5) +\n  geom_boxplot(aes(fill = species), width = 0.2) +\n  scale_fill_manual(values = c(\"#F56A56\", \"#3D83F5\", \"#A9A20B\")) +\n  labs(x = \"Penguin species\", y = \"Body mass (g)\",\n       title = \"Gentoo penguins tend to be heavier than Adelie or Chinstrap\",\n       caption = \"Data source: {palmerpenguins}, \\n Horst AM, Hill AP, Gorman KB.\") +\n  theme_bw() +\n  theme(legend.position = \"none\", \n        axis.title = element_text(size = 13),\n        axis.text = element_text(size = 12),\n        plot.title = element_text(size = 14),\n        plot.caption = element_text(face = \"italic\"),\n        text = element_text(family = \"Times New Roman\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nAnother one as an example is a plot with the mean point and standard deviation bars and jittered points:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_jitter(data = penguins, aes(x = species, y = body_mass_g, color = species), alpha = 0.4) +\n  geom_point(data = penguin_summary, aes(x = species, y = mean_body_mass, color = species), size = 5) +\n  geom_errorbar(data = penguin_summary, aes(x = species, ymin = mean_body_mass - sd_body_mass, ymax = mean_body_mass + sd_body_mass, color = species), width = 0.2) +\n  scale_color_manual(values = c(\"#F56A56\", \"#3D83F5\", \"#A9A20B\")) +\n  labs(x = \"Penguin species\", y = \"Body mass (g)\",\n       title = \"Gentoo penguins tend to be heavier than Adelie or Chinstrap\",\n       caption = \"Data source: {palmerpenguins}, \\n Horst AM, Hill AP, Gorman KB.\") +\n  theme_bw() +\n  theme(legend.position = \"none\", \n        axis.title = element_text(size = 13),\n        axis.text = element_text(size = 12),\n        plot.title = element_text(size = 14),\n        plot.caption = element_text(face = \"italic\"),\n        text = element_text(family = \"Times New Roman\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n**Note:** there is _always_ more tinkering you can do with a figure. The best way to figure out if you're actually communicating any kind of point or summarizing the data in a succinct way is to _show your figure to someone else_. You are not the best judge of how well you're communicating - other people are! In this class, I encourage you to share your figures with classmates, friends, anyone who you can trust to give you good feedback about 1) whether you've communicated your message and 2) whether your figure actually looks good.\n\n# 5. Bonus: adjusting breaks on a histogram\n\nThe default `geom_histogram()` bins sometimes don't reflect the actual values in your data set. For example, we know that the smallest mass in the data set is 2700 g, but the histogram from part 3b starts around 2625. I like to manually put in the breaks in a histogram so that I know exactly how they're being broken up, all while more or less following the Rice Rule for number of bins to display.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbreaks <- ggplot(data = penguins, aes(x = body_mass_g)) +\n  geom_histogram(fill = \"#FFFFFF\", color = \"#000000\", breaks = seq(from = 2700, to = 6500, by = 250)) +\n  scale_x_continuous(breaks = round(seq(from = 2700, to = 6500, by = 250)), limits = c(2700, 6450), expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 50), breaks = seq(from = 10, to = 50, by = 10)) +\n  labs(x = \"Body mass (g)\", y = \"Count\",\n       title = \"Histogram of penguin body masses from Palmer Station LTER\",\n       caption = \"Data source: {palmerpenguins}, \\n Horst AM, Hill AP, Gorman KB.\") +\n  theme_classic() +\n  theme(plot.margin = margin(1, 1, 1, 1, \"cm\"),\n        plot.caption = element_text(face = \"italic\", size = 10),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 11)) \n\nbreaks\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-02_2023-04-12_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "workshop-02_2023-04-12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}