{
  "hash": "93e52a57f038fa595e52bf9ded92d8a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Coding workshop: Week 2\"\ndescription: \"using Quarto, data wrangling, visualizing uncertainty\"\nfreeze: auto\nauthor:\n  - name: An Bui\n    url: https://an-bui.com/\n    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology\n    affiliation-url: https://www.eemb.ucsb.edu/\npublished-title: \"Workshop date\"\ndate: 2024-04-11\ndate-modified: last-modified\ncategories: [tidyverse, janitor, read_csv, pipe (%>%) operator, clean_names, mutate, select, pivot_longer, rename, group_by, reframe, sd, qt, deframe, ggplot, geom_histogram, geom_point, geom_errorbar, geom_pointrange, extra stuff, fisheries]\n---\n\n\n## 1. Summary\n\n### Packages\n- `tidyverse`  \n- `janitor`  \n\n### Operations\n- read in data using `read_csv()`  \n- chain functions together using ` %>% `  \n- clean column names using `clean_names()`  \n- create new columns using `mutate()`  \n- select columns using `select()`  \n- make data frame longer using `pivot_longer()`  \n- rename columns using `rename()`  \n- group data using `group_by()`  \n- summarize data using `reframe()`  \n- calculate standard deviation using `sd()`  \n- calculate t-values using `qt()`  \n- expand data frames using `deframe()`    \n- visualize data using `ggplot()`  \n- create histograms using `geom_histogram()`  \n- visualize means and raw data using `geom_point()`  \n- visualize standard deviation, standard error, and confidence intervals using `geom_errorbar()` and `geom_pointrange()`    \n\n### Data source\n\nThis workshop's data comes from [Tidy Tuesday 2021-10-12](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-10-12/readme.md), which was from [OurWorldinData.org](https://ourworldindata.org/fish-and-overfishing).\n\n## 2. Code\n\n### 1. Set up\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load in packages\nlibrary(tidyverse)\nlibrary(janitor)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in data\nglobal_catch <- read_csv(\"global-fishery-catch-by-sector.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### 2. Cleaning up\n\nThis chunk of code cleans the column names, converts catch to catch per million tons, selects columns, makes the data frame longer, and renames the columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch_clean <- global_catch %>% # use the global_catch data frame\n  clean_names() %>% # clean up column names\n  mutate(artisanal = artisanal_small_scale_commercial/1000000,\n         industrial = industrial_large_scale_commercial/1000000) %>% # convert catch/1000000\n  select(year, artisanal, industrial) %>% # select columns \n  pivot_longer(cols = artisanal:industrial) %>% # make the data frame longer\n  rename(catch_mil = value,\n         fishery_type = name) # rename columns\n```\n:::\n\n\n### 3. Making a histogram\n\nThis chunk of code creates a histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_clean,\n       aes(x = catch_mil,\n           fill = fishery_type)) + # fill the histogram based on the fishery type\n  geom_histogram(bins = 9, # set the number of bins\n                 alpha = 0.6, # make the columns transparent\n                 color = \"black\", # make the border of the columns black\n                 position = \"identity\") + # make the columns sit on top of each other\n  scale_y_continuous(expand = c(0, 0), # get rid of the space between the x-axis and the columns\n                     limits = c(0, 35)) # define the y-axis limits\n```\n\n::: {.cell-output-display}\n![](workshop-02_2024-04-11_files/figure-html/creating-histogram-1.png){width=672}\n:::\n:::\n\n\n### 4. Visualizing standard error and confidence intervals\n\n#### a. Calculations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate the confidence interval \"by hand\"\nglobal_catch_summary <- global_catch_clean %>% \n  group_by(fishery_type) %>% \n  reframe(mean = mean(catch_mil), # calculate the mean\n            n = length(catch_mil), # count the number of observations\n            df = n - 1, # calculate the degrees of freedom\n            sd = sd(catch_mil), # calculate the standard deviation\n            se = sd/sqrt(n), # calculate the standard error\n            tval = qt(p = 0.05/2, df = df, lower.tail = FALSE), # find the t value\n            margin = tval*se, # calculate the margin of error\n            ci_lower = mean - tval*se, # calculate the lower bound of the confidence interval\n            ci_higher = mean + tval*se # calculate the upper bound of the confidence interval\n          ) \n\n# use a function to calculate the confidence interval\nglobal_catch_ci <- global_catch_clean %>% \n  group_by(fishery_type) %>% \n  summarize(ci = mean_cl_normal(catch_mil)) %>% # calculate the CI using a function\n  deframe() # expand the data frame\n```\n:::\n\n\nThis is what your data frames should look like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 10\n  fishery_type  mean     n    df    sd    se  tval margin ci_lower ci_higher\n  <chr>        <dbl> <int> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>\n1 artisanal     15.2    61    60  4.26 0.545  2.00   1.09     14.1      16.3\n2 industrial    59.5    61    60 24.2  3.10   2.00   6.21     53.3      65.7\n```\n\n\n:::\n\n```{.r .cell-code}\nglobal_catch_ci\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  y     ymin     ymax\nartisanal  15.18018 14.09019 16.27017\nindustrial 59.49119 53.28264 65.69974\n```\n\n\n:::\n:::\n\n\n\n#### b. Visualizations\n\nFirst we want to visualize standard deviation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_summary, # use the summary data frame\n       aes(x = fishery_type, \n           y = mean, \n           color = fishery_type)) + # color the points by fishery type\n  geom_point(size = 2) + # plot the mean\n  geom_errorbar(aes(ymin = mean - sd, # plot the standard deviation\n                    ymax = mean + sd),\n                width = 0.1) +\n  labs(title = \"Standard deviation\")\n```\n\n::: {.cell-output-display}\n![](workshop-02_2024-04-11_files/figure-html/sd-plot-1.png){width=672}\n:::\n:::\n\n\nThen, we want to visualize standard error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_summary,\n       aes(x = fishery_type, \n           y = mean, \n           color = fishery_type)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = mean - se, # plot the standard error\n                    ymax = mean + se),\n                width = 0.1) +\n  labs(title = \"Standard error\")\n```\n\n::: {.cell-output-display}\n![](workshop-02_2024-04-11_files/figure-html/se-plot-1.png){width=672}\n:::\n:::\n\n\nThen, we want to visualize the 95% confidence interval.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_summary,\n       aes(x = fishery_type, \n           y = mean, \n           color = fishery_type)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = mean - margin, # plot the 95% confidence interval\n                    ymax = mean + margin),\n                width = 0) +\n  labs(title = \"95% confidence interval\")\n```\n\n::: {.cell-output-display}\n![](workshop-02_2024-04-11_files/figure-html/ci-95-plot-1.png){width=672}\n:::\n:::\n\n\nLastly, we want to visualize the 95% confidence interval with the underlying data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_clean,\n       aes(x = fishery_type, \n           y = catch_mil, \n           color = fishery_type)) +\n  geom_point(position = position_jitter(width = 0.05, \n                                        seed = 1),\n             alpha = 0.2) +\n  geom_pointrange(data = global_catch_summary,\n                  aes(x = fishery_type, \n                      y = mean, \n                      ymin = mean - margin, \n                      ymax = mean + margin)) +\n  scale_color_manual(values = c(\"artisanal\" = \"cornflowerblue\",\n                                \"industrial\" = \"orange\")) +\n  labs(x = \"Fishery type\",\n       y = \"Catch per million tonnes\",\n       title = \"Industrial fisheries catch more than artisanal fisheries\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](workshop-02_2024-04-11_files/figure-html/final-plot-1.png){width=672}\n:::\n:::\n\n\n### 5. Extra stuff\n\n#### a. Controlling boundaries in a histogram\n\nThe general steps to do this are:  \n\n1. calculate the range  \n2. determine the number of observations  \n3. calculate the number of bins you want (then round to the nearest whole number)  \n3. calculate the width of each bin by taking the range and dividing it by the number of bins - 2  \n4. define the line breaks by creating a sequence of numbers, calculating the boundaries for each bin (and if necessary, rounding the boundaries)    \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate the range\nrange <- max(global_catch_clean$catch_mil) - min(global_catch_clean$catch_mil)\n\n# determine the number of observations\nobs <- nrow(global_catch_clean)\n\n# calculate the number of bins using the Rice Rule\n# note that this doesn't come out to a whole number, so it's rounded\nbins <- 2*(obs^(1/3)) %>% \n  round(digits = 0)\n\n# calculate the width of the bin\nbinwidth <- range/(bins - 2)\n\n# set up a sequence of numbers from 0 to 100\nseq <- seq(from = 0, to = 100, by = 1)\n\n# calculate the axis breaks  \naxis_breaks <- seq*binwidth + (binwidth/2)\n\n# round the axis breaks\naxis_breaks_rounded <- round(axis_breaks, \n                             digits = 1)\n```\n:::\n\n\nThen you can make your histogram with the right line breaks:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_clean,\n       aes(x = catch_mil,\n           fill = fishery_type)) +\n  geom_histogram(binwidth = binwidth, \n                 alpha = 0.6, \n                 color = \"black\", \n                 position = \"identity\") +\n  scale_x_continuous(breaks = axis_breaks_rounded) +\n  scale_y_continuous(expand = c(0, 0), \n                     limits = c(0, 35))\n```\n\n::: {.cell-output-display}\n![](workshop-02_2024-04-11_files/figure-html/new-histogram-1.png){width=672}\n:::\n:::\n\n\n#### b. plotting the confidence interval using stat_summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_clean,\n       aes(x = fishery_type, \n           y = catch_mil, \n           color = fishery_type)) +\n  stat_summary(fun.data = mean_cl_normal, \n               geom = \"pointrange\") +\n  labs(title = \"95% confidence interval using stat_summary\")\n```\n\n::: {.cell-output-display}\n![](workshop-02_2024-04-11_files/figure-html/stat-summary-ci-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "workshop-02_2024-04-11_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}