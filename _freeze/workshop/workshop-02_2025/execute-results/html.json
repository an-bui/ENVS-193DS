{
  "hash": "7de7b55db784c17ba85c53f2e1d28f77",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Coding workshop: Week 2\"\nsubtitle: \"using Quarto, data wrangling, visualizing uncertainty\"\ncategories: [tidyverse, janitor, read_csv, pipe operators, '|>', clean_names, mutate, select, pivot_longer, group_by, summarize, sd, qt, deframe, ggplot, geom_histogram, geom_point, geom_errorbar, geom_pointrange, geom_line]\n---\n\n\n[Workshop dates: April 10 (Thursday), April 11 (Friday)]{style=\"color: #79ACBD; font-size: 24px;\"}\n\n## 1. Summary\n\n### Packages\n- `tidyverse`  \n- `janitor`  \n\n### Operations\n- read in data using `read_csv()`  \n- chain functions together using ` |> `  \n- clean column names using `clean_names()`  \n- create new columns using `mutate()`  \n- select columns using `select()`  \n- make data frame longer using `pivot_longer()`  \n- group data using `group_by()`  \n- summarize data using `summarize()`  \n- calculate standard deviation using `sd()`  \n- calculate t-values using `qt()`  \n- expand data frames using `deframe()`    \n- visualize data using `ggplot()`  \n- create histograms using `geom_histogram()`  \n- visualize means and raw data using `geom_point()`  \n- visualize standard deviation, standard error, and confidence intervals using `geom_errorbar()` and `geom_pointrange()`  \n- visualize trends through time using `geom_point()` and `geom_line()`\n\n### Data source\n\nThis week, we'll work with data on seafood production types (aquaculture or capture). This workshop's data comes from [Tidy Tuesday 2021-10-12](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-10-12/readme.md), which was from [OurWorldinData.org](https://ourworldindata.org/fish-and-overfishing).\n\n## 2. Code\n\n### 1. Set up\n\nThis section of code includes reading in the packages you'll need: `tidyverse` and `janitor`.  \n\nYou'll also read in the data using `read_csv()` and store the data in an object called `production`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load in packages\nlibrary(tidyverse)\nlibrary(janitor)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in data\nproduction <- read_csv(\"captured_vs_farmed.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n:::{.callout-note}\nRemember to _look_ at the data before working with it! You can use `View(production)` in the console, or click on the `production` object in the Environment tab in the top right.\n:::\n\n### 2. Cleaning up\n\nThe data comes in what's called \"wide format\", meaning that each row represents multiple observations. For example, the first row contains the production from Afghanistan (country code AFG) in 1969 for aquaculture and capture production.  \n\nWe want to convert the data into \"long format\" so that it's easier to work with. A dataset is in long format if each row represents an observation.  \n\nIn this chunk of code, we'll:  \n\n1. clean the column names using `clean_names()`  \n2. filter to only include the \"entity\" we want using `filter()`  \n3. select the columns of interest using `select()`  \n4. make the data frame longer using `pivot_longer()`  \n5. manipulate the `type` column to change the long names (e.g. `aquaculture_production_metric_tons`) to short names (e.g. `aquaculture`) using `mutate()` and `case_when()`  \n6. use `mutate()` to create a new column called `metric_tons_mil`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduction_clean <- production |> # use the production data frame\n  clean_names() |> # clean up column names\n  filter(entity == \"United States\") |> # filter to only include observations from the US\n  select(year, aquaculture_production_metric_tons, capture_fisheries_production_metric_tons) |> # select columns of interest \n  pivot_longer(cols = aquaculture_production_metric_tons:capture_fisheries_production_metric_tons, # choose columns to pivot\n               names_to = \"type\", # name the column name with fishery type \"type\"\n               values_to = \"catch_metric_tons\") |> # name the column name with the catch amount \"catch_metric_tons\"\n  mutate(type = case_when( # mutate the existing type column\n    type == \"aquaculture_production_metric_tons\" ~ \"aquaculture\", # when \"aquaculture_production_metric_tons\" appears in the \"type\" column, fill in \"aquaculture\"\n    type == \"capture_fisheries_production_metric_tons\" ~ \"capture\" # when \"capture_fisheries_production_metric_tons\" appears in the \"type\" column, fill in \"capture\"\n  )) |> \n  mutate(metric_tons_mil = catch_metric_tons/1000000) # convert catch in metric tons to millions\n```\n:::\n\n\n### 3. Making a boxplot/jitter plot\n\nLast week in workshop, we made a boxplot. The boxplot shows useful summary statistics (displays the central tendency and spread), while the jitter plot shows the actual observations (in this case, each point is the catch for a fishery in a given year). One way to display the underlying data is to combine a boxplot with a jitter plot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = production_clean, # start with the production_clean data frame\n       aes(x = type, # x-axis should be type of production\n           y = metric_tons_mil, # y-axis should be metric tons of production (in millions)\n           color = type)) + # coloring by production type\n  geom_boxplot() + # first layer should be a boxplot\n  geom_jitter(width = 0.2, # making the points jitter horizontally\n              height = 0) + # making sure points don't jitter vertically\n  labs(x = \"Type\", # labelling the x-axis\n       y = \"Metric tons of production (in millions)\") # labelling the y-axis\n```\n\n::: {.cell-output-display}\n![](workshop-02_2025_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nOn average, a) which type of production produces more fish, and b) what components of the plot are you using to come up with your answer?  \n\n**a) Capture production, because b) the median of the boxplot is way higher than the median for aquaculture**\n\n### 4. Making a histogram\n\nThis chunk of code creates a histogram. Note that for a histogram, you only need to fill in the `aes()` argument for the x-axis (`x`), not the y-axis. This is because `ggplot()` counts the number of observations in each bin for you.  \n\nWithin the `geom_histogram()` call, you'll need to tell R what number of bins you want using the `bins` argument. In this case (using the Rice Rule to determine the appropriate number of bins), we'll use 10 bins.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = production_clean,\n       aes(x = metric_tons_mil,\n           fill = type)) + # fill the histogram based on the fishery type\n  geom_histogram(bins = 10, # set the number of bins\n                 color = \"black\") # make the border of the columns black\n```\n\n::: {.cell-output-display}\n![](workshop-02_2025_files/figure-html/creating-histogram-1.png){width=672}\n:::\n:::\n\n\nCan you tell from looking at the histogram which production type tends to produce more fish? Why or why not?\n\n**Yes. There are no observations for aquaculture at high catch (in millions); most of the observations for aquaculture are lower than 1 million tons, while capture production ranges up to 6 million tons.**\n\n### 5. Visualizing spread, variance, and confidence\n\n#### a. Calculations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate the confidence interval \"by hand\"\nproduction_summary <- production_clean |> # start with the production_clean data frame\n  group_by(type) |> # group by production type\n  summarize(mean = mean(metric_tons_mil), # calculate the mean\n            n = length(metric_tons_mil), # count the number of observations\n            df = n - 1, # calculate the degrees of freedom\n            sd = sd(metric_tons_mil), # calculate the standard deviation\n            se = sd/sqrt(n), # calculate the standard error\n            tval = qt(p = 0.05/2, df = df, lower.tail = FALSE), # find the t value\n            margin = tval*se, # calculate the margin of error\n            ci_lower = mean - tval*se, # calculate the lower bound of the confidence interval\n            ci_higher = mean + tval*se # calculate the upper bound of the confidence interval\n          ) \n\nproduction_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 10\n  type         mean     n    df    sd     se  tval margin ci_lower ci_higher\n  <chr>       <dbl> <int> <dbl> <dbl>  <dbl> <dbl>  <dbl>    <dbl>     <dbl>\n1 aquaculture 0.324    59    58 0.149 0.0194  2.00 0.0389    0.285     0.363\n2 capture     4.38     59    58 1.20  0.156   2.00 0.313     4.07      4.69 \n```\n\n\n:::\n\n```{.r .cell-code}\n# use a function to calculate the confidence interval\nproduction_ci <- production_clean |>  \n  group_by(type) |>  \n  summarize(ci = mean_cl_normal(metric_tons_mil)) |>  # calculate the CI using a function\n  deframe() # expand the data frame\n\nproduction_ci\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   y     ymin     ymax\naquaculture 0.323932 0.285032 0.362832\ncapture     4.381083 4.068038 4.694128\n```\n\n\n:::\n:::\n\n\nWhen you compare the 95% CI from `production_summary` and `production_ci`, they should be about the same.\n\n#### b. Visualizations\n\nWhen visualizing the central tendency (in this case, mean) and spread (standard deviation) or variance (standard error) or confidence (confidence intervals), you can stack geoms on top of each other.  \n\nTo visualize the mean, we'll use `geom_point()`. Remember that `geom_point()` can be used for any plot you want to make that involves a point.    \n\nTo visualize the spread/variance/confidence, we'll use `geom_errorbar()`. This is the geom that creates two lines that can extend away from a point.  \n\n##### Standard deviation\n\nFirst, we'll visualize standard deviation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = production_summary, # use the summary data frame\n       aes(x = type, # x-axis should be production type\n           y = mean, # y-axis should show the mean production\n           color = type)) + # color the points by fishery type\n  geom_point(size = 2) + # plot the mean\n  geom_errorbar(aes(ymin = mean - sd, # plot the standard deviation\n                    ymax = mean + sd),\n                width = 0.1) + # make the bars narrower\n  labs(title = \"Standard deviation\",\n       x = \"Type\",\n       y = \"Mean and SD million metric tons production\")\n```\n\n::: {.cell-output-display}\n![](workshop-02_2025_files/figure-html/sd-plot-1.png){width=672}\n:::\n:::\n\n\n##### Standard error\n\nThen, we want to visualize standard error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = production_summary, # use the summary data frame\n       aes(x = type, \n           y = mean, \n           color = type)) + # color the points by fishery type\n  geom_point(size = 2) + # plot the mean\n  geom_errorbar(aes(ymin = mean - se, # plot the standard error\n                    ymax = mean + se),\n                width = 0.1) +\n  labs(title = \"Standard error\",\n       x = \"Type\",\n       y = \"Mean and SE million metric tons production\")\n```\n\n::: {.cell-output-display}\n![](workshop-02_2025_files/figure-html/se-plot-1.png){width=672}\n:::\n:::\n\n\n##### 95% confidence interval\n\nThen, we want to visualize the 95% confidence interval.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = production_summary, # use the summary data frame\n       aes(x = type, \n           y = mean, \n           color = type)) + # color the points by fishery type\n  geom_point(size = 2) + # plot the mean\n  geom_errorbar(aes(ymin = mean - margin, # plot the margin of error\n                    ymax = mean + margin),\n                width = 0.1) +\n  labs(title = \"Confidence interval\",\n       x = \"Type\",\n       y = \"Mean and 95% CI million metric tons production\")\n```\n\n::: {.cell-output-display}\n![](workshop-02_2025_files/figure-html/ci-95-plot-1.png){width=672}\n:::\n:::\n\n\n#### c. `geom_pointrange()`\n\nWe can also visualize means and spread/variance/confidence intervals using the `geom_pointrange()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = production_summary, # use the summary data frame\n       aes(x = type, \n           y = mean, \n           color = type)) + # color the points by fishery type\n  geom_pointrange(aes(ymin = mean - margin, \n                      ymax = mean + margin)) +\n  labs(title = \"Confidence interval (using geom_pointrange)\",\n       x = \"Type\",\n       y = \"Mean and 95% CI million metric tons production\")\n```\n\n::: {.cell-output-display}\n![](workshop-02_2025_files/figure-html/ci-95-plot-with-pointrange-1.png){width=672}\n:::\n:::\n\n\n#### d. Visualizing with the underlying data\n\nLastly, we want to visualize the 95% confidence interval with the underlying data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# base layer: ggplot\nggplot(data = production_clean,\n       aes(x = type, \n           y = metric_tons_mil, \n           color = type)) +\n  # first layer: adding data (each point shows an observation)\n  geom_jitter(width = 0.1,\n              height = 0,\n              alpha = 0.4,\n              shape = 21) +\n  # second layer: means and 95% CI\n  geom_pointrange(data = production_summary,\n                  aes(x = type, \n                      y = mean, \n                      ymin = mean - margin, \n                      ymax = mean + margin)) +\n  # changing appearance: colors, labels, and theme\n  scale_color_manual(values = c(\"aquaculture\" = \"deeppink3\",\n                                \"capture\" = \"slateblue4\")) +\n  labs(x = \"Production type\",\n       y = \"Million metric tons of production\",\n       color = \"Production type\",\n       title = \"Capture produces more than aquaculture\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](workshop-02_2025_files/figure-html/final-plot-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-note title=\"ggplot themes\" collapse=\"true\"}\nThere are lots of themes in ggplot to play around with. These are nice to use to get rid of the grey background that is the default, and generally make your plot look cleaner.  \n\nA list of built-in themes and their `theme_()` function calls is [here](https://ggplot2-book.org/themes#sec-themes).\n:::\n\n\n#### e. Visualizing through time\n\nThen, if we want to visualize production through time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = production_clean,\n       aes(x = year,\n           y = metric_tons_mil,\n           color = type,\n           shape = type)) +\n  geom_point() +\n  geom_line() +\n  scale_color_manual(values = c(\"aquaculture\" = \"deeppink3\",\n                                \"capture\" = \"slateblue4\")) +\n  labs(x = \"Year\",\n       y = \"Million metric tons of production\",\n       color = \"Production type\",\n       shape = \"Production type\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](workshop-02_2025_files/figure-html/time-plot-1.png){width=672}\n:::\n:::\n\n\n**END OF WORKSHOP 2**\n\n",
    "supporting": [
      "workshop-02_2025_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}