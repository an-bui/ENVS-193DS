{
  "hash": "af05c3a03258a829538dc14b122dcc7e",
  "result": {
    "markdown": "---\ntitle: \"Coding workshop: Week 3\"\ndescription: \"exploratory data visualization\"\nfreeze: auto\nauthor:\n  - name: An Bui\n    url: https://an-bui.com/\n    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology\n    affiliation-url: https://www.eemb.ucsb.edu/\ndate: 2023-04-19\ncategories: [tidyverse, palmerpenguins, ggplot, quarto, mutate, case_when, count]\ncitation:\n  url: https://an-bui.github.io/ES-193DS-W23/workshop/workshop-03_2023-04-19.html\n---\n\n\n# 0. set up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\n# 1. Basic data exploration and summarizing\n\n## a. Review\n\nFind the mean and standard deviation flipper length and bill length for each penguin species on Biscoe and Dream islands.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_subset <- penguins %>% \n  group_by(island, species) %>% \n  filter(island %in% c(\"Biscoe\", \"Dream\")) %>% \n  summarize(mean_flip = mean(flipper_length_mm, na.rm = TRUE),\n            sd_flip = sd(flipper_length_mm, na.rm = TRUE),\n            mean_bill = mean(bill_length_mm, na.rm = TRUE),\n            sd_bill = sd(bill_length_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'island'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\npenguin_subset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 6\n# Groups:   island [2]\n  island species   mean_flip sd_flip mean_bill sd_bill\n  <fct>  <fct>         <dbl>   <dbl>     <dbl>   <dbl>\n1 Biscoe Adelie         189.    6.73      39.0    2.48\n2 Biscoe Gentoo         217.    6.48      47.5    3.08\n3 Dream  Adelie         190.    6.59      38.5    2.47\n4 Dream  Chinstrap      196.    7.13      48.8    3.34\n```\n:::\n:::\n\n\n## b. New functions: `count()`, `mutate()`, `case_when()`\n\nMore functions to add to your `tidyverse` toolkit:  \n\n### `count()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# new object names penguin_count from penguins\npenguin_count <- penguins %>% \n  # group by island and species\n  group_by(island, species) %>% \n  # count function counts number of rows (i.e. observations)\n  count()\n\npenguin_count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n# Groups:   island, species [5]\n  island    species       n\n  <fct>     <fct>     <int>\n1 Biscoe    Adelie       44\n2 Biscoe    Gentoo      124\n3 Dream     Adelie       56\n4 Dream     Chinstrap    68\n5 Torgersen Adelie       52\n```\n:::\n:::\n\n\n### `mutate()` + `case_when()`\n\nFirst, remember how we calculated mean body mass across penguin species last week:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  group_by(species) %>% \n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species   mean_body_mass\n  <fct>              <dbl>\n1 Adelie             3701.\n2 Chinstrap          3733.\n3 Gentoo             5076.\n```\n:::\n:::\n\n\n`mutate()` creates a new column, while `case_when()` within `mutate()` allows you to tell R, \"in the _case when_...\". For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create new object called penguin_newcol from penguins\npenguin_newcol <- penguins %>% \n  # group by species\n  group_by(species) %>% \n  # make a new column called body_mass_cat\n  mutate(body_mass_cat = case_when(\n    # in the case when year matches 2007, put \"first\"\n    year == 2007 ~ \"first\", \n    # in the case when year matches 2008, put \"second\"\n    year == 2008 ~ \"second\",\n    # in the case when year matches 2009, put \"third\"\n    year == 2009 ~ \"third\"\n  ))\n\npenguin_newcol\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 9\n# Groups:   species [3]\n   species island    bill_length_mm bill_d…¹ flipp…² body_…³ sex    year body_…⁴\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int> <chr>  \n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007 first  \n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema…  2007 first  \n 3 Adelie  Torgersen           40.3     18       195    3250 fema…  2007 first  \n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 first  \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema…  2007 first  \n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007 first  \n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema…  2007 first  \n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007 first  \n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007 first  \n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007 first  \n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm, ³​body_mass_g, ⁴​body_mass_cat\n```\n:::\n:::\n\n\n# 2. Review: rendering (Quarto) and knitting (RMarkdown)\n\n# 3. Review: how to use `ggplot`\n\nRemember that making a plot using `{ggplot}` takes 3 important parts:  \n1. the `ggplot()` call: you're telling R that you want to use ggplot on a specific data frame  \n2. the `aes()` call: within the `ggplot()` call, you're telling R which columns contain the x- and y- axes  \n3. the `geom_()` call: you're telling R what kind of plot you want to make.  \n\n# 4. Exploratory data visualization\n\nUsually, calculating the central tendency or data spread can only go so far. To communicate effectively, we can represent these two characteristics of our data set visually. There are a few ways to do this:  \n- box plot (aka box and whisker plot)  \n- violin plot  \n- jitter plot  \n- points with bars  \n- some combination of the above  \n- some other form (e.g. beeswarm) \n\n### i. box plots\n\nFor example, let's make a box plot of body masses for the different penguin species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-03_2023-04-19_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nBox plots are the most common way of representing central tendency and spread, but they're not easy to parse. They usually include 1) the median, 2) the 25th quartile (median of bottom half of dataset), 3) the 75th quartile (median of top half of data set), and 4) the 1.5*inter-quartile range (distance between lower and upper quartiles). If there are any outliers, they'll be represented as dots.  \n\n### ii. violin plots\n\nViolin plots show a symmetrical shape, and the width is based on the number of points at that particular value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_violin()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-03_2023-04-19_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### iii. jitter plot\n\nJitter plots are a random smattering of points in a cloud, but the y-axis position corresponds to the real value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_jitter() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-03_2023-04-19_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### iv. points with bars \n\nYou can also represent central tendency and spread using a single point to represent the mean and bars to represent standard deviation. First, create a data frame called `penguin_summary` and calculate the mean and standard deviation mass for the three penguin species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_summary <- penguins %>% \n  group_by(species) %>% \n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE),\n            sd_body_mass = sd(body_mass_g), na.rm = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguin_summary, aes(x = species, y = mean_body_mass)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = mean_body_mass - sd_body_mass, \n                    ymax = mean_body_mass + sd_body_mass))\n```\n\n::: {.cell-output-display}\n![](workshop-03_2023-04-19_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### v. some combination of the above\n\nThere are some common combinations of the above plots, for example:\n\n#### violin plot with boxplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_violin() +\n  # width argument controls boxplot width\n  geom_boxplot(width = 0.2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-03_2023-04-19_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n#### boxplot with jittered points\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-03_2023-04-19_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n# 4. Adjusting `ggplot` defaults\n\nThe plots above use the regular settings in `ggplot`, which is fine, but not exactly aesthetically pleasing. Remember that a big part of data science is _data storytelling_ using visuals, and making those visuals clear and compelling to anyone who looks at them.  \n\nIn this class, you'll be expected to turn in \"finalized\" figures. This means that, at the very least, your axes are labelled something meaningful (for example, \"Body mass (g)\" instead of `body_mass_g`). However, there is a lot more to \"finalizing\" a plot than the bare minimum. Check out the resource posted on Canvas for more examples, and _minimum_ guidelines for plots you submit for assignments.  \n\nWe'll use the violin + boxplot example to make into a finalized version.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  # fill the violin shape using the species column: every species has a different color\n  # alpha argument: makes the violin shape more transparent (scale of 0 to 1)\n  geom_violin(aes(fill = species), alpha = 0.5) +\n  # fill the boxplot shape using the species column\n  # make the boxplots narrower\n  geom_boxplot(aes(fill = species), width = 0.2) +\n  # specify the colors you want to use for each species\n  scale_fill_manual(values = c(\"#F56A56\", \"#3D83F5\", \"#A9A20B\")) +\n  # relabel the axis titles, plot title, and caption\n  labs(x = \"Penguin species\", y = \"Body mass (g)\",\n       title = \"Gentoo penguins tend to be heavier than Adelie or Chinstrap\",\n       caption = \"Data source: {palmerpenguins}, \\n Horst AM, Hill AP, Gorman KB.\") +\n  # themes built in to ggplot\n  theme_bw() +\n  # other theme adjustments\n  theme(legend.position = \"none\", \n        axis.title = element_text(size = 13),\n        axis.text = element_text(size = 12),\n        plot.title = element_text(size = 14),\n        plot.caption = element_text(face = \"italic\"),\n        text = element_text(family = \"Times New Roman\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-03_2023-04-19_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nAnother one as an example is a plot with the mean point and standard deviation bars and jittered points:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  # using two different data frames: penguins (raw data) and penguins_summary (mean and SD)\n  # raw data are jittered\n  geom_jitter(data = penguins, aes(x = species, y = body_mass_g, color = species), alpha = 0.4) +\n  # summary data: mean is a point, bars are standard deviation\n  geom_point(data = penguin_summary, aes(x = species, y = mean_body_mass, color = species), size = 5) +\n  geom_errorbar(data = penguin_summary, aes(x = species, ymin = mean_body_mass - sd_body_mass, ymax = mean_body_mass + sd_body_mass, color = species), width = 0.2) +\n  scale_color_manual(values = c(\"#F56A56\", \"#3D83F5\", \"#A9A20B\")) +\n  labs(x = \"Penguin species\", y = \"Body mass (g)\",\n       title = \"Gentoo penguins tend to be heavier than Adelie or Chinstrap\",\n       caption = \"Data source: {palmerpenguins}, \\n Horst AM, Hill AP, Gorman KB.\") +\n  theme_bw() +\n  theme(legend.position = \"none\", \n        axis.title = element_text(size = 13),\n        axis.text = element_text(size = 12),\n        plot.title = element_text(size = 14),\n        plot.caption = element_text(face = \"italic\"),\n        text = element_text(family = \"Times New Roman\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](workshop-03_2023-04-19_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n**Note:** there is _always_ more tinkering you can do with a figure. The best way to figure out if you're actually communicating any kind of point or summarizing the data in a succinct way is to _show your figure to someone else_. You are not the best judge of how well you're communicating - other people are! In this class, I encourage you to share your figures with classmates, friends, anyone who you can trust to give you good feedback about 1) whether you've communicated your message and 2) whether your figure actually looks good.\n\n\n\n\n\n\n",
    "supporting": [
      "workshop-03_2023-04-19_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}