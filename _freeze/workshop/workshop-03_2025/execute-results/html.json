{
  "hash": "1d9affe24cb46fcd5c42233e22c96cca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Coding workshop: Week 3\"\nsubtitle: \"basic t-tests and their assumptions\"\ncategories: [tidyverse, lterdatasampler, data, geom_qq, geom_qq_line, facet_wrap, var.test, t.test, rownames_to_column, geom_pointrange, pipe operators, '|>', mutate, case_when, gglpot, geom_boxplot, geom_jitter, geom_histogram, group_by, summarize]\n---\n\n\n[Workshop dates: April 17 (Thursday), April 18 (Friday)]{style=\"color: #79ACBD; font-size: 24px;\"}\n\n## 1. Summary\n\n### Packages\n- `tidyverse`  \n- `lterdatasampler`  \n\n### Operations\n\n#### New functions\n- display data from package using `data()`  \n- visualize QQ plots using `geom_qq()` and `geom_qq_line()`  \n- create multi-panel plots using `facet_wrap()`  \n- compare group variances using `var.test()`  \n- do t-tests using `t.test()`  \n- make rownames into a separate column using `rownames_to_column()`  \n- use `geom_pointrange()` to show means and 95% CI\n\n#### Review\n- chain functions together using ` |> `  \n- filtering observations using `filter()`  \n- manipulate columns using `mutate()` and `case_when()`  \n- visualize data using `ggplot()`  \n- create boxplots using `geom_boxplot()` and show observation values using `geom_jitter()`  \n- create histograms using `geom_histogram()`  \n- group data using `group_by()`  \n- summarize data using `summarize()`  \n\n### General Quarto formatting tips\n\nYou can control the appearance of text, links, images, etc. using this [guide](https://quarto.org/docs/authoring/markdown-basics.html).\n\n### Data source\n\nThe data on sugar maples is from the `lterdatasampler` package. The package developers (alumni of the Bren Masters of Environmental Data Science program!) curated a bunch of datasets from the LTER network into this package for teaching and learning. Read about the package [here](https://lter.github.io/lterdatasampler/index.html).  \n\nThe source of the data is Hubbard Brook Experimental Forest. Read more about the data [here](https://lter.github.io/lterdatasampler/articles/hbr_maples_vignette.html).\n\n## 2. Code\n\n**Remember to set up an Rproject before starting!**\n\n### 1. Set up\n\nInsert a code chunk below to read in your packages. Name the code chunk `packages`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lterdatasampler)\n```\n:::\n\n\nBecause we are using data from the package `lterdatasampler`, we don't need to use `read_csv()`.  \n\nInstead, we can use `data()` to make the data frame show up in the environment.  \n\nInsert a code chunk below to display `hbr_maples` in the environment using `data(\"hbr_maples\")`. Name the code chunk `data`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"hbr_maples\")\n```\n:::\n\n\n### 2. Cleaning and wrangling\n\nInsert a code chunk to:  \n\n1. create a new object from `hbr_maples` called `maples_2003`  \n2. filter observations to only include the year 2003  \n3. mutate the `watershed` column so that `W1` is filled in as `Calcium-treated`  \n\nName the code chunk `data-cleaning`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaples_2003 <- hbr_maples |> # start with hbr_maples data frame\n  filter(year == \"2003\") |> # filter to only include observations from 2003\n  mutate(watershed = case_when( # rename watersheds\n    watershed == \"Reference\" ~ \"Reference\",\n    watershed == \"W1\" ~ \"Calcium-treated\"\n  ))\n```\n:::\n\n\n### 3. Exploratory data visualization\n\nInsert a code chunk to make a boxplot + jitter plot comparing stem lengths between watersheds. Remember to:  \n\n1. color by watershed  \n2. control the jitter so that the points don't move up and down the y-axis  \n\nName the code chunk `boxplot-and-jitter`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# base layer: ggplot\nggplot(data = maples_2003, # starting data frame\n       aes(x = watershed, # x-axis\n           y = stem_length, # y-axis\n           color = watershed)) + # coloring by watershed\n  # first layer: boxplot\n  geom_boxplot() +\n  # second layer: jitter plot\n  geom_jitter(height = 0, # making sure points don't move along y-axis\n              width = 0.2) # narrowing width of jitter\n```\n\n::: {.cell-output-display}\n![](workshop-03_2025_files/figure-html/boxplot-and-jitter-1.png){width=672}\n:::\n:::\n\n\n### 4. Checks for t-test assumptions\n\nInsert a code chunk to create a histogram. Name the code chunk `histogram`.  \n\nUse `facet_wrap()` to create separate panels for each watershed. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = maples_2003, # starting data frame\n       aes(x = stem_length)) + # x-axis (no y-axis for histogram)\n  geom_histogram(bins = 6) + # number of bins from Rice Rule\n  facet_wrap(~watershed) # creating two panels to show watersheds separately\n```\n\n::: {.cell-output-display}\n![](workshop-03_2025_files/figure-html/histogram-1.png){width=672}\n:::\n:::\n\n\nInsert a code chunk to create a QQ plot. Name the code chunk `qq-plot`.  \n\nUse `facet_wrap()` to create separate panels for each watershed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# base layer: ggplot call\nggplot(data = maples_2003, # starting data frame\n       aes(sample = stem_length)) + # y-axis for QQ plot (no x-axis for QQ plot)\n  # first layer: QQ reference line \n  geom_qq_line(color = \"blue\") + # showing this in blue so it's easier to see\n  # second layer: QQ plot\n  geom_qq() + \n  # creating \"facets\"\n  facet_wrap(~watershed) # show watersheds separately\n```\n\n::: {.cell-output-display}\n![](workshop-03_2025_files/figure-html/qq-plot-1.png){width=672}\n:::\n:::\n\n\n**Check in:** using histograms and QQ plots, does stem length seem to be normally distributed?  \n\n**Yes, because the histogram looks symmetrical, and the QQ plot points follow a straight line.**  \n\nNext, we'll check our variances. We can make sure we know where the F test results are coming from by calculating the variance ratios ourselves. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate variances\nstem_length_var <- maples_2003 |> # starting data frame\n  group_by(watershed) |> # group by watershed\n  summarize(variance = var(stem_length)) # calculate variances\n\n# calculate variance ratio (use this number to double check against results of var.test)\n205.7026/194.3021\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.058674\n```\n\n\n:::\n:::\n\n\n\nInsert a code chunk to check the variances using `var.test()`. Name the code chunk `F-test`.  \n\nIn the function `var.test()`, enter the arguments for:  \n\n1. the formula  \n2. the data  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# doing F test of equal variances\nvar.test(\n  stem_length ~ watershed, # formula: response variable ~ grouping variable\n  data = maples_2003 # data: maples_2003 data frame\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tF test to compare two variances\n\ndata:  stem_length by watershed\nF = 1.0587, num df = 119, denom df = 119, p-value = 0.7563\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.7378244 1.5190473\nsample estimates:\nratio of variances \n          1.058674 \n```\n\n\n:::\n:::\n\n\nRemember that this variance test is an F test of equal variances. You are comparing the variance of one group with another.  \n\nTo communicate about this, you could write something like:  \n\nUsing an F test of equal variances, we determined that variances were (equal or not equal) (F ratio, F(num df, denom df) = F statistic, p-value).  \n\nWe determined that group variances were (equal or not equal) (F ratio, F(num df, denom df) = F statistic, p-value).  \n\nFill in the blank here:  \n\n**We determined that group variances were equal (F ratio = 1.06, F(119, 119) = 1.06, p = 0.76).**    \n\n### 5. Doing a t-test\n\nInsert a code chunk to do a t-test. Name the code chunk `t-test`.  \n\nIn the function `t.test()`, enter the arguments for:  \n\n1. the formula  \n2. the variances in `var.equal = `  \n3. and the dataframe in `data = `  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(\n  stem_length ~ watershed, # formula: response variable ~ grouping variable\n  var.equal = TRUE, # argument for equal/unequal variances (variances should be equal)\n  data = maples_2003 # data: maples_2003 data frame\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tTwo Sample t-test\n\ndata:  stem_length by watershed\nt = 3.7797, df = 238, p-value = 0.0001985\nalternative hypothesis: true difference in means between group Calcium-treated and group Reference is not equal to 0\n95 percent confidence interval:\n  3.304134 10.497532\nsample estimates:\nmean in group Calcium-treated       mean in group Reference \n                     87.88583                      80.98500 \n```\n\n\n:::\n:::\n\n\n### 6. Communicating\n\n#### a. visual communication\n\nWhen doing a t-test, remember that you are comparing _means_. To visualize the data in a way that reflects the values you are comparing (again, you are comparing _means_), you can visualize the _means_ of each watershed with the standard deviation (spread), standard error (variation), or confidence interval (confidence).  \n\nIn this example, we will show 95% confidence intervals.  \n\nIn this code chunk, we are calculating the means and 95% confidence intervals. Name the code chunk `ci-calculation`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaples_ci <- maples_2003 |> # start with the maples_2003 data frame\n  group_by(watershed) |> # group by watershed\n  summarize(ci = mean_cl_normal(stem_length)) |> # calculate the 95% CI\n  deframe() |> # expand the data frame\n  rownames_to_column(\"watershed\") # make the data frame rownames a column called \"watershed\"\n```\n:::\n\n\nBefore moving on, look at the `maples_ci` object to make sure you know what it contains.  \n\nNote that this visualization uses two data frames. We use `maples_2003` to show the underlying data using `geom_jitter()`, and `maples_ci` to show the mean and 95% CI.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# base layer: ggplot with the x- and y-axes\nggplot(data = maples_2003, # using the maples_2003 data frame\n       aes(x = watershed, # x-axis\n           y = stem_length, # y-axis\n           color = watershed)) + # coloring points by watershed\n  # first layer: showing the underlying data\n  geom_jitter(height = 0, # no jitter in the vertical direction\n              width = 0.1, # smaller jitter in the horizontal direction\n              alpha = 0.4, # make the points more transparent\n              shape = 21) + # make the points open circles\n  # second layer: showing the summary (mean and 95% CI)\n  geom_pointrange(data = maples_ci, # using the maples_ci data frame\n                  aes(x = watershed, # x-axis\n                      y = y, # y-axis\n                      ymax = ymax, # upper bound of confidence interval\n                      ymin = ymin)) + # lower bound of confidence interval\n  labs(x = \"Watershed\", # labeling the axes\n       y = \"Stem length (cm)\") +\n  # figure customization\n  # Note: this is optional (but nice to do!)\n  scale_color_manual(values = c(\"Calcium-treated\" = \"darkorchid3\",\n                                \"Reference\" = \"tomato3\")) + # changing the point colors\n  theme_bw() + # using a theme\n  theme(legend.position = \"none\") # getting rid of the legend\n```\n\n::: {.cell-output-display}\n![](workshop-03_2025_files/figure-html/ci-visualization-1.png){width=672}\n:::\n:::\n\n\n#### b. Writing\n\nSummarize the results of the t-test in one sentence. Before you do, make sure you know the:  \n\n1. type of test  \n\n**Student's t (note: this is because variances are equal)**\n\n2. Sample size  \n\n**n = 120 for calcium-treated, n = 120 for reference (240 total)**  \n\n3. significance level ($\\alpha$)  \n\n**$\\alpha$ = 0.05**  \n\n4. degrees of freedom  \n\n**238 (note: 240 - 2 = 238)**  \n\n3. t-value (aka t-statistic)  \n\n**3.8**  \n\n4. p-value  \n\n**p < 0.001 (don't need to give exact number for anything below 0.001)**  \n\n**We found a significant difference in sugar maple stem lengths between calcium-treated (n = 120) and reference (n = 120) watersheds (Student's t-test, t(238) = 3.8, p < 0.001, $\\alpha$ = 0.05).**      \n\n**END OF WORKSHOP 3**\n\n## Extra stuff\n\n### Why do we have to put in `watershed == \"Reference\" ~ \"Reference\"`?\n\nLet's see what happens when you don't include that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhbr_maples |> # start with hbr_maples data frame\n  filter(year == \"2003\") |> # filter to only include observations from 2003\n  mutate(watershed = case_when( # rename watersheds\n    # note that we're missing the \"Reference\" line of code here\n    watershed == \"W1\" ~ \"Calcium-treated\"\n  )) |> \n  # including this to only display the first 6 rows of the data frame\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n   year watershed elevation transect sample stem_length leaf1area leaf2area\n  <dbl> <chr>     <fct>     <fct>    <fct>        <dbl>     <dbl>     <dbl>\n1  2003 <NA>      Low       R1       1             86.9     13.8      12.1 \n2  2003 <NA>      Low       R1       2            114       14.6      15.3 \n3  2003 <NA>      Low       R1       3             83.5     12.5       9.73\n4  2003 <NA>      Low       R1       4             68.1      9.97     10.1 \n5  2003 <NA>      Low       R1       5             72.1      6.84      5.48\n6  2003 <NA>      Low       R1       6             77.7      9.66      7.64\n# ℹ 3 more variables: leaf_dry_mass <dbl>, stem_dry_mass <dbl>,\n#   corrected_leaf_area <dbl>\n```\n\n\n:::\n:::\n\n\nIn the `watershed` column, the `mutate()`/`case_when()` function replaced `Reference` with `NA`, which is a missing value.  \n\nWhenever you use `mutate()`/`case_when()`, you have to explicitly name each value in the column you're mutating.  \n\nIf you want to _keep_ values, you can insert the argument `TRUE ~ `. Here's what that code/output would look like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhbr_maples |> # start with hbr_maples data frame\n  filter(year == \"2003\") |> # filter to only include observations from 2003\n  mutate(watershed = case_when( # rename watersheds\n    watershed == \"W1\" ~ \"Calcium-treated\", # change all occurrences of W1 in the watershed column to be Calcium-treated\n    # note that this has to come LAST\n    TRUE ~ watershed # keep any values that are not explicitly named as the original value\n  )) |> \n  # including this to only display the first 6 rows of the data frame\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n   year watershed elevation transect sample stem_length leaf1area leaf2area\n  <dbl> <chr>     <fct>     <fct>    <fct>        <dbl>     <dbl>     <dbl>\n1  2003 Reference Low       R1       1             86.9     13.8      12.1 \n2  2003 Reference Low       R1       2            114       14.6      15.3 \n3  2003 Reference Low       R1       3             83.5     12.5       9.73\n4  2003 Reference Low       R1       4             68.1      9.97     10.1 \n5  2003 Reference Low       R1       5             72.1      6.84      5.48\n6  2003 Reference Low       R1       6             77.7      9.66      7.64\n# ℹ 3 more variables: leaf_dry_mass <dbl>, stem_dry_mass <dbl>,\n#   corrected_leaf_area <dbl>\n```\n\n\n:::\n:::\n\n\nIf you combine arguments where you are changing values (for example, `watershed == \"W1\" ~ \"Calcium-treated\"`) with `TRUE ~ column name`, you can change values _and_ keep the original values in the column.\n\n### Shapes in figures\n\nIn class, we used `shape = 21` in the `geom_point()` call to make the points show up as open circles. By default, `ggplot()` uses `shape = 16` for all geometries that include points.    \n\nThis figure below shows the 26 options for shapes you can use in any plot with a point geometry.  \n\nShapes 0-14 are only outlines (with a transparent fill). Shapes 15 - 20 are filled (no outline). This means you control them with `color` in the `aes()` function, and `scale_color_()` functions. These show up in [pink]{style=\"color: #db0f48; font-weight: bold\"} in the plot below.  \n\nShapes 21 - 25 include outlines and fills. You can manipulate both: you can change the outline using `color` and `scale_color_()` functions, and change the fill with `fill` and `scale_fill_()` functions. In the plot, outlines show up in [pink]{style=\"color: #db0f48; font-weight: bold\"} and fills show up in [yellow]{style=\"color: #f4b301; font-weight: bold\"}.   \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop-03_2025_files/figure-html/shapes-1.png){width=672}\n:::\n:::\n\n\nCredit to [Albert Kuo's blog post](https://blog.albertkuo.me/post/point-shape-options-in-ggplot/) for inspiring me to make my own reference figure, and Alex Phillips's [colorblind friendly schemes](https://www.nceas.ucsb.edu/sites/default/files/2022-06/Colorblind%20Safe%20Color%20Schemes.pdf) for the colors in the figure.  \n\n",
    "supporting": [
      "workshop-03_2025_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}