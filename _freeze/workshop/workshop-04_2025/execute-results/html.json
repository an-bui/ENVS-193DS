{
  "hash": "772fe4ebc6f61b5a52f30b1dbee8d12c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Coding workshop: Week 4\"\nsubtitle: \"ggplot customization\"\ncategories: [tidyverse, read_csv, ggplot, theme, facet_wrap, geom_point, geom_line, group_by, summarize, pipe operators, '|>', filter, mutate]\nformat:\n  html:\n    toc: true\n    toc-depth: 8\n---\n\n\n[Workshop dates: April 24 (Thursday), April 25 (Friday)]{style=\"color: #79ACBD; font-size: 24px;\"}\n\n## 1. Summary\n\n### Packages\n- `tidyverse`  \n\n### Operations\n\n#### Review\n- read in data using `read_csv()`  \n- visualize data using `ggplot()`  \n- modify theme elements using `theme()`  \n- use built-in themes using `theme_()`  \n- modify colors using `scale_color_()` and `scale_fill_()` functions  \n- create multi-panel plots using `facet_wrap()`  \n- make line plots using `geom_point()` and `geom_line()`  \n- group data using `group_by()`  \n- summarize data using `summarize()`  \n- chain functions together using ` |> `  \n- filtering observations using `filter()`  \n- manipulate columns using `mutate()` and `case_when()`  \n\n### Data sources\n\nThe fish migration data is from the [Columbia River DART (Data Access in Real Time)](https://www.cbr.washington.edu/dart/overview) on fish migration through the Columbia River Basin in 2023.  \n\nThe shark incident data is from [Riley et al.](https://doi.org/10.1038/s41597-022-01453-9)  \n\nThe tornado data is from the [NOAA National Weather Service Storm Prediction Center](https://www.spc.noaa.gov/wcm/#data).\n\n## 2. Code\n\n### Today's topic\n\nWe're going to be exploring different ways to customize plots in `ggplot2` (remember that `ggplot2` is a package within the `tidyverse`, which you already have installed).  \n\nEach group will be responsible for creating a figure manipulating your assigned plot component. You will spend some time exploring each part and creating a figure together. After you are done, you'll compile slides to teach the class  \na) what your assigned plot component is (what it does) and  \nb) how to manipulate it (in code).  \n\n**Your challenge is to make the ugliest plot you can!** Change the colors, line types, line widths, etc. - whatever your heart desires to make a fundamentally ugly plot.  \n\n### Resources\n\nFirst, look up the function. In the Console, type a question mark, then your function name. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# copy paste this into the console\n?theme\n```\n:::\n\n\nYou can do this with any function - whenever you want to know what it does, just look it up in the Console by hitting `?` then the function name.  \n\nRead about your function. Make sure you understand the arguments, and decide which ones are relevant to you.  \n\nSecond, see these resources for some explanation of themes and customization:  \n- [ggplot2tor](https://ggplot2tor.com/theme/)  \n- [Jumping Rivers](https://www.jumpingrivers.com/blog/intro-to-theme-ggplot2-r/)  \n- [theme elements from `ggplot2` handbook](https://ggplot2-book.org/themes.html#sec-theme-elements)  \n- [built in themes from `ggplot2` handbook](https://ggplot2-book.org/themes.html#sec-themes)  \n\n### Code\n\n#### 1. Set up\n\n##### Packages and data\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# packages\nlibrary(tidyverse)\n\n# data\n# salmon data\nsalmon <- read_csv(\"adultdaily_1745380588_196.csv\")\n\n# tornado data\ntornados <- read_csv(\"tornados.csv\")\n\n# shark data\nsharks <- read_csv(\"sharks.csv\")\n```\n:::\n\n\n##### Cleaning \n\n###### Salmon\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create new clean object from salmon\nsalmon_clean <- salmon |> \n  # making sure the date is read as a date\n  mutate(Date = mdy(Date)) |> \n  # selecting date and 3 salmonid species\n  select(Date, Chin, Stlhd, Coho) |> \n  # making the data frame longer\n  pivot_longer(cols = Chin:Coho,\n               names_to = \"species\",\n               values_to = \"daily_count\") |> \n  # mutating species column to display species names in full\n  mutate(species = case_when(\n    species == \"Chin\" ~ \"Chinook\",\n    species == \"Stlhd\" ~ \"Steelhead\",\n    TRUE ~ species\n  )) |> \n  # filter to only include dates after December 31st 2023\n  filter(Date > as_date(\"2023-12-31\")) |> \n  # take out any missing values\n  drop_na(daily_count)\n```\n:::\n\n\n###### Tornados\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create new clean object from tornados\ntornados_clean <- tornados |> \n  # group by year\n  group_by(yr) |>\n  # calculate total property loss in dollars, sum number of tornados, calculate total property loss in billions of dollars\n  summarize(total_property_loss = sum(loss, na.rm = TRUE),\n            number_tornados = length(yr),\n            total_property_loss_bil = total_property_loss/1000000000) |> \n  # ungroup the data frame (useful if you're going to do any further summarizing steps)\n  ungroup() \n```\n:::\n\n\n###### Sharks\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create new clean object from sharks\nsharks_clean <- sharks |> \n  # drop any observations where shark common name is missing\n  drop_na(shark_common_name) |> \n  # group by shark species and state\n  group_by(shark_common_name, state) |> \n  # count observations (easy way to get total number of observations from groups)\n  count() |> \n  # ungroup the data frame (good to do if you're doing any cleaning steps after this)\n  ungroup() |> \n  # filter to only include New South Wales, Queensland, and Western Australia\n  filter(state %in% c(\"NSW\", \"QLD\", \"WA\")) |> \n  # mutate state column to show full names for each state\n  mutate(state = case_when(\n    state == \"NSW\" ~ \"New South Wales\",\n    state == \"QLD\" ~ \"Queensland\",\n    state == \"WA\" ~ \"Western Australia\"\n  ))\n```\n:::\n\n\n#### 2. Basic visualization\n\n##### a. Daily counts of salmon through Bonneville Dam in Columbia River Basin, Oregon in 2024\n\n\n::: {.cell}\n\n```{.r .cell-code}\n               # base layer: ggplot\nsalmon_plot <- ggplot(data = salmon_clean,\n                      # aesthetics: x-axis, y-axis, and color\n                      aes(x = Date,\n                          y = daily_count,\n                          color = species)) +\n  # first layer: points\n  geom_point() +\n  # second layer: line\n  geom_line() +\n  # labels\n  labs(x = \"Date\",\n       y = \"Daily fish count\")\n\n# display the plot\nsalmon_plot\n```\n\n::: {.cell-output-display}\n![](workshop-04_2025_files/figure-html/salmon-timeseries-1.png){width=672}\n:::\n:::\n\n\n##### b. Total property loss (in dollars) due to tornados in US from 1950-2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\n                              # base layer: ggplot\ntornado_property_loss_plot <- ggplot(data = tornados_clean,\n                                     # aesthetics: x-axis, y-axis\n                                     aes(x = yr,\n                                         y = total_property_loss_bil)) +\n  # first layer: points\n  geom_point() +\n  # second layer: line\n  geom_line() +\n  # labels\n  labs(x = \"Year\",\n       y = \"Total property loss (billions of dollars)\")\n\n# display the plot\ntornado_property_loss_plot\n```\n\n::: {.cell-output-display}\n![](workshop-04_2025_files/figure-html/tornado-property-loss-1.png){width=672}\n:::\n:::\n\n\n##### c. Total annual tornados in US from 1950-2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\n                      # base layer: ggplot\ntornado_count_plot <- ggplot(data = tornados_clean,\n                             # aesthetics: x-axis, y-axis\n                             aes(x = yr,\n                                 y = number_tornados)) +\n  # first layer: points\n  geom_point() +\n  # second layer: line\n  geom_line() +\n  # labels\n  labs(x = \"Year\",\n       y = \"Total annual tornados\")\n\n# display the plot\ntornado_count_plot\n```\n\n::: {.cell-output-display}\n![](workshop-04_2025_files/figure-html/tornado-count-plot-1.png){width=672}\n:::\n:::\n\n\n##### d. Total number of shark incidents in New South Wales and Queensland from 1791-2022\n\n\n::: {.cell}\n\n```{.r .cell-code}\n              # base layer: ggplot\nshark_plot <- ggplot(data = sharks_clean,\n                     # aesthetics: x-axis, y-axis\n                     aes(x = n,\n                         y = shark_common_name)) +\n  # first layer: columns to represent counts\n  geom_col() +\n  # faceting by state\n  facet_wrap(~ state) +\n  # labels\n  labs(x = \"Year\",\n       y = \"Total number of shark incidents\")\n\n# display the plot\nshark_plot\n```\n\n::: {.cell-output-display}\n![](workshop-04_2025_files/figure-html/shark-incident-plot-1.png){width=672}\n:::\n:::\n\n\n#### 3. Plot components\n\nAs everyone is going through their plot components, take notes in each section.\n\n###### a. `strip` in `theme()`\n\nDemonstrate how to:  \n- change the background  \n- change the placement  \n- change the text size and font  \n\n**Note:** you may want to use the `shark_plot` for this `theme` element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your individual plot\n```\n:::\n\n\nCode for the plot your group made:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your group plot\n```\n:::\n\n\n###### b. `plot` in `theme()`\n\nDemonstrate how to:  \n- change the plot margin  \n- change the plot background  \n- change the plot title, subtitle, and caption text position and color  \n\n**Note:** you will have to add a title, subtitle, and caption to the plot you choose to manipulate.  \n\nCode for your own independent exploration:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your individual plot\n```\n:::\n\n\nCode for the plot your group made:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your group plot\n```\n:::\n\n\n###### c. `panel` in `theme()`\n\nDemonstrate how to:  \n- change the panel border  \n- change the panel major grid lines (vertically and horizontally, in separate arguments)  \n- change the panel minor grid lines (vertically and horizontally, in separate arguments)  \n- change the panel background  \n\nCode for your own independent exploration:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your individual plot\n```\n:::\n\n\nCode for the plot your group made:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your group plot\n```\n:::\n\n\n###### d. `legend` in `theme()`\n\nDemonstrate how to:  \n- change the legend frame  \n- change the legend key size  \n- change the legend text size  \n- change the legend position  \n- change the legend row numbers  \n\n**Note:** you may want to use the `salmon_plot` for this `theme` element.  \n\nCode for your own independent exploration:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your individual plot\n```\n:::\n\n\nCode for the plot your group made:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your group plot\n```\n:::\n\n\n###### e. `axis` in `theme()`\n\nDemonstrate how to:  \n- change the axis text color and font\n- change the axis tick length (major and minor ticks)  \n- change the axis line colors and line types  \n\nCode for your own independent exploration:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your individual plot\n```\n:::\n\n\nCode for the plot your group made:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your group plot\n```\n:::\n\n\n###### f. `scale_color` or `scale_fill` functions\n\n**Note: use the shark plot for scale_fill and any other plot for scale_color**\n\nDemonstrate how to:  \n- use a color palette package  \n- apply it to a color scale  \n\nCode for your own independent exploration:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your individual plot\n```\n:::\n\n\nCode for the plot your group made:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your group plot\n```\n:::\n\n\n###### g. built in themes (`theme_`) with your own customization using `theme()`\n\nDemonstrate how to:  \n\n- use a built in theme and  \n- change additional components using the `theme()` elements of your choice\n\nCode for your own independent exploration:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your individual plot\n```\n:::\n\n\nCode for the plot your group made:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert code here for your group plot\n```\n:::\n\n\n## 3. Extra stuff\n\n### Thursday 4 PM plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data = sharks_clean,\n                     # aesthetics: x-axis, y-axis\n                     aes(x = n,\n                         y = shark_common_name,\n                         # fill columns by shark common name\n                         fill = shark_common_name)) +\n  # first layer: columns to represent counts\n  geom_col() +\n  # faceting by state, putting the strip on the bottom of the plot\n  facet_wrap(~ state,\n             strip.position = \"bottom\") +\n  # labels\n  labs(x = \"Total number of shark incidents\",\n       y = \"Species\") +\n  # manually manipulate fill colors\n  scale_fill_manual(values = c(\"bull shark\" = \"pink\",\n                               \"whaler shark\" = \"chartreuse\")) +\n  # built in theme\n  theme_dark() +\n  # theme elements\n  theme(\n    # strip elements\n    strip.placement = \"outside\",\n    strip.background = element_rect(color = \"red\", linetype = 4, linewidth = 7),\n    strip.text = element_text(color = \"hotpink\"),\n    strip.text.x.top = element_text(size = 20, face = \"italic\"),\n    # plot elements\n    plot.background = element_rect(fill = \"turquoise\", color = \"#EC4899\", linewidth = 4, linetype = \"dashed\"),\n    # panel elements\n    panel.grid.major.x = element_line(color = \"hotpink\", linewidth = 3),\n    panel.grid.major.y = element_line(color = \"dodgerblue\", linewidth = 1),\n    panel.background = element_rect(fill = \"lavender\"),\n    # legend elements\n    legend.background = element_rect(fill = \"chartreuse\"),\n    legend.key = element_rect(color = \"orange\"),\n    legend.text = element_text(size = 30),\n    # axis elements\n    axis.line.x = element_line(color = \"yellowgreen\", linewidth = 4),\n    axis.line.y = element_line(color = \"deeppink1\"),\n    axis.text.x.bottom = element_text(color = \"skyblue\"),\n    axis.text.y.left = element_text(color = \"chocolate\")\n  )\n```\n\n::: {.cell-output-display}\n![](workshop-04_2025_files/figure-html/thursday-plot-1.png){width=1152}\n:::\n:::\n\n\n### Thursday 5 PM plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data = salmon_clean,\n                      # aesthetics: x-axis, y-axis, and color\n                      aes(x = Date,\n                          y = daily_count,\n                          color = species)) +\n  # first layer: points\n  geom_point() +\n  # second layer: line\n  geom_line(size = 2, \n            linetype = \"dashed\") +\n  # labels\n  labs(x = \"Date\",\n       y = \"Daily fish count\",\n       title = \"Daily fish count per day\",\n       subtitle = \"group 2\",\n       caption = \"thursday 5 pm\") +\n  # custom color scale\n  scale_color_manual(values = c(\"Chinook\" = \"hotpink\",\n                                \"Coho\" = \"chartreuse\",\n                                \"Sockeye\" = \"pink\")) +\n  # adding this facet \n  facet_wrap(~species) +\n  # built in theme\n  theme_dark() +\n  theme(\n    # strip elements\n    strip.text = element_text(family = \"Times New Roman\"),\n    strip.background = element_rect(fill = \"red\"),\n    # plot elements\n    plot.title = element_text(size = 30, face = \"bold\", color = \"orange\"),\n    plot.subtitle = element_text(color = \"yellow\"),\n    plot.margin = margin(t = 100, r = 0.6, b = 20, l = 0.9),\n    plot.background = element_rect(fill = \"lightgreen\"),\n    # panel elements\n    panel.grid.minor.x = element_line(color = \"orange\", linewidth = 1),\n    panel.grid.major.y = element_line(color = \"darkgreen\", linewidth = 5),\n    panel.background = element_rect(fill = \"black\", color = NA),\n    # legend elements\n    legend.direction = \"horizontal\",\n    legend.key.size = unit(3, \"line\"),\n    legend.background = element_rect(fill = \"lemonchiffon\", color = \"grey50\", linewidth = 1),\n    # axis elements\n    axis.text.y.left = element_text(size = 15, color = \"deeppink\")\n  )\n```\n\n::: {.cell-output-display}\n![](workshop-04_2025_files/figure-html/unnamed-chunk-1-1.png){width=1152}\n:::\n:::\n\n\n### Friday 9 AM plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data = sharks_clean,\n                     # aesthetics: x-axis, y-axis\n                     aes(x = n,\n                         y = shark_common_name)) +\n  # first layer: columns to represent counts\n  geom_col() +\n  # faceting by state\n  facet_wrap(~ state,\n             strip.position = \"bottom\") +\n  # labels\n  labs(x = \"Total number of shark incidents\",\n       y = \"Shark species\",\n       title = \"Fishy Salmon Run\",\n       subtitle = \"fishfishyfishyfishyfishy\") +\n  # built in theme\n  theme_dark() +\n  theme(\n    # strip elements\n    strip.text = element_text(color = \"brown\",\n                              family = \"Times New Roman\",\n                              size = 50,\n                              face = \"bold\"),\n    strip.background = element_rect(fill = \"cornflowerblue\",\n                                    color = \"pink2\",\n                                    size = 5),\n    # plot elements\n    plot.background = element_rect(fill = \"#EC4899\",\n                                   color = NA),\n    plot.title = element_text(angle = -20, size = 40, color = \"blue\"),\n    plot.subtitle = element_text(angle = 20, color = \"gold\"),\n    plot.margin = unit(rep(2, 4), \"cm\"),\n    # panel elements\n    panel.grid.major = element_line(size = 8),\n    panel.background = element_rect(fill = \"#EC4899\"),\n    panel.grid.minor = element_line(color = \"#32CD32\"),\n    # legend elements\n    legend.background = element_rect(fill = \"yellow\"),\n    legend.key.size = unit(3, \"cm\"),\n    legend.position.inside = c(0.6, 0.5)\n  )\n```\n\n::: {.cell-output-display}\n![](workshop-04_2025_files/figure-html/unnamed-chunk-2-1.png){width=1152}\n:::\n:::\n\n\n### Friday 10 AM plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data = salmon_clean,\n                      # aesthetics: x-axis, y-axis, and color\n                      aes(x = Date,\n                          y = daily_count,\n                          color = species)) +\n  # first layer: points\n  geom_point() +\n  # second layer: line\n  geom_line(size = 2, \n            linetype = \"dashed\") +\n  # labels\n  labs(x = \"Date\",\n       y = \"Daily fish count\",\n       title = \"Ugly plot\",\n       caption = \"super ugly\") +\n  # custom color scale\n  scale_color_manual(values = c(\"Chinook\" = \"hotpink\",\n                                \"Coho\" = \"chartreuse\",\n                                \"Sockeye\" = \"pink\")) +\n  # adding this facet \n  facet_wrap(~species) +\n  # built in theme\n  theme_dark() +\n  theme(\n    # strip elements\n    strip.text = element_text(family = \"Courier New\",\n                              color = \"gold\",\n                              face = \"bold\"),\n    strip.background = element_rect(color = \"brown\",\n                                    fill = \"white\"),\n    # plot elements\n    plot.background = element_rect(fill = \"yellow\", color = \"red\", size = 20),\n    plot.title = element_text(color = \"purple\", size = 28, face = \"italic\", hjust = 0),\n    plot.caption = element_text(color = \"red\", size = 14, face = \"bold.italic\", hjust = 0.5),\n    # panel elements\n    panel.border = element_rect(fill = NA, color = \"chartreuse\", size = 1),\n    panel.grid.major.x = element_line(color = \"blue3\"),\n    panel.grid.minor.y = element_line(color = \"chartreuse4\"),\n    panel.background = element_rect(fill = \"deeppink\"),\n    # legend elements\n    legend.key.height = unit(3, \"cm\"),\n    legend.key.width = unit(5, \"cm\"),\n    legend.background = element_rect(fill = \"green\"),\n    legend.position = \"left\",\n    legend.box.background = element_rect(fill = \"red\"),\n    # axis elements\n    axis.text.y.left = element_text(size = 17, color = \"yellow\"),\n    axis.ticks = element_line(color = \"red\"),\n    axis.line = element_line(color = \"purple\",\n                             size = 12)\n  )\n```\n\n::: {.cell-output-display}\n![](workshop-04_2025_files/figure-html/unnamed-chunk-3-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "workshop-04_2025_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}