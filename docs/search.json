[
  {
    "objectID": "lecture/lecture-04_2023-04-24.html",
    "href": "lecture/lecture-04_2023-04-24.html",
    "title": "Lecture 04 figures",
    "section": "",
    "text": "# cleaning\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n# visualization\nlibrary(showtext)\n\nLoading required package: sysfonts\nLoading required package: showtextdb\n\nfont_add_google(\"Lato\", \"Lato\")\nshowtext_auto()\n\n# panels together\nlibrary(patchwork)\n\n# cohen's d\nlibrary(effsize)"
  },
  {
    "objectID": "lecture/lecture-04_2023-04-24.html#random-numbers-from-t-distribution",
    "href": "lecture/lecture-04_2023-04-24.html#random-numbers-from-t-distribution",
    "title": "Lecture 04 figures",
    "section": "random numbers from t-distribution",
    "text": "random numbers from t-distribution\n\nset.seed(7)\n# acorns <- rt(n = 41, df = 40, ncp = 2.5) \nacorns <- rnorm(n = 41, mean = 2, sd = 1)"
  },
  {
    "objectID": "lecture/lecture-04_2023-04-24.html#histogram",
    "href": "lecture/lecture-04_2023-04-24.html#histogram",
    "title": "Lecture 04 figures",
    "section": "histogram",
    "text": "histogram\n\nhist <- enframe(acorns) %>% \n  ggplot(aes(x = value)) +\n  geom_histogram(bins = 7, fill = \"cornflowerblue\", color = \"#000000\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 11.5), breaks = c(0, 3, 6, 9, 12)) +\n  theme_classic() +\n  labs(x = \"Acorn mass (g)\", y = \"Count\")"
  },
  {
    "objectID": "lecture/lecture-04_2023-04-24.html#qq-plot",
    "href": "lecture/lecture-04_2023-04-24.html#qq-plot",
    "title": "Lecture 04 figures",
    "section": "qq plot",
    "text": "qq plot\n\nqq <- enframe(acorns) %>% \n  ggplot(aes(sample = value)) +\n  stat_qq_line(aes(sample = value)) +\n  stat_qq(aes(sample = value), color = \"cornflowerblue\", size = 3) +\n  theme_classic() +\n  labs(x = \"Theoretical quantiles\", y = \"Sample quantiles\")\n\n\nhist + qq"
  },
  {
    "objectID": "lecture/lecture-04_2023-04-24.html#calculating-a-critical-value",
    "href": "lecture/lecture-04_2023-04-24.html#calculating-a-critical-value",
    "title": "Lecture 04 figures",
    "section": "calculating a critical value",
    "text": "calculating a critical value\n\nqt(p = .05/2, df = 40)\n\n[1] -2.021075"
  },
  {
    "objectID": "lecture/lecture-04_2023-04-24.html#calculating-t-score",
    "href": "lecture/lecture-04_2023-04-24.html#calculating-t-score",
    "title": "Lecture 04 figures",
    "section": "calculating t-score",
    "text": "calculating t-score\n\n# population mean\nmu0 <- 2\n\n# number of observations\nn <- 41\n\n# sample mean\nxbar <- mean(acorns)\n\n# sample standard deviation\ns <- sd(acorns)\n\n# sample standard error\nse <- s/sqrt(n)\n\n# degrees of freedom\ndf <- n - 1\n\n# t-score\nt <- (xbar-mu0)/se\n\nt\n\n[1] 1.803471\n\n\n\\[\nt_s = \\frac{\\bar{x} - \\mu}{s/\\sqrt{n}} = \\frac{2.29 - 2}{1.04/\\sqrt{41}} = 1.8\n\\] ## visual representation of sample t-statistic vs t-critical\n\nggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(1.8, 5), fill = \"darkgrey\") +\n  stat_function(geom = \"area\", fun = dt, args = list(df = 1), xlim = c(-5, -1.8), fill = \"darkgrey\") +\n  geom_linerange(aes(x = 1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = \"#000000\") +\n  geom_linerange(aes(x = -1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = \"#000000\") +\n  \n  geom_linerange(aes(x = 2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = \"#FFFFFF\") +\n  geom_linerange(aes(x = -2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = \"#FFFFFF\") +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#000000\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  theme_void() +\n  theme(panel.grid = element_blank(),\n        plot.margin = unit(c(1, 0, 0, 0), \"cm\"))"
  },
  {
    "objectID": "lecture/lecture-04_2023-04-24.html#manually-calculating-p-value",
    "href": "lecture/lecture-04_2023-04-24.html#manually-calculating-p-value",
    "title": "Lecture 04 figures",
    "section": "manually calculating p-value",
    "text": "manually calculating p-value\n\n# two-tailed: multiply probability by 2\n# lower = FALSE: probability of the value being more than t\n2*pt(t, df, lower = FALSE)\n\n[1] 0.07885024"
  },
  {
    "objectID": "lecture/lecture-04_2023-04-24.html#doing-a-t-test",
    "href": "lecture/lecture-04_2023-04-24.html#doing-a-t-test",
    "title": "Lecture 04 figures",
    "section": "doing a t-test",
    "text": "doing a t-test\n\nt.test(acorns, mu = 2)\n\n\n    One Sample t-test\n\ndata:  acorns\nt = 1.8035, df = 40, p-value = 0.07885\nalternative hypothesis: true mean is not equal to 2\n95 percent confidence interval:\n 1.964535 2.623323\nsample estimates:\nmean of x \n 2.293929"
  },
  {
    "objectID": "lecture/lecture-04_2023-04-24.html#same-differences-in-means-different-sd",
    "href": "lecture/lecture-04_2023-04-24.html#same-differences-in-means-different-sd",
    "title": "Lecture 04 figures",
    "section": "same differences in means, different SD",
    "text": "same differences in means, different SD\n\nsmall <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 2), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 3), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nbig <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 0.5), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 0.5), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 3), color = \"#00A38D\", lty = 2, linewidth = 2) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.8)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nsmall / big"
  },
  {
    "objectID": "lecture/lecture-07_2023-05-15.html",
    "href": "lecture/lecture-07_2023-05-15.html",
    "title": "Lecture 07 figures",
    "section": "",
    "text": "library(tidyverse)\nlibrary(palmerpenguins)\nlibrary(showtext)\nlibrary(car)\nfont_add_google(\"Lato\", \"Lato\")\nshowtext_auto()\nlibrary(patchwork)\nlibrary(ggeffects)\nlibrary(performance)\nlibrary(broom)\nlibrary(flextable)"
  },
  {
    "objectID": "lecture/lecture-07_2023-05-15.html#generating-data-and-model",
    "href": "lecture/lecture-07_2023-05-15.html#generating-data-and-model",
    "title": "Lecture 07 figures",
    "section": "generating data and model",
    "text": "generating data and model\n\nx_lm <- seq(from = 1, to = 30, by = 1)\n\nset.seed(666)\ny_lm <- round(runif(length(x_lm), min = 1, max = 1.5), 1)*x_lm + runif(length(x_lm), min = 1, max = 10)\n\ndf_lm <- cbind(\n  x = x_lm,\n  y = y_lm\n) %>% \n  as_tibble() %>% \n  mutate(outlier = case_when(\n    rownames(.) %in% c(23, 27, 28) ~ \"outlier\",\n    TRUE ~ \"ok\"\n  ))"
  },
  {
    "objectID": "lecture/lecture-07_2023-05-15.html#model-summaries",
    "href": "lecture/lecture-07_2023-05-15.html#model-summaries",
    "title": "Lecture 07 figures",
    "section": "model summaries",
    "text": "model summaries\n\nmodel1 <- lm(y ~ x, data = df_lm)\nmodel1\n\n\nCall:\nlm(formula = y ~ x, data = df_lm)\n\nCoefficients:\n(Intercept)            x  \n      6.404        1.156  \n\nsummary(model1)\n\n\nCall:\nlm(formula = y ~ x, data = df_lm)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-8.323 -1.020  0.002  2.393  6.645 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   6.4043     1.3421   4.772 5.17e-05 ***\nx             1.1561     0.0756  15.293 4.02e-15 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.584 on 28 degrees of freedom\nMultiple R-squared:  0.8931,    Adjusted R-squared:  0.8893 \nF-statistic: 233.9 on 1 and 28 DF,  p-value: 4.021e-15\n\nanova(model1)\n\nAnalysis of Variance Table\n\nResponse: y\n          Df  Sum Sq Mean Sq F value    Pr(>F)    \nx          1 3003.92 3003.92  233.87 4.021e-15 ***\nResiduals 28  359.64   12.84                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nmodel1_nooutliers <- lm(y ~ x, data = df_lm %>% filter(outlier == \"ok\"))\nsummary(model1_nooutliers)\n\n\nCall:\nlm(formula = y ~ x, data = df_lm %>% filter(outlier == \"ok\"))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.6611 -1.2596 -0.5039  1.6229  4.7197 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  6.12314    1.02352   5.982 3.02e-06 ***\nx            1.20027    0.06177  19.431  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.668 on 25 degrees of freedom\nMultiple R-squared:  0.9379,    Adjusted R-squared:  0.9354 \nF-statistic: 377.6 on 1 and 25 DF,  p-value: < 2.2e-16\n\n\n\\[\n\\begin{align}\nR^2 &= 1 - \\frac{SS_{residuals}}{SS_{total}} \\\\\n&= 1 - \\frac{359.64}{359.64 + 3003.92} \\\\\n&= 0.8931\n\\end{align}\n\\]\n\n# if using quarto, don't label chunk with a table... so weird\nanova_tbl <- broom::tidy(anova(model1)) %>% \n  mutate(across(where(is.numeric), ~ round(.x, digits = 2))) %>% \n  mutate(p.value = case_when(\n    p.value < 0.001 ~ \"< 0.001\"\n  )) \n\nflextable(anova_tbl) %>% \n  set_header_labels(term = \"Term\", \n                    df = \"Degrees of freedom\", \n                    sumsq = \"Sum of squares\", \n                    meansq = \"Mean squares\", \n                    statistic = \"F-statistic\", \n                    p.value = \"p-value\") %>% \n  set_table_properties(layout = \"autofit\", width = 0.8)\n\n\nTermDegrees of freedomSum of squaresMean squaresF-statisticp-valuex13,003.923,003.92233.87< 0.001Residuals28359.6412.84"
  },
  {
    "objectID": "lecture/lecture-07_2023-05-15.html#model-plots",
    "href": "lecture/lecture-07_2023-05-15.html#model-plots",
    "title": "Lecture 07 figures",
    "section": "model plots",
    "text": "model plots\n\nmodel1_pred <- ggpredict(model1, terms = ~ x)\nmodel1_nooutliers_pred <- ggpredict(model1_nooutliers, terms = ~ x)\n\nmodel1_plot_noline <- ggplot(data = df_lm, aes(x = x, y = y)) +\n  geom_point(shape = 19, size = 3, color = \"cornflowerblue\") +\n  theme_classic() +\n  theme(text = element_text(size = 14))\n\nmodel1_plot <- ggplot(data = df_lm, aes(x = x, y = y)) +\n  geom_point(shape = 19, size = 3, color = \"cornflowerblue\") +\n  geom_line(data = model1_pred, aes(x = x, y = predicted), linewidth = 1) +\n  theme_classic() +\n  theme(text = element_text(size = 14))\n\nmodel1_plot_nooutliers <- ggplot(data = df_lm %>% filter(outlier == \"ok\"), aes(x = x, y = y)) +\n  geom_point(aes(color = outlier), shape = 19, size = 3) +\n  scale_color_manual(values = c(\"ok\" = \"cornflowerblue\", \"outlier\" = \"red\")) +\n  geom_line(data = model1_nooutliers_pred, aes(x = x, y = predicted), linewidth = 1) +\n  theme_classic() +\n  theme(text = element_text(size = 14),\n        legend.position = \"none\")"
  },
  {
    "objectID": "lecture/lecture-07_2023-05-15.html#model-summary",
    "href": "lecture/lecture-07_2023-05-15.html#model-summary",
    "title": "Lecture 07 figures",
    "section": "model summary",
    "text": "model summary\n\nsummary(lm_ex)\n\n\nCall:\nlm(formula = y ~ x, data = df_ex)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1081.0  -843.2  -226.3   660.5  2756.1 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -9431.3     1111.3  -8.486 3.16e-09 ***\nx             1642.0      156.5  10.492 3.30e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1023 on 28 degrees of freedom\nMultiple R-squared:  0.7972,    Adjusted R-squared:   0.79 \nF-statistic: 110.1 on 1 and 28 DF,  p-value: 3.298e-11"
  },
  {
    "objectID": "lecture/lecture-07_2023-05-15.html#model-plots-1",
    "href": "lecture/lecture-07_2023-05-15.html#model-plots-1",
    "title": "Lecture 07 figures",
    "section": "model plots",
    "text": "model plots\n\nlm_pred <- ggpredict(lm_ex, terms = ~x)\n\nex_plot_noline <- ggplot(df_ex, aes(x= x, y = y)) +\n  geom_point(shape = 17, size = 3, color = \"orange\") +\n  theme_classic() +\n  theme(text = element_text(size = 14))\n\nex_plot <- ggplot(df_ex, aes(x= x, y = y)) +\n  geom_point(shape = 17, size = 3, color = \"orange\") +\n  geom_line(data = lm_pred, aes(x = x, y = predicted), linewidth = 1) +\n  theme_classic() +\n  theme(text = element_text(size = 14))"
  },
  {
    "objectID": "lecture/lecture-05_2023-05-01.html",
    "href": "lecture/lecture-05_2023-05-01.html",
    "title": "Lecture 05 figures",
    "section": "",
    "text": "\\[\nt_s = \\frac{\\bar{x}_A - \\bar{x}_B}{\\sqrt{\\frac{s^2_A}{n_A} + \\frac{s^2_B}{n_B}}}\n\\]\ndegrees of freedom for unequal variances (welch’s)\n\\[\ndf = \\frac{(\\frac{s^2_A}{n_A} + \\frac{s^2_B}{n_B})^2}{\\frac{(s^2_A/n_A)^2}{n_A - 1} + \\frac{(s^2_B/n_B)^2}{n_B - 1}}\n\\]\ntest statistic for equal variances (student’s t)\n\\[\nt_s = \\frac{\\bar{x}_A - \\bar{x}_B}{s_p\\sqrt{\\frac{1}{n_A} + \\frac{1}{n_B}}}\n\\]\ntest statistic for paired t-test\n\\[\nt_s = \\frac{\\bar{x}_d - \\mu_0}{s_d - \\sqrt{n}}\n\\]\ntest statistic for F test \\[\nF =  \\frac{s^2_A}{s^2_B}\n\\]\ndifferences in variances\n\nlibrary(tidyverse)\nlibrary(patchwork)\n\nsmall <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 2), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 3), color = \"#00A38D\", lty = 2, linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nbig <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 0.5), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 0.5), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 3), color = \"#00A38D\", lty = 2, linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.8)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nunequal <- ggplot(data.frame(x = -6:9), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = \"#FF6B2B\") +\n  geom_vline(aes(xintercept = 0), color = \"#FF6B2B\", lty = 2, linewidth = 2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 3, sd = 0.5), linewidth = 2, color = \"#00A38D\") +\n  geom_vline(aes(xintercept = 3), color = \"#00A38D\", lty = 2, linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.8)) +\n  theme_void() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\"))\n\nsmall/big/unequal\n\n\n\n\n\n\n\n\ndemonstration of power analysis:\n\nlibrary(pwr)\n\npwr.t.test(n = NULL, d = 0.5, sig.level = 0.05, power = 0.95)\n\n\n     Two-sample t test power calculation \n\n              n = 104.9279\n              d = 0.5\n      sig.level = 0.05\n          power = 0.95\n    alternative = two.sided\n\nNOTE: n is number in *each* group\n\npwr.t.test(n = NULL, d = 0.7, sig.level = 0.05, power = 0.80)\n\n\n     Two-sample t test power calculation \n\n              n = 33.02457\n              d = 0.7\n      sig.level = 0.05\n          power = 0.8\n    alternative = two.sided\n\nNOTE: n is number in *each* group\n\n\nU statistic: \\[\n\\begin{align}\nU_1 &= \\Sigma R_1 - n_1(n_1 + 1)/2 = 17 - 5(5+1)/2 = 2 \\\\\nU_2 &= \\Sigma R_2 - n_2(n_2 + 1)/2 = 38 - 5(5+1)/2 = 23\n\\end{align}\n\\]\n\nSample1 <- c(1.1, 2.4, 1.8, 0.4, 1.6)\nSample2 <- c(5.4, 3.1, 2.3, 1.9, 4.2)\nwilcox.test(Sample1, Sample2)\n\n\n    Wilcoxon rank sum exact test\n\ndata:  Sample1 and Sample2\nW = 2, p-value = 0.03175\nalternative hypothesis: true location shift is not equal to 0\n\n\n\n# for a comparison of one group against a theoretical median\nwilcox.test(SampleA, mu = theoretical)\n\n# for a comparison of two groups\nwilcox.test(SampleA, SampleB, paired = TRUE)\n\nbalanced design using Student’s t:\n\\[\n\\begin{align}\nSE_{\\bar{x}_A-\\bar{x}_B} &= s_p\\sqrt{\\frac{1}{n_A} + \\frac{1}{n_B}} \\\\\nScenario 1 &: s_p\\sqrt{\\frac{1}{5} + \\frac{1}{25}} = s_p*0.49 \\\\\nScenario 2 &: s_p\\sqrt{\\frac{1}{15} + \\frac{1}{15}} = s_p*0.37\n\\end{align}\n\\]\n\n\n\nCitationBibTeX citation:@online{bui2023,\n  author = {An Bui},\n  editor = {},\n  title = {Lecture 05 Figures},\n  date = {2023-05-01},\n  url = {https://an-bui.github.io/ES-193DS-W23/lecture/lecture-05_2023-05-01.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAn Bui. 2023. “Lecture 05 Figures.” May 1, 2023. https://an-bui.github.io/ES-193DS-W23/lecture/lecture-05_2023-05-01.html."
  },
  {
    "objectID": "lecture/lecture-01_2023-04-03.html",
    "href": "lecture/lecture-01_2023-04-03.html",
    "title": "Lecture 01 figures",
    "section": "",
    "text": "1. anemone regression example\n\n# number of anemones in a clump\nclump <- seq(from = 1, to = 60, by = 1)\n\n# circumference: anemones can be up to 8 cm long\nset.seed(10)\ncirc <- rnorm(length(clump), mean = seq(from = 1, to = 5, length = length(clump)), sd = 1) \n\n# create a data frame\ndf <- cbind(circ, clump) %>% \n  as.data.frame() \n\n# linear model\nlm(circ ~ clump, data = df) %>% summary()\n\n\nCall:\nlm(formula = circ ~ clump, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.88621 -0.62425  0.06147  0.58350  2.17217 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 0.451168   0.236422   1.908   0.0613 .  \nclump       0.076068   0.006741  11.285 2.91e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9042 on 58 degrees of freedom\nMultiple R-squared:  0.6871,    Adjusted R-squared:  0.6817 \nF-statistic: 127.3 on 1 and 58 DF,  p-value: 2.914e-16\n\nshowtext_auto()\nggplot(df, aes(x = clump, y = circ)) +\n  geom_point(size = 2) +\n  # just using geom smooth for the purposes of visualization\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 2) +\n  labs(x = \"Number of anemones in a colony\", y = \"Circumference (cm)\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n2. histogram example\n\nggplot(df, aes(x = circ)) +\n  scale_x_continuous(breaks = seq(from = 0, to = 7, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 19), breaks = seq(from = 0, to = 18, by = 3)) +\n  geom_histogram(breaks = seq(from = 0, to = 7, by = 1), color = \"#000000\", fill = \"lightblue\") +\n  labs(x = \"Anemone circumference (cm)\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n3. Probability mass example\n\nggplot(data.frame(x = 1:55), aes(x)) +\n  stat_function(geom = \"bar\", n = 55, fun = dpois, args = list(lambda = 10), fill = \"coral\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.13)) +\n  coord_cartesian(xlim = c(0, 22)) +\n  labs(x = \"Mussel clump size (count)\", y = \"Probability mass\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n4. Probability density example\n\nggplot(data.frame(x = 1:20), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 10, sd = 2), linewidth = 1) +\n  stat_function(geom = \"area\", fun = dnorm, args = list(mean = 10, sd = 2), xlim = c(12, 14), fill = \"turquoise3\") +\n  geom_vline(xintercept = 12, lty = 2, color = \"grey\", linewidth = 1) +\n  geom_vline(xintercept = 14, lty = 2, color = \"grey\", linewidth = 1) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.22)) +\n  # coord_cartesian(xlim = c(0, 22)) +\n  labs(x = \"Individual mussel weight (g)\", y = \"Probability density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\nshowtext_auto(FALSE)\n\n\n\n\n\nCitationBibTeX citation:@online{bui2023,\n  author = {An Bui},\n  editor = {},\n  title = {Lecture 01 Figures},\n  date = {2023-04-03},\n  url = {https://an-bui.github.io/ES-193DS-W23/lecture/lecture-01_2023-04-03.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAn Bui. 2023. “Lecture 01 Figures.” April 3, 2023. https://an-bui.github.io/ES-193DS-W23/lecture/lecture-01_2023-04-03.html."
  },
  {
    "objectID": "lecture/lecture-06_2023-05-08.html",
    "href": "lecture/lecture-06_2023-05-08.html",
    "title": "Lecture 06 figures",
    "section": "",
    "text": "library(tidyverse)\nlibrary(palmerpenguins)\nlibrary(showtext)\nlibrary(car)\nfont_add_google(\"Lato\", \"Lato\")\nshowtext_auto()\nlibrary(patchwork)"
  },
  {
    "objectID": "lecture/lecture-06_2023-05-08.html#chi-square",
    "href": "lecture/lecture-06_2023-05-08.html#chi-square",
    "title": "Lecture 06 figures",
    "section": "Chi-square",
    "text": "Chi-square\n\ntest statistic:\n\\[\n\\chi^2 = \\Sigma\\frac{(O-E)^2}{E}\n\\] ### degrees of freedom \\[\ndf = (number\\;of\\;rows - 1) * (number\\;of\\;columns - 1)\n\\]\n\n\nexpected counts:\n\\[\nexpected = \\frac{row\\;total * column\\;total}{table\\;total}\n\\]\n\n\nexpected counts example from lecture\n\\[\n\\frac{126 * 118}{315} = 47.2\n\\]\n\n\ntest statistic calculation example from lecture\n\\[\n\\begin{align}\n\\chi^2 &= \\Sigma\\frac{(O-E)^2}{E} \\\\\n\\chi^2 &= \\frac{55-47.2}{47.2}+...+\\frac{45-31.9}{31.9} \\\\\n&= 15.276\n\\end{align}\n\\]\n\n\nexample code\n\n# create matrix\nsurvey <- tribble(\n  ~distance, ~trails, ~dog_access, ~wildlife_habitat,\n  \"walking_distance\", 55, 38, 33,\n  \"driving_distance\", 41, 25, 29,\n  \"out_of_town\", 22, 27, 45\n) %>% \n  column_to_rownames(\"distance\")\n\nsurvey\n\n                 trails dog_access wildlife_habitat\nwalking_distance     55         38               33\ndriving_distance     41         25               29\nout_of_town          22         27               45\n\n# calculate proportions\nsurvey_summary <- tribble(\n  ~distance, ~trails, ~dog_access, ~wildlife_habitat,\n  \"walking_distance\", 55, 38, 33,\n  \"driving_distance\", 41, 25, 29,\n  \"out_of_town\", 22, 27, 45\n) %>% \n  pivot_longer(cols = trails:wildlife_habitat, names_to = \"responses\", values_to = \"counts\") %>% \n  group_by(distance) %>% \n  mutate(sum = sum(counts)) %>% \n  ungroup() %>% \n  mutate(prop = counts/sum)\n  \n# do chi-square\nchisq.test(survey)\n\n\n    Pearson's Chi-squared test\n\ndata:  survey\nX-squared = 15.276, df = 4, p-value = 0.004162\n\n# get expected matrix\nchisq.test(survey)$expected\n\n                  trails dog_access wildlife_habitat\nwalking_distance 47.2000   36.00000         42.80000\ndriving_distance 35.5873   27.14286         32.26984\nout_of_town      35.2127   26.85714         31.93016"
  },
  {
    "objectID": "lecture/lecture-06_2023-05-08.html#anova-variance-figure",
    "href": "lecture/lecture-06_2023-05-08.html#anova-variance-figure",
    "title": "Lecture 06 figures",
    "section": "ANOVA variance figure:",
    "text": "ANOVA variance figure:\n\ncol1 <- \"cornflowerblue\"\ncol2 <- \"orange\"\ncol3 <- \"darkgreen\"\n\nggplot(data.frame(x = 0:22), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 10, sd = 2), linewidth = 1, col = col1) + \n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 8, sd = 2), linewidth = 1, col = col2) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 15, sd = 2), linewidth = 1, col = col3) +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        panel.border = element_blank(),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture-06_2023-05-08.html#anova-with-palmer-penguins",
    "href": "lecture/lecture-06_2023-05-08.html#anova-with-palmer-penguins",
    "title": "Lecture 06 figures",
    "section": "ANOVA with palmer penguins",
    "text": "ANOVA with palmer penguins\n\n# Adelie: 10\n# Chinstrap: 8\n# Gentoo: 10\n\nadelie <- penguins %>% \n  filter(species == \"Adelie\")\n\nadelie_hist <- ggplot(data = adelie, aes(x = bill_length_mm)) +\n  geom_histogram(bins = 10, fill = col1, color = col1, alpha = 0.8) +\n  labs(x = \"Bill length (mm)\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        axis.ticks = element_blank(),\n        text = element_text(family = \"Lato\")) \n\nadelie_qq <- ggplot(data = adelie, aes(sample = bill_length_mm)) +\n  stat_qq_line(linewidth = 1) +\n  stat_qq(col = col1) +\n  labs(x = \"Theoretical\", y = \"Sample\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        axis.ticks = element_blank(),\n        text = element_text(family = \"Lato\")) \n\nshapiro.test(adelie$bill_length_mm)\n\n\n    Shapiro-Wilk normality test\n\ndata:  adelie$bill_length_mm\nW = 0.99336, p-value = 0.7166\n\nchinstrap <- penguins %>% \n  filter(species == \"Chinstrap\")\n\nchinstrap_hist <- ggplot(data = chinstrap, aes(x = bill_length_mm)) +\n  geom_histogram(bins = 10, fill = col2, color = col2, alpha = 0.8) +\n  labs(x = \"Bill length (mm)\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        axis.ticks = element_blank(),\n        text = element_text(family = \"Lato\")) \n\nchinstrap_qq <- ggplot(data = chinstrap, aes(sample = bill_length_mm)) +\n  stat_qq_line(linewidth = 1) +\n  stat_qq(col = col2) +\n  labs(x = \"Theoretical\", y = \"Sample\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        axis.ticks = element_blank(),\n        text = element_text(family = \"Lato\")) \n\nshapiro.test(chinstrap$bill_length_mm)\n\n\n    Shapiro-Wilk normality test\n\ndata:  chinstrap$bill_length_mm\nW = 0.97525, p-value = 0.1941\n\ngentoo <- penguins %>% \n  filter(species == \"Gentoo\")\n\ngentoo_hist <- ggplot(data = gentoo, aes(x = bill_length_mm)) +\n  geom_histogram(bins = 10, fill = col3, color = col3, alpha = 0.8) +\n  labs(x = \"Bill length (mm)\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        axis.ticks = element_blank(),\n        text = element_text(family = \"Lato\")) \n\ngentoo_qq <- ggplot(data = gentoo, aes(sample = bill_length_mm)) +\n  stat_qq_line(linewidth = 1) +\n  stat_qq(col = col3) +\n  labs(x = \"Theoretical\", y = \"Sample\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        axis.ticks = element_blank(),\n        text = element_text(family = \"Lato\")) \n\n\n(adelie_hist + adelie_qq) / (chinstrap_hist + chinstrap_qq) / (gentoo_hist + gentoo_qq)\n\nWarning: Removed 1 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_qq_line()`).\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_qq()`).\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_qq_line()`).\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_qq()`).\n\n\n\n\nshapiro.test(gentoo$bill_length_mm)\n\n\n    Shapiro-Wilk normality test\n\ndata:  gentoo$bill_length_mm\nW = 0.97272, p-value = 0.01349\n\nleveneTest(bill_length_mm ~ species, data = penguins)\n\nLevene's Test for Homogeneity of Variance (center = median)\n       Df F value Pr(>F)\ngroup   2  2.2425 0.1078\n      339               \n\npenguins_anova <- aov(bill_length_mm ~ species, data = penguins)\npenguins_anova\n\nCall:\n   aov(formula = bill_length_mm ~ species, data = penguins)\n\nTerms:\n                 species Residuals\nSum of Squares  7194.317  2969.888\nDeg. of Freedom        2       339\n\nResidual standard error: 2.959853\nEstimated effects may be unbalanced\n2 observations deleted due to missingness\n\nsummary(penguins_anova)\n\n             Df Sum Sq Mean Sq F value Pr(>F)    \nspecies       2   7194    3597   410.6 <2e-16 ***\nResiduals   339   2970       9                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n2 observations deleted due to missingness\n\nTukeyHSD(penguins_anova)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = bill_length_mm ~ species, data = penguins)\n\n$species\n                      diff       lwr        upr     p adj\nChinstrap-Adelie 10.042433  9.024859 11.0600064 0.0000000\nGentoo-Adelie     8.713487  7.867194  9.5597807 0.0000000\nGentoo-Chinstrap -1.328945 -2.381868 -0.2760231 0.0088993"
  },
  {
    "objectID": "lecture/lecture-06_2023-05-08.html#anova-information",
    "href": "lecture/lecture-06_2023-05-08.html#anova-information",
    "title": "Lecture 06 figures",
    "section": "ANOVA information",
    "text": "ANOVA information\n\nSum of squares\n\namong groups\n\\[\n\\sum_{i=1}^{k}\\sum_{j=1}^{n}(\\bar{x}_i - \\bar{x})^2\n\\]\n\n\nwithin groups\n\\[\n\\sum_{i=1}^{k}\\sum_{j=1}^{n}({x}_{ij} - \\bar{x}_i)^2\n\\]\n\n\ntotal\n\\[\n\\sum_{i=1}^{k}\\sum_{j=1}^{n}({x}_{ij} - \\bar{x})^2\n\\]\n\n\n\nMean squares\n\namong groups\n\\[\n\\frac{SS_{among\\;group}}{k-1}\n\\] #### within group\n\\[\n\\frac{SS_{within\\;group}}{n-k}\n\\] #### total\n\\[\n\\frac{SS_{total}}{kn-1}\n\\]\n\n\n\nF-ratio\n\\[\n\\frac{MS_{among\\;group}}{MS_{within\\;group}}\n\\]"
  },
  {
    "objectID": "lecture/lecture-06_2023-05-08.html#penguins-visualization",
    "href": "lecture/lecture-06_2023-05-08.html#penguins-visualization",
    "title": "Lecture 06 figures",
    "section": "penguins visualization",
    "text": "penguins visualization\n\nggplot(data = penguins, aes(x = species, y = bill_length_mm, fill = species)) +\n  geom_violin(alpha = 0.6) +\n  geom_boxplot(width = 0.2) +\n  scale_fill_manual(values = c(col1, col2, col3)) +\n  labs(x = \"Species\", y = \"Bill length (mm)\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"),\n        legend.position = \"none\") \n\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "lecture/lecture-06_2023-05-08.html#test-statistic-1",
    "href": "lecture/lecture-06_2023-05-08.html#test-statistic-1",
    "title": "Lecture 06 figures",
    "section": "test statistic",
    "text": "test statistic\n\\[\nH = \\frac{12}{n(n+1)}\\sum_{i = 1}^{k}\\frac{R^2_i}{n_i}-3(n+1)\n\\]"
  },
  {
    "objectID": "lecture/lecture-06_2023-05-08.html#eta-squared",
    "href": "lecture/lecture-06_2023-05-08.html#eta-squared",
    "title": "Lecture 06 figures",
    "section": "eta squared",
    "text": "eta squared\n\\[\n\\eta^2 = \\frac{H - k + 1}{n - k}\n\\]"
  },
  {
    "objectID": "lecture/lecture-03_2023-04-17.html",
    "href": "lecture/lecture-03_2023-04-17.html",
    "title": "Lecture 03 figures",
    "section": "",
    "text": "1. 68-95-99.7 rule\n\nlabels <- c(\n  \"\", \"\\U03BC - 3\\U03C3\", \"\\U03BC - 2\\U03C3\", \"\\U03BC - \\U03C3\", \"\\U03BC\", \"\\U03BC + \\U03C3\", \"\\U03BC + 2\\U03C3\", \"\\U03BC + 3\\U03C3\", \"\"\n)\n\nggplot(data.frame(x = -4:4), aes(x)) +\n  geom_linerange(x = 1, ymin = 0, ymax = 0.24) +\n  geom_linerange(x = -1, ymin = 0, ymax = 0.24) +\n  geom_linerange(x = 2, ymin = 0, ymax = 0.055) +\n  geom_linerange(x = -2, ymin = 0, ymax = 0.055) +\n  geom_linerange(x = 3, ymin = 0, ymax = 0.005) +\n  geom_linerange(x = -3, ymin = 0, ymax = 0.005) +\n  geom_linerange(x = 0, ymin = 0, ymax = 0.399) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1.5, color = \"darkorange\") +\n  scale_x_continuous(labels = labels, breaks = seq(-4, 4, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.41)) +\n  labs(x = \"\") +\n  theme_classic() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 22),\n        axis.line.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank()) \n\n\n\n\n\n\n2. central limit theorem\n\n# randomly select 10000 numbers from a uniform distribution for the population\nuniform <- runif(10000, min = 2, max = 8)\n\n# make a histogram for the population\nuniformdf <- as.data.frame(uniform)\n\nggplot(uniformdf, aes(x = uniform)) +\n  geom_histogram(breaks = seq(2, 8, length.out = 41), fill = \"firebrick\", alpha = 0.7, color = \"firebrick\") +\n  geom_vline(xintercept = mean(uniform), linewidth = 2) +\n  annotate(\"text\", x = 4, y = 290, label = \"mean = 4.967\", size = 10) +\n  scale_x_continuous(breaks = seq(from = 2, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 305)) +\n  labs(x = \"Continuous value\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18))\n\n\n\n\n\n# for() loop to \nstore2 <- c()\nstore5 <- c()\nstore15 <- c()\nstore30 <- c()\nstore50 <- c()\n\nfor(i in 1:100) {\n  \n  store2[i] <- mean(sample(uniform, 2, replace = FALSE))\n\n}\n\n\nfor(i in 1:100) {\n  \n  store5[i] <- mean(sample(uniform, 5, replace = FALSE))\n\n}\nfor(i in 1:100) {\n  \n  store15[i] <- mean(sample(uniform, 15, replace = FALSE))\n\n}\n\nfor(i in 1:100) {\n  \n  store30[i] <- mean(sample(uniform, 30, replace = FALSE))\n\n}\n\nfor(i in 1:100) {\n  \n  store50[i] <- mean(sample(uniform, 50, replace = FALSE))\n\n}\n\ndf <- cbind(store2, store5, store15, store30, store50) %>% \n  as.data.frame()\n  \nggplot(df) +\n  geom_histogram(aes(x = store2), bins = 10, alpha = 0.7, fill = \"chocolate1\", color = \"chocolate1\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store2)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n\n\n\nggplot(df) +\n  geom_histogram(aes(x = store5), bins = 10, alpha = 0.7, fill = \"blue3\", color = \"blue3\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store5)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n\n\n\nggplot(df) +\n  geom_histogram(aes(x = store15), bins = 12, alpha = 0.7, fill = \"darkorchid4\", color = \"darkorchid4\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store15)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n\n\n\nggplot(df) +\n  geom_histogram(aes(x = store30), bins = 12, alpha = 0.7, fill = \"lightseagreen\", color = \"lightseagreen\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store30)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n\n\n\nggplot(df) +\n  geom_histogram(aes(x = store50), bins = 12, alpha = 0.7, fill = \"violetred3\", color = \"violetred3\") +\n  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = mean(store50)) +\n  geom_vline(xintercept = mean(uniform), color = \"red\") +\n  labs(x = \"Sample means\", y = \"Count\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), \"cm\"))\n\n\n\n\n\n\n3. z- vs t-distribution\n\nggplot(data.frame(x = -5:5), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1, color = \"darkorange\") +\n  annotate(\"text\", x = 2.5, y = 0.4, label = \"normal\", color = \"darkorange\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#856F33\") +\n  annotate(\"text\", x = 3, y = 0.32, label = \"t-distribution (small n)\", color = \"#856F33\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 10), linewidth = 1, color = \"#56E9E7\") +\n  annotate(\"text\", x = 3, y = 0.37, label = \"t-distribution (large n)\", color = \"#56E9E7\", size = 6) +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n3. math notation\n\\[\nSE_{\\bar{x}} = \\frac{s}{\\sqrt{n}}\n\\]\n\n\n4. qqplot examples\n\nas_tibble(nhtemp) %>% \n  ggplot(aes(x = x)) +\n  geom_histogram(breaks = seq(47, 55, length.out = 9), fill = \"turquoise3\", color = \"#000000\") +\n  scale_x_continuous(breaks = seq(47, 55, length.out = 9), expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 23)) +\n  theme_classic() +\n  labs(x = \"Bins\", y = \"Count\") +\n    theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"),\n        plot.margin = unit(c(0.1, 1, 0.1, 0.1), \"cm\")) \n\n\n\nggplot(as_tibble(nhtemp)) +\n  stat_qq(aes(sample = x), color = \"turquoise3\", size = 3) +\n  theme_classic() +\n  labs(x = \"Theoretical\", y = \"Sample\") +\n      theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"),\n        plot.margin = unit(c(0.1, 1, 0.1, 0.1), \"cm\")) \n\nDon't know how to automatically pick scale for object of type <ts>. Defaulting\nto continuous.\n\n\n\n\n\n\nas_tibble(sunspots) %>% \n  ggplot(aes(x = x)) +\n  geom_histogram(breaks = round(seq(0, 260, length.out = 30)), fill = \"tomato2\", color = \"#000000\") +\n  scale_x_continuous(breaks = round(seq(0, 260, length.out = 30)), expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 480)) +\n  theme_classic() +\n  labs(x = \"Bins\", y = \"Count\") +\n    theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"),\n        plot.margin = unit(c(0.1, 1, 0.1, 0.1), \"cm\")) \n\n\n\nggplot(as_tibble(sunspots)) +\n  stat_qq(aes(sample = x), color = \"tomato2\", size = 3) +\n  theme_classic() +\n  labs(x = \"Theoretical\", y = \"Sample\") +\n      theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"),\n        plot.margin = unit(c(0.1, 1, 0.1, 0.1), \"cm\")) \n\nDon't know how to automatically pick scale for object of type <ts>. Defaulting\nto continuous.\n\n\n\n\n\n\n\n\n\nCitationBibTeX citation:@online{bui2023,\n  author = {An Bui},\n  editor = {},\n  title = {Lecture 03 Figures},\n  date = {2023-04-17},\n  url = {https://an-bui.github.io/ES-193DS-W23/lecture/lecture-03_2023-04-17.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAn Bui. 2023. “Lecture 03 Figures.” April 17, 2023. https://an-bui.github.io/ES-193DS-W23/lecture/lecture-03_2023-04-17.html."
  },
  {
    "objectID": "lecture/lecture-02_2023-04-10.html",
    "href": "lecture/lecture-02_2023-04-10.html",
    "title": "Lecture 02 figures",
    "section": "",
    "text": "1. probability distribution\n\nset.seed(1)\nnormdist <- rnorm(n = 100000, mean = 0, sd = 1) %>% \n  as_tibble(rownames = \"x\")\n\nshowtext_auto()\nggplot(normdist) +\n  geom_histogram(aes(x = value, after_stat(density)), fill = \"white\", color = \"black\", bins = 100) +\n  stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = \"blue\", linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n2. normal distribution\n\nggplot(data.frame(x = -10:25), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1, color = \"darkorange\") +\n  annotate(\"text\", x = 4.5, y = 0.4, label = \"\\U03BC = 0, \\U03C3 = 1\", color = \"darkorange\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 15, sd = 3), linewidth = 1, color = \"blue\") +\n  annotate(\"text\", x = 16, y = 0.15, label = \"\\U03BC = 15, \\U03C3 = 3\", color = \"blue\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 5, sd = 5), linewidth = 1, color = \"darkgreen\") +\n  annotate(\"text\", x = 7, y = 0.1, label = \"\\U03BC = 5, \\U03C3 = 5\", color = \"darkgreen\", size = 6) +\n  scale_x_continuous(breaks = seq(-10, 25, 5)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n3. Student’s t distribution\n\nggplot(data.frame(x = -10:10), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#856F33\") +\n  annotate(\"text\", x = 3.5, y = 0.3, label = \"\\U03BD = 1\", color = \"#856F33\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 3), linewidth = 1, color = \"#E6821C\") + \n  annotate(\"text\", x = 3.5, y = 0.35, label = \"\\U03BD = 3\", color = \"#E6821C\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 5), linewidth = 1, color = \"#56E9E7\") +\n  annotate(\"text\", x = 3.5, y = 0.37, label = \"\\U03BD = 5\", color = \"#56E9E7\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 100), linewidth = 1, color = \"#04B37F\") +\n    annotate(\"text\", x = 3.5, y = 0.4, label = \"\\U03BD = 100\", color = \"#04B37F\", size = 6) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n4. Uniform distribution\n\nggplot(data.frame(x = 0:10), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dunif, args = list(min = 2, max = 8), linewidth = 1, color = \"firebrick4\") +\n  annotate(\"text\", x = 2, y = 0.172, label = \"a = 2\", color = \"firebrick4\", size = 6) + \n  annotate(\"text\", x = 8, y = 0.172, label = \"b = 8\", color = \"firebrick4\", size = 6) + \n  scale_x_continuous(breaks = seq(0, 10, 2)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(-0.001, 0.18)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n5. Binomial distribution\n\nggplot(data.frame(x = 1:20), aes(x)) +\n  stat_function(geom = \"line\", n = 20, fun = dbinom, args = list(size = 20, p = 0.1), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dbinom, args = list(size = 20, p = 0.1), color = \"#6D9929\", size = 3) +\n  annotate(\"text\", x = 5.5, y = 0.29, label = \"n = 20, p = 0.1\", color = \"#6D9929\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dbinom, args = list(size = 20, p = 0.4), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dbinom, args = list(size = 20, p = 0.4), color = \"#4A76E5\", size = 3) +\n  annotate(\"text\", x = 8, y = 0.2, label = \"n = 20, p = 0.4\", color = \"#4A76E5\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dbinom, args = list(size = 20, p = 0.7), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dbinom, args = list(size = 20, p = 0.7), color = \"#E67960\", size = 3) +\n  annotate(\"text\", x = 15, y = 0.21, label = \"n = 20, p = 0.7\", color = \"#E67960\", size = 6) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  labs(x = \"Number of successes\", y = \"Mass\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n6. Poisson distribution\n\nggplot(data.frame(x = 1:20), aes(x)) +\n  stat_function(geom = \"line\", n = 20, fun = dpois, args = list(lambda = 1), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dpois, args = list(lambda = 1), color = \"coral\", size = 4) +\n  annotate(\"text\", x = 3, y = 0.37, label = \"\\U03BB = 1\", color = \"coral\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dpois, args = list(lambda = 4), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dpois, args = list(lambda = 4), color = \"darkgreen\", size = 4) +\n  annotate(\"text\", x = 6, y = 0.2, label = \"\\U03BB = 4\", color = \"darkgreen\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dpois, args = list(lambda = 10), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dpois, args = list(lambda = 10), color = \"turquoise\", size = 4) +\n  annotate(\"text\", x = 14, y = 0.12, label = \"\\U03BB = 10\", color = \"turquoise\", size = 6) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Discrete value\", y = \"Mass\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\nshowtext_auto(FALSE)\n\n\n\n\n\nCitationBibTeX citation:@online{bui2023,\n  author = {An Bui},\n  editor = {},\n  title = {Lecture 02 Figures},\n  date = {2023-04-10},\n  url = {https://an-bui.github.io/ES-193DS-W23/lecture/lecture-02_2023-04-10.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAn Bui. 2023. “Lecture 02 Figures.” April 10, 2023. https://an-bui.github.io/ES-193DS-W23/lecture/lecture-02_2023-04-10.html."
  },
  {
    "objectID": "workshop/workshop-07_2023-05-17.html",
    "href": "workshop/workshop-07_2023-05-17.html",
    "title": "Coding workshop: Week 7",
    "section": "",
    "text": "# should haves\nlibrary(tidyverse)\nlibrary(here)\nlibrary(lterdatasampler)\n\n# would be nice to have\nlibrary(performance)\nlibrary(broom)\nlibrary(flextable)\nlibrary(ggeffects)\nlibrary(car)"
  },
  {
    "objectID": "workshop/workshop-07_2023-05-17.html#a.-model-predictions",
    "href": "workshop/workshop-07_2023-05-17.html#a.-model-predictions",
    "title": "Coding workshop: Week 7",
    "section": "a. model predictions",
    "text": "a. model predictions\n\n# extract model predictions using ggpredict\npredictions <- ggpredict(modelobject, terms = \"stem_length\")\n\npredictions\n\n# Predicted values of stem_dry_mass\n\nstem_length | Predicted |       95% CI\n--------------------------------------\n         50 |      0.02 | [0.01, 0.02]\n         60 |      0.02 | [0.02, 0.02]\n         70 |      0.02 | [0.02, 0.02]\n         80 |      0.02 | [0.02, 0.02]\n         90 |      0.02 | [0.02, 0.03]\n        100 |      0.03 | [0.02, 0.03]\n        110 |      0.03 | [0.03, 0.03]\n        120 |      0.03 | [0.03, 0.03]\n\n\n\nplot_predictions <- ggplot(data = maples_data, \n                           aes(x = stem_length, y = stem_dry_mass)) +\n  # first plot the underlying data from maples_data\n  geom_point() +\n  # then plot the predictions\n  geom_line(data = predictions, \n            aes(x = x, y = predicted), \n            color = \"blue\", linewidth = 1) +\n  # then plot the 95% confidence interval from ggpredict\n  geom_ribbon(data = predictions, \n              aes(x = x, y = predicted, ymin = conf.low, ymax = conf.high), \n              alpha = 0.2) +\n  # theme and meaningful labels\n  theme_bw() +\n  labs(x = \"Stem length (mm)\",\n       y = \"Stem dry mass (g)\")\n\nplot_predictions"
  },
  {
    "objectID": "workshop/workshop-07_2023-05-17.html#b.-summary-tables",
    "href": "workshop/workshop-07_2023-05-17.html#b.-summary-tables",
    "title": "Coding workshop: Week 7",
    "section": "b. summary tables",
    "text": "b. summary tables\n\n# store the model summary as an object\nmodel_summary <- summary(modelobject)\n\n# store the ANOVA table as an object\n# anova(): special function to get analysis of variance tables for a model\nmodel_squares <- anova(modelobject)\n\nmodel_summary\n\n\nCall:\nlm(formula = stem_dry_mass ~ stem_length, data = maples_data)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-0.0111253 -0.0039117 -0.0009091  0.0040911  0.0164587 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 7.003e-03  3.212e-03   2.180   0.0312 *  \nstem_length 1.958e-04  3.909e-05   5.009 1.94e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.005944 on 118 degrees of freedom\nMultiple R-squared:  0.1753,    Adjusted R-squared:  0.1683 \nF-statistic: 25.09 on 1 and 118 DF,  p-value: 1.94e-06\n\nmodel_squares\n\nAnalysis of Variance Table\n\nResponse: stem_dry_mass\n             Df    Sum Sq    Mean Sq F value   Pr(>F)    \nstem_length   1 0.0008864 0.00088642  25.089 1.94e-06 ***\nResiduals   118 0.0041691 0.00003533                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nmodel summary table:\n\n# don't name this chunk! some intricacies with Quarto: do not name chunks with tables in them\n\nmodel_squares_table <- tidy(model_squares) %>% \n  # round the sum of squares and mean squares columns to have 5 digits (could be less)\n  mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>% \n  # round the F-statistic to have 1 digit\n  mutate(statistic = round(statistic, digits = 1)) %>% \n  # replace the very very very small p value with < 0.001\n  mutate(p.value = case_when(\n    p.value < 0.001 ~ \"< 0.001\"\n  )) %>% \n  # rename the stem_length cell to be meaningful\n  mutate(term = case_when(\n    term == \"stem_length\" ~ \"Stem length (mm)\",\n    TRUE ~ term\n  )) %>% \n  # make the data frame a flextable object\n  flextable() %>% \n  # change the header labels to be meaningful\n  set_header_labels(df = \"Degrees of Freedom\", \n                    sumsq = \"Sum of squares\",\n                    meansq = \"Mean squares\",\n                    statistic = \"F-statistic\",\n                    p.value = \"p-value\")\n\nmodel_squares_table\n\n\ntermDegrees of FreedomSum of squaresMean squaresF-statisticp-valueStem length (mm)10.000890.0008925.1< 0.001Residuals1180.004170.00004"
  },
  {
    "objectID": "workshop/workshop-03_2023-04-19.html",
    "href": "workshop/workshop-03_2023-04-19.html",
    "title": "Coding workshop: Week 3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "workshop/workshop-03_2023-04-19.html#a.-review",
    "href": "workshop/workshop-03_2023-04-19.html#a.-review",
    "title": "Coding workshop: Week 3",
    "section": "a. Review",
    "text": "a. Review\nFind the mean and standard deviation flipper length and bill length for each penguin species on Biscoe and Dream islands.\n\npenguin_subset <- penguins %>% \n  group_by(island, species) %>% \n  filter(island %in% c(\"Biscoe\", \"Dream\")) %>% \n  summarize(mean_flip = mean(flipper_length_mm, na.rm = TRUE),\n            sd_flip = sd(flipper_length_mm, na.rm = TRUE),\n            mean_bill = mean(bill_length_mm, na.rm = TRUE),\n            sd_bill = sd(bill_length_mm, na.rm = TRUE))\n\n`summarise()` has grouped output by 'island'. You can override using the\n`.groups` argument.\n\npenguin_subset\n\n# A tibble: 4 × 6\n# Groups:   island [2]\n  island species   mean_flip sd_flip mean_bill sd_bill\n  <fct>  <fct>         <dbl>   <dbl>     <dbl>   <dbl>\n1 Biscoe Adelie         189.    6.73      39.0    2.48\n2 Biscoe Gentoo         217.    6.48      47.5    3.08\n3 Dream  Adelie         190.    6.59      38.5    2.47\n4 Dream  Chinstrap      196.    7.13      48.8    3.34"
  },
  {
    "objectID": "workshop/workshop-03_2023-04-19.html#b.-new-functions-count-mutate-case_when",
    "href": "workshop/workshop-03_2023-04-19.html#b.-new-functions-count-mutate-case_when",
    "title": "Coding workshop: Week 3",
    "section": "b. New functions: count(), mutate(), case_when()",
    "text": "b. New functions: count(), mutate(), case_when()\nMore functions to add to your tidyverse toolkit:\n\ncount()\n\n# new object names penguin_count from penguins\npenguin_count <- penguins %>% \n  # group by island and species\n  group_by(island, species) %>% \n  # count function counts number of rows (i.e. observations)\n  count()\n\npenguin_count\n\n# A tibble: 5 × 3\n# Groups:   island, species [5]\n  island    species       n\n  <fct>     <fct>     <int>\n1 Biscoe    Adelie       44\n2 Biscoe    Gentoo      124\n3 Dream     Adelie       56\n4 Dream     Chinstrap    68\n5 Torgersen Adelie       52\n\n\n\n\nmutate() + case_when()\nFirst, remember how we calculated mean body mass across penguin species last week:\n\npenguins %>% \n  group_by(species) %>% \n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  species   mean_body_mass\n  <fct>              <dbl>\n1 Adelie             3701.\n2 Chinstrap          3733.\n3 Gentoo             5076.\n\n\nmutate() creates a new column, while case_when() within mutate() allows you to tell R, “in the case when…”. For example:\n\n# create new object called penguin_newcol from penguins\npenguin_newcol <- penguins %>% \n  # group by species\n  group_by(species) %>% \n  # make a new column called body_mass_cat\n  mutate(body_mass_cat = case_when(\n    # in the case when year matches 2007, put \"first\"\n    year == 2007 ~ \"first\", \n    # in the case when year matches 2008, put \"second\"\n    year == 2008 ~ \"second\",\n    # in the case when year matches 2009, put \"third\"\n    year == 2009 ~ \"third\"\n  ))\n\npenguin_newcol\n\n# A tibble: 344 × 9\n# Groups:   species [3]\n   species island    bill_length_mm bill_d…¹ flipp…² body_…³ sex    year body_…⁴\n   <fct>   <fct>              <dbl>    <dbl>   <int>   <int> <fct> <int> <chr>  \n 1 Adelie  Torgersen           39.1     18.7     181    3750 male   2007 first  \n 2 Adelie  Torgersen           39.5     17.4     186    3800 fema…  2007 first  \n 3 Adelie  Torgersen           40.3     18       195    3250 fema…  2007 first  \n 4 Adelie  Torgersen           NA       NA        NA      NA <NA>   2007 first  \n 5 Adelie  Torgersen           36.7     19.3     193    3450 fema…  2007 first  \n 6 Adelie  Torgersen           39.3     20.6     190    3650 male   2007 first  \n 7 Adelie  Torgersen           38.9     17.8     181    3625 fema…  2007 first  \n 8 Adelie  Torgersen           39.2     19.6     195    4675 male   2007 first  \n 9 Adelie  Torgersen           34.1     18.1     193    3475 <NA>   2007 first  \n10 Adelie  Torgersen           42       20.2     190    4250 <NA>   2007 first  \n# … with 334 more rows, and abbreviated variable names ¹​bill_depth_mm,\n#   ²​flipper_length_mm, ³​body_mass_g, ⁴​body_mass_cat"
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html",
    "href": "workshop/workshop-04_2023-04-26.html",
    "title": "Coding workshop: Week 4",
    "section": "",
    "text": "library(tidyverse)\nlibrary(lterdatasampler)"
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html#a.-initial-wrangling",
    "href": "workshop/workshop-04_2023-04-26.html#a.-initial-wrangling",
    "title": "Coding workshop: Week 4",
    "section": "a. initial wrangling",
    "text": "a. initial wrangling\n\nmaples_2003 <- hbr_maples %>% \n  filter(year == 2003) %>% \n  mutate(watershed = case_when(\n    watershed == \"Reference\" ~ \"Reference\", \n    watershed == \"W1\" ~ \"Calcium-treated\"\n  ))\n\nhead(maples_2003, 5)\n\n# A tibble: 5 × 11\n   year watershed eleva…¹ trans…² sample stem_…³ leaf1…⁴ leaf2…⁵ leaf_…⁶ stem_…⁷\n  <dbl> <chr>     <fct>   <fct>   <fct>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1  2003 Reference Low     R1      1         86.9   13.8    12.1   0.0453  0.03  \n2  2003 Reference Low     R1      2        114     14.6    15.3   0.0476  0.0338\n3  2003 Reference Low     R1      3         83.5   12.5     9.73  0.0423  0.0248\n4  2003 Reference Low     R1      4         68.1    9.97   10.1   0.0397  0.0194\n5  2003 Reference Low     R1      5         72.1    6.84    5.48  0.0204  0.018 \n# … with 1 more variable: corrected_leaf_area <dbl>, and abbreviated variable\n#   names ¹​elevation, ²​transect, ³​stem_length, ⁴​leaf1area, ⁵​leaf2area,\n#   ⁶​leaf_dry_mass, ⁷​stem_dry_mass"
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html#b.-summary-statistics",
    "href": "workshop/workshop-04_2023-04-26.html#b.-summary-statistics",
    "title": "Coding workshop: Week 4",
    "section": "b. summary statistics",
    "text": "b. summary statistics\nRemember, we’re interested in stem lengths in 2003 between reference and calcium-treated watersheds. What groups would be useful if that was the case?\n\nlengths_2003_summary <- maples_2003 %>% \n  group_by(watershed) %>% \n  summarize(mean_l = mean(stem_length),\n            sd_l = sd(stem_length),\n            var_l = var(stem_length),\n            count_l = length(stem_length),\n            se_l = sd_l/sqrt(count_l),\n            margin_l = qt(0.95, df = count_l - 1) * se_l) \n\nlengths_2003_summary\n\n# A tibble: 2 × 7\n  watershed       mean_l  sd_l var_l count_l  se_l margin_l\n  <chr>            <dbl> <dbl> <dbl>   <int> <dbl>    <dbl>\n1 Calcium-treated   87.9  14.3  206.     120  1.31     2.17\n2 Reference         81.0  13.9  194.     120  1.27     2.11\n\n# not getting the digits after the decimal point that you're expecting?\n# try `as.data.frame()` piped in after the summarize call."
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html#c.-check-for-normally-distributed-data",
    "href": "workshop/workshop-04_2023-04-26.html#c.-check-for-normally-distributed-data",
    "title": "Coding workshop: Week 4",
    "section": "c. check for normally distributed data",
    "text": "c. check for normally distributed data\n\nggplot(data = maples_2003) +\n  stat_qq(aes(sample = stem_length)) +\n  stat_qq_line(aes(sample = stem_length), color = \"red\") +\n  facet_wrap(~ watershed)"
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html#c.-check-for-equal-variances",
    "href": "workshop/workshop-04_2023-04-26.html#c.-check-for-equal-variances",
    "title": "Coding workshop: Week 4",
    "section": "c. Check for equal variances",
    "text": "c. Check for equal variances\nWith an F-test, you can ask: are the sample variances between my two groups equal?\nThe assumption is that your data are normally distributed.\n\\[\nH0: s^2_1 = s^2_2\nH1: s^2_1 \\neq s^2_2\n\\]\n\nlength_var <- var.test(stem_length ~ watershed, data = maples_2003)\n\nlength_var\n\n\n    F test to compare two variances\n\ndata:  stem_length by watershed\nF = 1.0587, num df = 119, denom df = 119, p-value = 0.7563\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.7378244 1.5190473\nsample estimates:\nratio of variances \n          1.058674"
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html#c.-decide-on-a-critical-value",
    "href": "workshop/workshop-04_2023-04-26.html#c.-decide-on-a-critical-value",
    "title": "Coding workshop: Week 4",
    "section": "c. decide on a critical value",
    "text": "c. decide on a critical value\nTwo-tailed with significance level \\(\\alpha\\) = 0.05:\n\nqt(p = .05/2, df = 119)\n\n[1] -1.9801\n\n\nIf your test statistic is less than -1.98 or greater than 1.98, then you have evidence to reject the null hypothesis."
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html#d.-do-a-t-test",
    "href": "workshop/workshop-04_2023-04-26.html#d.-do-a-t-test",
    "title": "Coding workshop: Week 4",
    "section": "d. Do a t-test",
    "text": "d. Do a t-test\n\nlength_ttest <- t.test(stem_length ~ watershed, data = maples_2003, var.equal = TRUE)\n\nlength_ttest\n\n\n    Two Sample t-test\n\ndata:  stem_length by watershed\nt = 3.7797, df = 238, p-value = 0.0001985\nalternative hypothesis: true difference in means between group Calcium-treated and group Reference is not equal to 0\n95 percent confidence interval:\n  3.304134 10.497532\nsample estimates:\nmean in group Calcium-treated       mean in group Reference \n                     87.88583                      80.98500"
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html#e.-calculate-cohens-d-effect-size",
    "href": "workshop/workshop-04_2023-04-26.html#e.-calculate-cohens-d-effect-size",
    "title": "Coding workshop: Week 4",
    "section": "e. Calculate Cohen’s d effect size",
    "text": "e. Calculate Cohen’s d effect size\nCohen’s d is a measure of how many standard deviations apart the two sample means are.\n\\[\nCohen's d = \\frac{\\bar{x_1} - \\bar{x_2}}{\\sqrt{(s^2_1 + s^2_2)/2}}\n\\]\nNote that you are using sample means in the numerator and sample variances in the denominator.\nWe can calculate this by hand (use install.packages(\"data.table\") in the console before running the chunk below):\n\nlibrary(data.table)\n\n# create a data frame in data table format from lengths_2003_summary\nlengths_dt <- setDT(lengths_2003_summary)\n\n# pull out mean and variance values from the data table \nmean_ref_2003 <- lengths_dt[watershed == \"Reference\", mean_l]\nmean_w1_2003 <- lengths_dt[watershed == \"Calcium-treated\", mean_l]\nvar_ref_2003 <- lengths_dt[watershed == \"Reference\", var_l]\nvar_w1_2003 <- lengths_dt[watershed == \"Calcium-treated\", var_l]\n\n# calculate Cohen's d\nd_byhand <- (mean_w1_2003 - mean_ref_2003) / sqrt((var_w1_2003 + var_ref_2003)/2)\nd_byhand\n\n[1] 0.4879597\n\n\nOr using a function in a package:\nUse install.packages(\"effsize\") in the console before running the chunk below.\n\nlibrary(effsize)\n\nd_effsize <- cohen.d(stem_length ~ watershed, data = maples_2003)\n\nCompare the two calculations:\n\nd_byhand\n\n[1] 0.4879597\n\nd_effsize\n\n\nCohen's d\n\nd estimate: 0.4879597 (small)\n95 percent confidence interval:\n    lower     upper \n0.2298792 0.7460402"
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html#make-a-plot",
    "href": "workshop/workshop-04_2023-04-26.html#make-a-plot",
    "title": "Coding workshop: Week 4",
    "section": "make a plot",
    "text": "make a plot\n\nggplot(data = lengths_2003_summary, aes(x = watershed, y = mean_l, color = watershed)) +\n  geom_point(size = 3) +\n  geom_linerange(aes(ymin = mean_l - margin_l, ymax = mean_l + margin_l), linewidth = 1) +\n  geom_jitter(data = maples_2003, aes(x = watershed, y = stem_length), alpha = 0.3) +\n  scale_color_manual(values = c(\"Reference\" = \"#E57B33\", \"Calcium-treated\" = \"#039199\")) +\n  labs(x = \"Watershed\", y = \"Stem length (mm)\") +\n  theme_classic() +\n  theme(legend.position = \"none\",\n        text = element_text(family = \"Times New Roman\"),\n        axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        plot.caption = element_text(hjust = 0),\n        plot.caption.position = \"plot\",\n        plot.title.position = \"plot\")"
  },
  {
    "objectID": "workshop/workshop-04_2023-04-26.html#f.-communicating-about-the-results-of-a-t-test",
    "href": "workshop/workshop-04_2023-04-26.html#f.-communicating-about-the-results-of-a-t-test",
    "title": "Coding workshop: Week 4",
    "section": "f. Communicating about the results of a t-test",
    "text": "f. Communicating about the results of a t-test\n\nfigure caption\nFigure 1. Sugar maple stem lengths in calcium-treated and reference watersheds. Stem lengths (mm) for calcium-treated (turquoise) and reference (orange) watersheds from Hubbard Brook Long-term Ecological Research site (HBR LTER). Dark points represent mean stem length and vertical lines represent confidence intervals with a 95% confidence level. Transparent points represent stem lengths.\n\n\nin-text references\nThere is a moderate (Cohen’s d = 0.49) but significant effect of calcium treatment on sugar maple stem lengths (Student’s t-test, t(238) = 3.78, p < 0.001, \\(\\alpha\\) = 0.05). On average, sugar maple stem lengths in calcium-treated watersheds were 6.9 mm longer than those in reference watersheds (95% confidence interval: [3.3, 10.5] mm, Figure 1).\n\n\nbonus in-text references, using in-line R\nWhen rendering your document, compare the text above with the text below. Are there any differences?\nThere is a moderate (Cohen’s d = 0.49) but significant effect of calcium treatment on sugar maple stem lengths (Student’s t-test, t(238) = 3.8, p < 0.001, \\(\\alpha\\) = 0.05). On average, sugar maple stem lengths in calcium-treated watersheds were 6.9 mm longer than those in reference watersheds (CI = [3.3, 10.5] mm, Figure 1)."
  },
  {
    "objectID": "workshop/workshop-02_2023-04-12.html",
    "href": "workshop/workshop-02_2023-04-12.html",
    "title": "Coding workshop: Week 2",
    "section": "",
    "text": "This is a Quarto document. It allows you to write in plain text and code at the same time. If you have used RMarkdown before, this is a similar concept.\n\n\nYou can format your document with headers, italics and bold text, and color.\nYou can insert code chunks using Command (or Control) + Shift + I.\n\n# this is a code chunk!\n\nYou can also adjust code chunk options using the options listed here inside of the {r} curly brackets. For example, if I want to run code but not display it, the option is echo = FALSE.\n\n\n[1] 11\n\n\nIn contrast, if I want to display code but not run it, the option is eval = FALSE.\n\n2 + 5\n\nPutting text and code together makes writing documents very streamlined. You can do all your analysis and write about it in the same document.\n\n\n\nThe right-pointing arrow at the top of the document labelled “Render” allows you to put all the text and code together into one clean document.\nFor this class, homework assignments will be expected in Quarto Markdown or RMarkdown format submitted in PDF form. This means that you can either 1) render to PDF or 2) render to one of the other formats (e.g. docx or html) and convert it to PDF.\nNote about rendering: if you’re having trouble rendering your document, the error will pop up in the “Background Jobs” tab down below. Similarly to troubleshooting your code when you get error messages while you’re writing, you can be a detective and figure out which line caused the error. Rendering will work best if you make sure your code runs from top to bottom. A good way to check this is to restart your R session, then run each code chunk sequentially."
  },
  {
    "objectID": "workshop/workshop-02_2023-04-12.html#a.-using-ggplot",
    "href": "workshop/workshop-02_2023-04-12.html#a.-using-ggplot",
    "title": "Coding workshop: Week 2",
    "section": "a. Using ggplot",
    "text": "a. Using ggplot\nWe’ll do most of our data visualization using {ggplot2} (also commonly referred to as {ggplot}), which is a {tidyverse} package. Making a plot using {ggplot} takes 3 important parts:\n1. the ggplot() call: you’re telling R that you want to use ggplot on a specific data frame\n2. the aes() call: within the ggplot() call, you’re telling R which columns contain the x- and y- axes\n3. the geom_() call: you’re telling R what kind of plot you want to make."
  },
  {
    "objectID": "workshop/workshop-02_2023-04-12.html#b.-histograms",
    "href": "workshop/workshop-02_2023-04-12.html#b.-histograms",
    "title": "Coding workshop: Week 2",
    "section": "b. histograms",
    "text": "b. histograms\nOne of the first plots you should make when working with a new data set is a histogram. You’ve seen these plots in lecture, so now let’s make them with code.\nThe Rice Rule is one of many rules to figure out how many bins should be in your histogram:\n\\[\nbins = 2n^{1/3}\n\\]\nSo, for example, the penguin data set has 344 observations. Therefore, according to the Rice Rule, you could use around 14 bins.\n\n# step 1. use the ggplot() function call\n# step 2. use the aes() call\nggplot(data = penguins, aes(x = body_mass_g)) +\n  # step 3. specify a geom (geometry)\n  geom_histogram(bins = 14) \n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`)."
  },
  {
    "objectID": "workshop/workshop-02_2023-04-12.html#c.-central-tendency-and-data-spread",
    "href": "workshop/workshop-02_2023-04-12.html#c.-central-tendency-and-data-spread",
    "title": "Coding workshop: Week 2",
    "section": "c. central tendency and data spread",
    "text": "c. central tendency and data spread\nUsually, calculating the central tendency or data spread can only go so far. To communicate effectively, we can represent these two characteristics of our data set visually. There are a few ways to do this:\n- box plot (aka box and whisker plot)\n- violin plot\n- jitter plot\n- points with bars\n- some combination of the above\n- some other form (e.g. beeswarm)\n\ni. box plots\nFor example, let’s make a box plot of body masses for the different penguin species.\n\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nBox plots are the most common way of representing central tendency and spread, but they’re not easy to parse. They usually include 1) the median, 2) the 25th quartile (median of bottom half of dataset), 3) the 75th quartile (median of top half of data set), and 4) the 1.5*inter-quartile range (distance between lower and upper quartiles). If there are any outliers, they’ll be represented as dots.\n\n\nii. violin plots\nViolin plots show a symmetrical shape, and the width is based on the number of points at that particular value.\n\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_violin()\n\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n\n\n\n\n\n\n\niii. jitter plot\nJitter plots are a random smattering of points in a cloud, but the y-axis position corresponds to the real value.\n\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_jitter() \n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\niv. points with bars\nYou can also represent central tendency and spread using a single point to represent the mean and bars to represent standard deviation. We can use the data frame we created above: penguin_summary.\n\nggplot(data = penguin_summary, aes(x = species, y = mean_body_mass)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = mean_body_mass - sd_body_mass, \n                    ymax = mean_body_mass + sd_body_mass))\n\n\n\n\n\n\nv. some combination of the above\nThere are some common combinations of the above plots, for example:\n\nviolin plot with boxplot\n\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_violin() +\n  # width argument controls boxplot width\n  geom_boxplot(width = 0.2)\n\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\n\nboxplot with jittered points\n\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "workshop/workshop-01_2023-04-05.html",
    "href": "workshop/workshop-01_2023-04-05.html",
    "title": "Coding workshop: Week 1",
    "section": "",
    "text": "1. Assigning values to objects\nWe’ll start with some basics. We’ll assign values to objects.\n\n# assign the number 5 to an object called snail_length\nsnail_length <- 5\n\n\n# print snail_length\nsnail_length\n\n[1] 5\n\n\nYou’ll see the output of this in the console, not your script.\nNow that you’ve assigned this value to an object, you can start to work with it. Let’s see what snail_length/2 is.\n\nsnail_length/2\n\n[1] 2.5\n\n\nThis doesn’t change the value of snail_length - check this in the console.\n\nsnail_length\n\n[1] 5\n\n\nYou can save this new variable as another object.\n\nhalf <- snail_length/2\n\n\n\n2. Using functions\nFunctions are where R gets interesting. R allows you to apply functions to do calculations, from simple to complex structures.\nWe can start by calculating the square root of snail_length.\n\nsqrt(snail_length)\n\n[1] 2.236068\n\n\nWe might not want all the digits in that calculation, so we could round it using the round() function.\n\nround(sqrt(snail_length))\n\n[1] 2\n\n\nThis rounds snail_length to 4. However, we want to be a little more precise than that. Check out what round() does in the console by typing ?round.\nLet’s round snail_length to 3 digits instead of the next whole number.\n\nround(sqrt(snail_length), digits = 3)\n\n[1] 2.236\n\n\n\n\n3. Basic sorting and filtering\nNow, let’s try a vector of numbers. Let’s say that we measured a bunch of different fish and recorded their weights in kilograms.\n\nfish_weights <- c(1, 2, 3, 1, 2)\n\nLet’s say “small” fish are any fish that are < 2 kilograms. We want to know the weights of all the “small” fish that we collected.\n\nfish_weights[fish_weights < 2]\n\n[1] 1 1\n\n\nWhat if we want all the “big” fish?\n\nfish_weights[fish_weights > 2]\n\n[1] 3\n\n\n\n\n4. Packages\nPackages (or libraries) have functions that aren’t already built into R.\nYou can install packages in one of two ways. The first (most common) way is to use the functioninstall.packages(). This is for any package that is on CRAN, or the Comprehensive R Archive Network. Try installing the package {tidyverse} using the following command: install.packages(\"tidyverse\").\nNow you have a package installed! But you now need to “load it in” to your environment. Installing a package is like buying a pan - you only need to do it once if you want to cook. However, you still need to put the pan on the stove in order to start cooking.\nYou can load in any package using the function library(). Try loading in the package below.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n\nNothing shows up once you’ve loaded in the package, but now you’re ready to use the functions in it!\n\n\n5. working with data in R\nLater in the quarter, we’ll work with data sets from real examples (i.e. from research). To get acquainted with how to work with data in R, we’ll use some of the built-in examples. Go to the documentation to see the list of data sets that are pre-installed with R. The topics are all over the place, but they are useful for testing things out if the data you have to work with is big and unwieldy.\nOne of the packages that has a cool dataset to test things out with is called {palmerpenguins}. Install it in your console and load it in to your environment.\nWhat is {palmerpenguins}? Read about it here.\nThe first step to using data is looking at it! Use View(penguins) to see what it is.\n(Hint: did that not work? Remember to load in the package before you start using it.)\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\npenguins is a data frame. Data frames have rows and columns, and their cells contain data. In this case, this data frame has 8 columns and 344 rows, which you can see in the visual display.\nFigure out what the columns are by using colnames(penguins).\n\ncolnames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n\n\nWrite out 1) the column name, 2) what type of variable it is, and 3) what data are in them. For example:\n- species: categorical, penguin species\n- island: categorical, islands were penguins were sampled\n- bill_length_mm: continuous, bill length in mm\n- bill_depth_mm: continuous, bill depth in mm\n- flipper_length_mm: continuous, flipper length in mm\n- body_mass_g: continuous, body mass in grams\n- sex: categorical, male or female\n- year: categorical (ordinal), year sampled\nYou can learn about the structure of a data frame by running the function str(). What is the output for that?\n\nstr(penguins)\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\n\nLet’s figure out some basic information about the data set. What’s the longest bill length they measured on a penguin? Save that as an object called long_bill.\n\nlong_bill <- 59.6\n\nWe did that visually, but you can do that in code. The function max() allows you to get the maximum number in a vector, which is a list of numbers. (Note: how would you double check how the function works if you hadn’t used it before?)\n\nmax(penguins$bill_length_mm)\n\n[1] NA\n\n\nHuh. That was weird. We knew the longest bill was 59.6, but why does this say NA?\n\nmax(penguins$bill_length_mm, na.rm = TRUE)\n\n[1] 59.6\n\n\nThat’s a lot better!\nTry finding the minimum bill length, and saving that as an object called short_bill.\n\nmin(penguins$bill_length_mm, na.rm = TRUE)\n\n[1] 32.1\n\n\n\n\n6. data exploration\nLet’s say you think the three different penguin species have different body masses, on average. This is where the {tidyverse} package we were using before comes in handy.\nWe know that there’s a column in the data frame that has species, and another column that has body masses. So if there’s a way we can get all the rows belonging to a species, then take all the numbers for body mass and average them, we can figure out the average body mass for a penguin species in the sample.\nThere are tidyverse functions that can help with that:\n- group_by(): identifying natural groups in the data frame (categorical variables)\n- summarize(): summarizes the data based on what you want\n- %>%: a very!!! useful operator (not a function). This is called a “pipe” and it allows you to string functions together. You’re basically telling R, “… and then”. An example below:\n\n# tell R what data frame you want to use\npenguins %>% \n  # and then, group the data frame by species\n  group_by(species) %>% \n  # and then, summarize: create a new column called `mean_body_mass` from body_mass_g\n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  species   mean_body_mass\n  <fct>              <dbl>\n1 Adelie             3701.\n2 Chinstrap          3733.\n3 Gentoo             5076.\n\n\nTry figuring out what the maximum flipper length is by island.\n\n# tell R that you want to use the data frame penguins\npenguins %>% \n  # and then, group the data frame by island\n  group_by(island) %>% \n  # and then, summarize: create a new column called 'max_flipper_length' from flipper_length_mm\n  summarize(max_flipper_length = max(flipper_length_mm, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  island    max_flipper_length\n  <fct>                  <int>\n1 Biscoe                   231\n2 Dream                    212\n3 Torgersen                210\n\n\nYou can also group by multiple columns.\n\n# use penguins\npenguins %>% \n  # group by island, then species\n  group_by(island, species) %>% \n  # summarize: get max flipper length\n  summarize(max_flipper_length = max(flipper_length_mm, na.rm = TRUE))\n\n`summarise()` has grouped output by 'island'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 5 × 3\n# Groups:   island [3]\n  island    species   max_flipper_length\n  <fct>     <fct>                  <int>\n1 Biscoe    Adelie                   203\n2 Biscoe    Gentoo                   231\n3 Dream     Adelie                   208\n4 Dream     Chinstrap                212\n5 Torgersen Adelie                   210\n\n\nWhat if you only want Biscoe island?\n- filter(): filters a data frame by data in a column\n\n# use the penguins data frame\npenguins %>% \n  # filter the data frame to only include Biscoe Island\n  filter(island == \"Biscoe\") %>% \n  # group by species\n  group_by(species) %>%\n  # calculate mean body mass\n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 2 × 2\n  species mean_body_mass\n  <fct>            <dbl>\n1 Adelie           3710.\n2 Gentoo           5076.\n\n\n\n\n\n\nCitationBibTeX citation:@online{bui2023,\n  author = {An Bui},\n  editor = {},\n  title = {Coding Workshop: {Week} 1},\n  date = {2023-04-05},\n  url = {https://an-bui.github.io/ES-193DS-W23/workshop/workshop-01_2023-04-05.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAn Bui. 2023. “Coding Workshop: Week 1.” April 5, 2023. https://an-bui.github.io/ES-193DS-W23/workshop/workshop-01_2023-04-05.html."
  },
  {
    "objectID": "workshop.html",
    "href": "workshop.html",
    "title": "Workshop documents",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\n\nCoding workshop: Week 7\n\n\nMay 17, 2023\n\n\n\n\nCoding workshop: Week 4\n\n\nApr 26, 2023\n\n\n\n\nCoding workshop: Week 3\n\n\nApr 19, 2023\n\n\n\n\nCoding workshop: Week 2\n\n\nApr 12, 2023\n\n\n\n\nCoding workshop: Week 1\n\n\nApr 5, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "homework.html",
    "href": "homework.html",
    "title": "Homework documents",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\nhomework 2 starter code\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resources/finalizing-plots.html",
    "href": "resources/finalizing-plots.html",
    "title": "Finalizing plots",
    "section": "",
    "text": "Data visualization is a huge part of data storytelling, one of the core parts of being a data scientist. This is especially relevant to environmental science: you’re responsible for communicating not just about the environment, but what evidence (i.e. data) supports your claim. Therefore, it is crucial that environmental scientists communicate about their data clearly and effectively.\nIn this class, your plots will be assessed using three (very broad) criteria:\n1. accuracy: is your plot accurately and truthfully representing the data?\n2. clarity: is your plot clearly representing a pattern, relationship, message?\n3. aesthetics: does your plot look good?"
  },
  {
    "objectID": "resources/finalizing-plots.html#non-negotiable-if-you-are-missing-these-you-will-not-get-full-credit-for-your-plot",
    "href": "resources/finalizing-plots.html#non-negotiable-if-you-are-missing-these-you-will-not-get-full-credit-for-your-plot",
    "title": "Finalizing plots",
    "section": "Non-negotiable (if you are missing these, you will not get full credit for your plot)",
    "text": "Non-negotiable (if you are missing these, you will not get full credit for your plot)\n\nAxes must have complete labels with units (very few exceptions to this)\n\nfor example: body_mass_g should be “Body mass (g)”\n\nIf plotting regression or correlation lines, underlying data must be displayed on plot in addition to predicted lines\nConcise, descriptive title (if presented alone and not in a report)"
  },
  {
    "objectID": "resources/finalizing-plots.html#additional-points",
    "href": "resources/finalizing-plots.html#additional-points",
    "title": "Finalizing plots",
    "section": "Additional points",
    "text": "Additional points\n\nlogical start and end values of x or y axes (these are usually by default in ggplot, but you should double check)\nif gridlines aren’t useful to understand the data, remove them\nfigure background should be white (easier to see points)\ntext labels should be large enough to see/read clearly\nuse color sparingly and be aware of color-blind friendly palettes\nuse one font throughout a plot\nfigure fonts should match text font (for example, don’t use Arial in a figure when the rest of your text is in Times New Roman)\nmake sure your plot size and aspect ratio renders correctly\n\nIn general, the simpler you can make a plot, the better."
  },
  {
    "objectID": "resources/finalizing-plots.html#bar-chart",
    "href": "resources/finalizing-plots.html#bar-chart",
    "title": "Finalizing plots",
    "section": "Bar chart",
    "text": "Bar chart\n\npenguins %>% \n  group_by(island, species) %>% \n  count() %>% \n  ggplot(aes(x = species, y = n)) +\n  geom_col() +\n  labs(title = \"penguins\") +\n  facet_wrap(~island)\n\n\n\n\nWhy is this bad?\n- gap between bottom of bars and x-axis\n- meaningless y axis\n- gray background against gray bars and black text is hard to see\n- gridlines don’t do much\n\npenguins %>% \n  group_by(island, species) %>% \n  count() %>% \n  ggplot(aes(x = island, y = n)) +\n  # fill = fills in the shape, color = controls the outline\n  geom_col(fill = \"darkgrey\", color = \"#000000\") +\n  # expand takes away the gap at the bottom and at the top of the plot\n  # limits sets the limits of the axis\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 130)) +\n  # change titles to be meaningful\n  labs(title = \"Penguin counts differ across species and islands\",\n       x = \"Island\", \n       y = \"Penguin count\") +\n  # one of the built-in themes in ggplot\n  theme_bw() +\n  theme(# changing text sizes\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14),\n        strip.text = element_text(size = 14),\n        # getting rid of gridlines\n        panel.grid = element_blank(),\n        # making the subplot titles (aka strips) have a transparent background\n        strip.background = element_blank(),\n        # making the plot title bigger and centering it\n        plot.title = element_text(size = 20, hjust = 0.5),\n        plot.title.position = \"plot\",\n        text = element_text(family = \"Times\")\n        ) +\n  facet_wrap(~species)\n\n\n\n\nWhy is this better?\n- text is bigger\n- gridlines are gone\n- easier to see columns agains background\n- complete axes\n- grayscale color scheme (good for printing out and paper reports in black and white)"
  },
  {
    "objectID": "resources/finalizing-plots.html#scatterplot",
    "href": "resources/finalizing-plots.html#scatterplot",
    "title": "Finalizing plots",
    "section": "Scatterplot",
    "text": "Scatterplot\n\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n  geom_point()\n\n\n\n\nWhy is this bad?\n- grey background, black dots\n- hides some meaningful variation across species (for example, we know that Gentoo penguins tend to be bigger than Adelie and Chinstrap)\n- axes are meaningless\n- small text size\n- points likely overlap, so some parts of the data are hidden\n\nggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species, shape = species)) +\n  geom_point(size = 3, alpha = 0.7) +\n  # specify color scheme\n  scale_color_manual(values = c(\"darkorange\", \"cornflowerblue\", \"darkgreen\")) +\n  # meaningful titles\n  labs(title = \"Larger penguins tend to have longer flippers\",\n       x = \"Body mass (g)\", \n       y = \"Flipper length (mm)\",\n       # have to specify color and shape separately (based on color and shape in aes() call)\n       color = \"Penguin species\", shape = \"Penguin species\") +\n  # another ggplot built-in theme\n  theme_classic() +\n  theme(# putting legend in plot area\n        legend.position = c(0.85, 0.2),\n        # legend text sizes\n        legend.text = element_text(size = 14),\n        legend.title = element_text(size = 14),\n        # text size, position, and font adjustment\n        axis.text = element_text(size = 14), \n        axis.title = element_text(size = 16),\n        plot.title = element_text(size = 18, hjust = 0.5),\n        plot.title.position = \"plot\",\n        text = element_text(family = \"Garamond\")\n    )\n\n\n\n\nWhy is this better?\n- white background, no grid lines\n- points are shaped and colored by species, so you can easily see the differences between groups\n- transparency shows overlapping points\n- complete axis labels\n- text is larger and font is changed\n- legend is in plot area (if there’s space to do this, generally good)"
  },
  {
    "objectID": "resources/finalizing-plots.html#violin-boxplot",
    "href": "resources/finalizing-plots.html#violin-boxplot",
    "title": "Finalizing plots",
    "section": "violin + boxplot",
    "text": "violin + boxplot\n\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  # fill the violin shape using the species column: every species has a different color\n  # alpha argument: makes the violin shape more transparent (scale of 0 to 1)\n  geom_violin(aes(fill = species), alpha = 0.5) +\n  # fill the boxplot shape using the species column\n  # make the boxplots narrower\n  geom_boxplot(aes(fill = species), width = 0.2) +\n  # specify the colors you want to use for each species\n  scale_fill_manual(values = c(\"#F56A56\", \"#3D83F5\", \"#A9A20B\")) +\n  # relabel the axis titles, plot title, and caption\n  labs(x = \"Penguin species\", y = \"Body mass (g)\",\n       title = \"Gentoo penguins tend to be heavier than Adelie or Chinstrap\",\n       caption = \"Data source: {palmerpenguins}, \\n Horst AM, Hill AP, Gorman KB.\") +\n  # themes built in to ggplot\n  theme_bw() +\n  # other theme adjustments\n  theme(legend.position = \"none\", \n        axis.title = element_text(size = 13),\n        axis.text = element_text(size = 12),\n        plot.title = element_text(size = 14),\n        plot.caption = element_text(face = \"italic\"),\n        text = element_text(family = \"Times New Roman\"))\n\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`).\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "resources/finalizing-plots.html#points-with-bars-jitter",
    "href": "resources/finalizing-plots.html#points-with-bars-jitter",
    "title": "Finalizing plots",
    "section": "points with bars + jitter",
    "text": "points with bars + jitter\n\n# summarizing penguin data set: calculating mean and SD body mass by species\npenguin_summary <- penguins %>% \n  group_by(species) %>% \n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE),\n            sd_body_mass = sd(body_mass_g, na.rm = TRUE))\n\nggplot() +\n  # using two different data frames: penguins (raw data) and penguins_summary (mean and SD)\n  # raw data are jittered\n  geom_jitter(data = penguins, aes(x = species, y = body_mass_g, color = species), alpha = 0.4) +\n  # summary data: mean is a point, bars are standard deviation\n  geom_point(data = penguin_summary, aes(x = species, y = mean_body_mass, color = species), size = 5) +\n  geom_errorbar(data = penguin_summary, aes(x = species, ymin = mean_body_mass - sd_body_mass, ymax = mean_body_mass + sd_body_mass, color = species), width = 0.2) +\n  scale_color_manual(values = c(\"#F56A56\", \"#3D83F5\", \"#A9A20B\")) +\n  labs(x = \"Penguin species\", y = \"Body mass (g)\",\n       title = \"Gentoo penguins tend to be heavier than Adelie or Chinstrap\",\n       caption = \"Data source: {palmerpenguins}, \\n Horst AM, Hill AP, Gorman KB.\") +\n  theme_bw() +\n  theme(legend.position = \"none\", \n        axis.title = element_text(size = 13),\n        axis.text = element_text(size = 12),\n        plot.title = element_text(size = 14),\n        plot.caption = element_text(face = \"italic\"),\n        text = element_text(family = \"Times New Roman\"))\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n```"
  },
  {
    "objectID": "lecture.html",
    "href": "lecture.html",
    "title": "Lecture visualizations",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\nLecture 07 figures\n\n\nMay 15, 2023\n\n\n\n\nLecture 06 figures\n\n\nMay 8, 2023\n\n\n\n\nLecture 05 figures\n\n\nMay 1, 2023\n\n\n\n\nLecture 04 figures\n\n\nApr 24, 2023\n\n\n\n\nLecture 03 figures\n\n\nApr 17, 2023\n\n\n\n\nLecture 02 figures\n\n\nApr 10, 2023\n\n\n\n\nLecture 01 figures\n\n\nApr 3, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to ENVS 193DS, Winter 2023!",
    "section": "",
    "text": "This is a page where the rendered outputs for all the materials we use in class are kept. There are lecture figures and workshop materials."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "homework/homework-02_starter-code.html",
    "href": "homework/homework-02_starter-code.html",
    "title": "homework 2 starter code",
    "section": "",
    "text": "# directions: comment each line of code with:\n# 1) what package the function comes from\n# 2) what the function does\n# 3) how the data frame changes after running that function\ndata <- read.csv(\"Newman_etal_JAPPL_California_chaparral_birds_2017.csv\") %>% \n  # \n  clean_names() %>% \n  # \n  mutate_all(tolower) %>% \n  #\n  mutate(surv_date_stable = as_date(surv_date_stable)) %>% \n  #\n  mutate(grow_year = as_factor(grow_year))"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nFinalizing plots\n\n\ntips for making your plots readable and professional\n\n\n\n\n\n\nNo matching items"
  }
]