[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nFixing code and getting help\n\n\nNeed help? Check here!\n\n\n\n\nUsing the virtual machine\n\n\nCan’t install R/RStudio on your computer? Don’t have a computer? Use the virtual machine!\n\n\n\n\nCampus resources\n\n\nplaces you can get help\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "ENVS 193DS",
    "section": "Instructor",
    "text": "Instructor\n\n\n\n\n\n\n\n\nName: An Bui\nEmail: an_bui [at] ucsb [dot] edu\nDrop-in hours: Wednesdays 3:30 - 5:30 PM\nDrop-in location: At the tables outside the UCen 1st floor (facing the lagoon)\nMore about me: an-bui.com"
  },
  {
    "objectID": "index.html#teaching-assistants",
    "href": "index.html#teaching-assistants",
    "title": "ENVS 193DS",
    "section": "Teaching assistants",
    "text": "Teaching assistants\n\n\n\nName: Thuy-Tien Bui\nEmail: thuy-tienbui [at] ucsb [dot] edu\nTeaching day: Thursdays\nDrop-in hours: Thursdays 2:00 - 3:00 PM\nDrop-in location: At the tables outside the UCen 1st floor (facing the lagoon)\nMore about me: https://thuy-tienbui.github.io/\n\n\n\n\nTA: Grace Lewin\nEmail: glewin [at] ucsb [dot] edu\nTeaching day: Fridays\nDrop-in hours: Fridays 11:00 AM - 12:00 PM\nDrop-in location: Library 6541\nMore about me: TBD\n\n\n\nAcknowledgements\nI took much of my inspiration for this course from Allison Horst’s Environmental Data Science and Statistics course, Sam Sambado’s Biometry course, and Sam Shanny-Csik’s Data Visualization and Communication course."
  },
  {
    "objectID": "resources/campus-resources.html",
    "href": "resources/campus-resources.html",
    "title": "Campus resources",
    "section": "",
    "text": "The Office of Student Conduct has a list of the resources available to students at UCSB. Some especially useful ones include:\n\nDisabled Students Program: testing accommodations, note-taking help\n\nCounseling & Psychological Services: mental health care and counseling\n\nResource Center for Sexual & Gender Diversity: resources to support members of the LGBTQIA+ community"
  },
  {
    "objectID": "resources/asking-for-code-help.html#before-doing-any-coding-remember",
    "href": "resources/asking-for-code-help.html#before-doing-any-coding-remember",
    "title": "Fixing code and getting help",
    "section": "Before doing any coding, remember:",
    "text": "Before doing any coding, remember:\n\nThings will go wrong when you are coding.\nThis happens to everyone, and is normal! It is totally ok to ask someone on the teaching team to help fix your code; however, you should feel empowered to figure out what is wrong with your code on your own, and we will talk through best practices to do so.\n\n\nStart assignments with enough time to troubleshoot!\nYou will run into errors when doing your assignments. Don’t leave things to the last minute! This class requires you to plan in advance to get things done correctly and on time. We talk about assignments in class a week before the due date - take that week to read the assignment, do the easy problems first, try your code, troubleshoot, and finally submit!\nHere are some tried-and-true steps to troubleshooting code in this class, and beyond:"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-1.-take-a-deep-breath-seriously",
    "href": "resources/asking-for-code-help.html#step-1.-take-a-deep-breath-seriously",
    "title": "Fixing code and getting help",
    "section": "Step 1. Take a deep breath (seriously)!",
    "text": "Step 1. Take a deep breath (seriously)!\nErrors show up in red text and look super alarmed. Easier said than done, but do not be alarmed! Take a moment before panicking, and then…"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-2.-look-for-typos.",
    "href": "resources/asking-for-code-help.html#step-2.-look-for-typos.",
    "title": "Fixing code and getting help",
    "section": "Step 2. Look for typos.",
    "text": "Step 2. Look for typos.\nDo you have a period where there should be a comma? Have you spelled everything correctly? Are you missing a parenthesis somewhere? All sorts of things can happen when you’re typing a bunch; double check your code to make sure you don’t have any typos."
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-3.-google-the-error.",
    "href": "resources/asking-for-code-help.html#step-3.-google-the-error.",
    "title": "Fixing code and getting help",
    "section": "Step 3. Google the error.",
    "text": "Step 3. Google the error.\nChances are you are not the only person who has ever experienced the specific error you are encountering. So, google it!\nYou can be smart about how you google things to find a solution to your problem. See Sam Shanny-Csik’s tutorial called “Teach Me How to Google” for tips on how to google to find solutions to coding problems.\nFor the next step, try at least 2 of these options:"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-4a.-ask-someone-to-look-at-your-code",
    "href": "resources/asking-for-code-help.html#step-4a.-ask-someone-to-look-at-your-code",
    "title": "Fixing code and getting help",
    "section": "Step 4a. Ask someone to look at your code!",
    "text": "Step 4a. Ask someone to look at your code!\nThis can be anyone: your housemate who knows how to code, your friend who took this class last year, etc.. Show your code to an actual human being (who knows how to code) and ask them if they can see anything wrong!"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-4b.-try-rubber-duck-debugging",
    "href": "resources/asking-for-code-help.html#step-4b.-try-rubber-duck-debugging",
    "title": "Fixing code and getting help",
    "section": "Step 4b. Try rubber duck debugging!",
    "text": "Step 4b. Try rubber duck debugging!\nRubber duck debugging is a silly way of talking through what you’re trying to do with your code. Generally, the steps are as follows (feel free to replace the rubber duck with an actual person or another object you want to use):\n\nObtain a rubber duck.\n\nLook at the rubber duck.\n\nExplain to the duck out loud, in words what you are trying to do with your code, line by line.\n\nAt some point, you will figure out what you did wrong!"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-4c.-go-to-sleep",
    "href": "resources/asking-for-code-help.html#step-4c.-go-to-sleep",
    "title": "Fixing code and getting help",
    "section": "Step 4c. Go to sleep!",
    "text": "Step 4c. Go to sleep!\nThis says it all:\n\n\n\n\n\nClose your computer! Go for a walk! Take a shower! Go to sleep! Do whatever you want other than keep coding. When you take a break, you might be able to figure out your problem.\nIf you’re still stuck then…"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-5.-email-someone-on-the-teaching-team-grace-thuy-tien-or-an",
    "href": "resources/asking-for-code-help.html#step-5.-email-someone-on-the-teaching-team-grace-thuy-tien-or-an",
    "title": "Fixing code and getting help",
    "section": "Step 5. Email someone on the teaching team (Grace, Thuy-Tien, or An)",
    "text": "Step 5. Email someone on the teaching team (Grace, Thuy-Tien, or An)\nWe are here to help you! However, inquiries about how to fix code will only be addressed if they include brief (1-2 sentences each) descriptions of the following:\n\nWhat you’re trying to do\n\nWhat the problem is\n\nWhat you have done to try to solve the problem on your own\n\nWe can also best help you if you provide a screenshot of your code or the script so that we can see what is happening.\n\n\n\n\n\n\nBe patient with a response!\n\n\n\nAgain, we are here to help you - but if you email at 11:58 on Wednesdays right before the homework is due, it’s unlikely that you’ll get a response right away! You can expect a response from one of us within 36 hours of emailing (though we will try to respond sooner than that); plan accordingly!"
  },
  {
    "objectID": "assignments/reflection-01.html",
    "href": "assignments/reflection-01.html",
    "title": "Reflection 1",
    "section": "",
    "text": "Due on Sunday April 6 (Week 1) at 11:59 PM\nIn this assignment, you’ll introduce yourself and come up with a plan for what you’d like to get out of the class and roughly outline what you’d like to accomplish over the course of the quarter. You’ll continue visiting the goals you set for yourself in this assignment throughout the quarter, so it’s worth it to be as clear and specific as you can."
  },
  {
    "objectID": "assignments/reflection-01.html#components",
    "href": "assignments/reflection-01.html#components",
    "title": "Reflection 1",
    "section": "Components",
    "text": "Components\n\nA brief introduction\n\nyour name\n\nyour major\nyour year\n\npronouns (only if you feel comfortable sharing)\n\n\n\n\n\n\n\nNote\n\n\n\nFor each prompt below, respond in 1-3 sentences.\n\n\n\n\nSome questions about school and life\n\nWhy are you taking this class?\n\nWhat do you hope to get out of this class?\n\nIf you have a career in mind, how does this course apply to your future career, if at all?\n\nWhat do you wish your instructors knew about you, but don’t?\n\n\n\nSome questions about the way you like to learn\n\nWhat kinds of assignments, skills, or behaviors have you felt most comfortable with/enjoy from past classes? Why do you enjoy them?\n\nHow confident do you feel in your statistics skills (however you want to interpret that)? Why?\n\nHow confident do you feel in your coding skills (again, however you want to interpret that)? Why?\n\nWhat have you struggled with in the past in math or statistics courses? Why?\n\nOf the courses you’re taking this quarter, which do you expect to be the most challenging? Most demanding?\n\nWhich learning goals from the syllabus are you most excited about?\n\nWhat other learning goals do you have for the course?\n\nMost importantly, how do you plan on accomplishing your learning goals for this course?\n\n\n\n\n\n\n\nNote\n\n\n\nBe specific here! Instead of writing, “I will complete homework assignments” or “I will study”, you can make these more specific strategies: “I will use the homework assignments as opportunities for practice. I will communicate with classmates for help after trying…”"
  },
  {
    "objectID": "assignments/getting-set-up.html",
    "href": "assignments/getting-set-up.html",
    "title": "Getting set up",
    "section": "",
    "text": "Optional check in due on Wednesday April 2 (Week 1) at 11:59 PM\nIn this class, we’ll be using R and RStudio to code up our statistical analyses. Walk through these steps to make sure you have both programs on your computer and that everything is working properly. You need to make sure these tasks are completed before workshop on Thursday and Friday.\n\n\n\n\n\n\nDo these set up steps as soon as possible!\n\n\n\nEveryone needs to do tasks 1 - 7. If you want to submit the optional check-in for An to verify that you’ve done things correctly, you can do task 8 and submit your screenshot on Canvas.\nIf you do not have R, RStudio, and Quarto installed and running, we cannot stop for you. Do this before class starts!\n\n\n\n\n\n\n\n\nWhat version should I install? Do I need to update R/RStudio?\n\n\n\nYou should have at least R 4.2.2 (released November 2022) and RStudio 2023.12.1.\nIf you have downloaded R/RStudio for previously but you don’t have updated versions, then you need to update! To do so, follow the instructions for installation in Task 1.\nAn will be using R version 4.4.3 and RStudio version 2024.12.1+563.\n\n\n\nTask 1. Install R.\nGo to cran.rstudio.com. Choose the correct download for your operating system!\n\n\n\n\n\n\n\n\n\n\n\nNeed to see a bigger image?\n\n\n\n\n\nClick on the screenshot to make it bigger!\n\n\n\n\n\nTask 2. Install RStudio (and optionally Quarto)\nGo to posit.co/download/rstudio-desktop. Click on the button under “2: Install RStudio”. It should automatically show the correct version for your operating system.\n\n\n\n\n\n\n\n\n\n\n\nInstalling Quarto\n\n\n\nYou only need to install Quarto if you are running RStudio version 2022.07.1 or earlier. Follow the instructions for installing Quarto here.\nIf you cannot install Quarto on your computer (because it doesn’t work with your operating system, etc.), that is fine - you just might have some differences between what we do in class and what you see on your own computer.\n\n\n\n\nTask 3. Open RStudio\nWhen we say we’re “using R” in the class, what we’re really using is RStudio, which is a graphical user interface (GUI) for R (the language). Basically, we’re never going to open up “R”, but we’ll always open up “RStudio”.\nOpen RStudio on your computer.\n\n\nTask 4. Change your settings\n\n\n\n\n\n\nDo I really have to do all these things?\n\n\n\nThe short answer is: only if you want your life to be easier!\nIf you have used R/RStudio before and you feel comfortable about navigating things on your own, then I won’t stop you!\nIf you are new to using R, I would recommend you do follow all the steps in this task so that you can match up what is on your computer to what you’ll see on my computer when you’re in class.\nAt minimum, everyone needs to change their workspace save settings. These are listed below, but here is a recap:\n\n“Restore .Rdata into workspace at startup” is unchecked\n\n“Save workspace to .RData on exit” is on “Never”\n\n“Always save history (even when not saving .RData)” is unchecked\n\n\n\n\nYou can change some settings to make your life easier when working in RStudio. The following steps are all done in the same menu. Go to Tools &gt; Global Options.\nFirst, you can change your color scheme. You don’t have to stick with the boring RStudio color scheme! Go to Appearance and select the color scheme you want.\n\n\n\n\n\nThen, go to the General tab. Make sure that\n\n“Restore .Rdata into workspace at startup” is unchecked\n\n“Save workspace to .RData on exit” is on “Never”\n\n“Always save history (even when not saving .RData)” is unchecked\n\n\n\n\n\n\n\nSome of these may already be checked! If so, great! Double check everything though!\n\n\n\n\n\n\n\n\n\n\n\nThen, go to the Code tab. Under editing, make sure:\n\n“Insert spaces for Tab” is checked\n\n“Auto-detect code indentation” is checked\n\n“Insert matching parens/quotes” is checked\n\n“Use native pipe operator, |&gt;” is checked\n\n“Auto-indent code after paste” is checked\n\n“Vertically align arguments in auto-indent” is checked\n\n“Soft-wrap source files” is checked\n\n“Continue comment when inserting new line” is checked\n\n“Enable hyperlink highlighting in editor” is checked\n\n“Enable code snippets” is checked\n\n\n\n\n\n\nThen, go to Display (still under the Code tab). Make sure:\n\n“Highlight selected word” is checked\n\n“Show line numbers” is checked\n\n“Show margin” is checked\n\n“Blinking cursor” (if you want it) is checked\n\n“Enable preview of named and hexadecimal colors” is checked\n\n“Use rainbow parentheses” is checked\n\n\n\n\n\n\nThen, go to the R Markdown tab. Under basic, make sure the following is checked:\n\n“Soft-wrap R Markdown files” is checked\n\n“Show output preview in:” selection is “Viewer Pane”\n\n\n\n\n\n\nUnder visual (still under the R Markdown tab), make sure:\n\n“Use visual editor by default for new documents” is unchecked\n\n“Show document outline by default” is checked\n\n\n\n\n\n\n\nHit Apply to save all your changes. Do not forget to hit apply!!!\n\n\n\nTask 5. Test out installing a package\nPackages are the best part of using R. We’ll talk more about what packages are in workshop, but for now try installing a package. Go to your Console (the bottom left pane in the RStudio window), and type (or copy paste) install.packages(\"tidyverse\"). Hit Enter.\nYou should get a message that looks something like this:\n\n\n\n\n\n\n\n\n\n\n\nOperating system differences\n\n\n\nThe database that holds all these packages will automatically detect which version you need based on your operating system. Don’t worry if your output message doesn’t look exactly the same as the one here - just as long as you get something like “The downloaded binary packages are in…”, you’ve probably got the package installed.\n\n\n\n\nTask 6. Test out reading in a package\nNow you’ve installed a package, but you want to make sure you can actually run it. Again in the Console (the bottom left pane), type library(tidyverse) and hit Enter.\nYou should get a message that looks something like this:\n\n\n\n\n\n\n\nTask 7. Set up a folder on your computer for class materials\nUsing R/RStudio requires you to know how your computer is organized and where your files are. For now, we’ll want to set up a folder in your computer called ENVS-193DS (note no spaces in the folder name).\nAll operating systems are different, but make sure that your folder is not in the “iCloud” or “Google Drive” folders in your computer. Basically, you want to be sure that you can get from your “root” directory (i.e. your actual computer hard drive) to the folder you’re using.\nYou can check this using the file path, or the folders you would need to open to get to the folder called ENVS-193DS. One example for MacOS is below, where the file path is written out at the bottom of the pane:\n\n\n\n\n\n\n\nTask 8. Take a screenshot of your RStudio set up\nSo that the instructors can verify that you’ve gotten everything set up, take a screenshot of your RStudio window with the code for install.packages(\"tidyverse\") and library(tidyverse) in your Console and submit it to the portal on Canvas. Your screenshot should look something like this:\n\n\n\n\n\n\n\n\n\n\n\nDouble check your screenshot!\n\n\n\nMake sure that the messages in the orange box (above) are visible in your screenshot! Otherwise we will not be able to troubleshoot whatever issues you are having with installation (if you are actually having any)."
  },
  {
    "objectID": "workshop/workshop-01_2025.html",
    "href": "workshop/workshop-01_2025.html",
    "title": "Coding workshop: Week 1",
    "section": "",
    "text": "Workshop dates: April 3 (Thursday), April 4 (Friday):"
  },
  {
    "objectID": "workshop/workshop-01_2025.html#summary",
    "href": "workshop/workshop-01_2025.html#summary",
    "title": "Coding workshop: Week 1",
    "section": "1. Summary",
    "text": "1. Summary\n\nPackages\n\ntidyverse\n\n\n\nOperations\n\ncalculations using mean() and median()\n\nread in data using read_csv()\n\nfilter data using filter()\n\ngroup data using group_by()\n\ncreate new column using mutate()\n\ncalculate summary statistics using summarize()\n\nchain functions together using |&gt;\n\nvisualize data using ggplot()\n\ncreate boxplots using geom_boxplot()\n\ncreate line plots (a type of scatterplot) using geom_point() and geom_line()\n\nlabel plots using labs()\n\n\n\nData source\nThis workshop’s data comes from National Parks Service Stats, which is the official repository for all data relating to national parks visits. Today, we are working with data from Channel Islands (unceded Chumash land), Death Valley (unceded Serrano and Cahuilla land), and Joshua Tree (unceded Shoshone, Kawaiisu, and Southern Paiute land). You can orient yourself on this map."
  },
  {
    "objectID": "workshop/workshop-01_2025.html#code",
    "href": "workshop/workshop-01_2025.html#code",
    "title": "Coding workshop: Week 1",
    "section": "2. Code",
    "text": "2. Code\n\n\n\n\n\n\nRemember to set up an Rproj file!\n\n\n\nIn class, before we started coding, we set up an Rproject for this folder of workshop materials for week 1. If you need help setting up an Rproject file, see the video on Canvas titled “Creating an Rproject” under the Week 1 module for help.\n\n\n\n1. Intro to scripts\nIn class, we use an R Script. It allows you to write your code (recipe) and run the code in the console (kitchen).\nR considers everything in the script as code to run. Try writing code to calculate the sum of 5 and 7 multiplied by 2.\nRun code by putting your cursor on the line and hitting Ctrl + Enter or Cmd + Enter.\n\n(5+7)*2 # basic math: adding and multiplying\n\n[1] 24\n\n\nEverything in colored text is considered code, and that is what R will run in the console. If you don’t want to run code, you can put a pound sign/hashtag at the beginning of the line. This is especially useful when you want to explain what your code is doing at each line in plain language.\nGo back up to the code you wrote to do the simple calculation and write a comment describing what the code is doing.\n\n\n2. Intro to objects\nIt’s often useful to save things called “objects.” These are stored numbers, lists of numbers, or anything else that appears in the “Environment” tab in the top right.\nTo save (aka store) an object, the general form is:\nobject name &lt;- what you want to store\nRead aloud, this is “object name, left arrow operator, what you want to store”.\nIn this code, we are creating an object called visits and storing a list of numbers: 31, 15, 20, 50.\nIn code, you know that something is a list if it is within a c() function (we’ll get to functions in the next section).\nWrite a comment at the end of this line describing what it does.\n\nvisits &lt;- c(31, 15, 20, 50) # saving a list of numbers as an object called visits\n\n\n\n3. Intro to functions\nR allows you to apply functions to do calculations, from simple to complex structures.\nLet’s say we want to find the mean of the numbers in visits. We could do the calculation by hand, or we could as R to do it for us.\nFunctions are really powerful tools in R. In this class, we’ll get comfortable learning new functions and applying them to different scenarios.\nIn this next line, we’ll calculate the mean of the numbers in visits using the function mean().\nAll functions take the general form function(). Read aloud, this is “function, parentheses”.\n\nmean(visits) # calculating mean of numbers in visits\n\n[1] 29\n\n\nWrite a comment at the end of the line so that you know what it is doing!\nThere is also a function for calculating the median, another measure of central tendency we talked about in class. You can probably guess what it is called!\n\nmedian(visits)\n\n[1] 25.5\n\n\n\n\n4. Intro to packages and data\nPackages are collections of functions that you can bring into R to use. You’ve already installed a package (using the install.packages() function) if you did the set up steps!\nToday (and most days), we’ll use the tidyverse package. The tidyverse is actually a package of packages, and they all have functions that are really useful for us to use in working with data and analyzing it.\nIn this next line, we’ll “read in the package” using the function library(). You only have to install a package once, but you have to read in a package every time you start a new script or restart R.\n\nlibrary(tidyverse)\n\nTo work with data, we can also “read it in” the way we would a package. Basically, we are getting the data into R for us to work with. The function we’ll use for that is read_csv(), which is from the tidyverse package.\n\nparks_visits &lt;- read_csv(\"parks_visits.csv\")\n\nWe’ve already looked at the data in Excel, but let’s make sure it’s actually in R.\nFirst, if you look at the “Environment” tab, you should see an object called park_visits.\n\n\n\n\n\n\nIs my data actually in R?\n\n\n\n\n\nIf you’re not sure if your data is in R, the first thing to check is the “Environment”. If you’ve read in everything correctly, you should see an object in there. If not, you know something is wrong!\n\n\n\nSecond, you can use the View() function to look at the actual data.\n\nView(parks_visits)\n\n\n\n5. cleaning and wranging\nLet’s say we want to figure out what the average (mean) number of visits is for Joshua Tree is across all years and months.\nFirst, you can filter by park to only include jtnp (or Joshua Tree) using the filter() function.\n\ndf1 &lt;- filter(parks_visits, # use the parks_visits data frame\n              park == \"jtnp\") # only include rows where `jtnp` is in the `park` column\n\nThen, you can calculate the mean monthly visits for Joshua Tree across all years using the summarize() and mean() functions.\n\ndf2 &lt;- summarize(df1, # use the df1 data frame\n                 mean_visits = mean(visits)) # calculate the mean number of visits\n\nThis can get tedious if you have a bunch of filtering and summarizing to do! So instead, we can use…\n\n\n6. an easier way to clean and wrangle\nYou can use what’s called a pipe operator to chain functions together. The keyboard shortcut for a pipe is Ctrl + Shift + M or Cmd + Shift + M.\n\n\n\n\n\n\nWhich pipe to use?\n\n\n\n\n\nIf you did the set up steps, you should see a pipe operator that looks like this: |&gt;.\nIf you don’t, you might see a pipe operator that looks like this: %&gt;%.\nThese both do the same thing, though the |&gt; is from baseR (or, a package of pre-loaded R functions and operators) and the %&gt;% is from the magrittr package in the tidyverse.\n\n\n\nWhen reading your code aloud, you can read the pipe as “and then”\n\n# create a new object called `jtnp`\njtnp &lt;- parks_visits |&gt; # start with the `parks_visits` data frame\n  filter(park == \"jtnp\") |&gt; # filter to only include Joshua tree\n  summarize(mean_visits = mean(visits)) # calculate the mean number of visits at Joshua Tree\n\n\n\n7. Visualizing data\nLet’s say we want to visualize the average monthly visits for Channel Islands, Joshua Tree, and Death Valley. We can use a boxplot to do that. Remember that a boxplot is an easy way to represent the central tendency (using the median) and spread (using quantiles) of a variable.\nBefore you move on, write your best guess for which park has, on average, the greatest number of visitors (out of these three).\nTo visualize the data, we’ll use ggplot() and its associated functions, which are all in the ggplot2 package in the tidyverse.\nThe main parts of creating a plot in ggplot() are:\n\nthe “global call”: you have to tell R that you want to use ggplot() by actually naming the function\n\nthe “aesthetics”: you have the tell R the data frame name (in this case, parks_visits) and what the x- and y-axes should be (using the aesthetics function called aes())\n\nthe “geometries”: this is the type of plot you are making. In this case, we’re using the function geom_boxplot() because we want to make a boxplot. Most geom_() functions are named after the plot they make.\n\n\n# 1. start with the global call\nggplot(data = parks_visits, # using the data frame parks_visits\n       aes(x = park, # 2. naming the aesthetics: the x-axis should be the 3 parks\n           y = visits)) + # the y-axis should be monthly visits\n  geom_boxplot() # 3. the plot should be a boxplot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGetting a warning?\n\n\n\nWhen you run the code to create this figure, you will get a warning message that looks like this: Warning message: Removed 1 row containing non-finite outside the scale range (stat_boxplot()).\nThis means that there is a number missing in the data frame. Can you find it? (Hint: you’ll need to look at CNPS visit numbers from 2005).\nMissing data is often not a big deal - things happen during data collection! However, we do want to be aware of missing data when we analyze it. That’s why making visualizations is so important; it can help us identify gaps in the dataset if there are any.\n\n\nWhich park do you think receives, on average, the greatest number of visitors?\nWe can check that using math!\n\n\n8. Grouping data using group_by()\nIn the parks_visits data frame, there are 3 parks. We could do everything in section 5 for each park individually, or we could use a function called group_by() from the tidyverse. When you use group_by(), you are basically telling R, “there are groups in this dataset that I want you to pay attention to.”\n\nparks_summary &lt;- parks_visits |&gt; # start with the parks_visits data frame\n  group_by(park) |&gt; # group by each park\n  summarize(median_visits = median(visits, na.rm = TRUE)) # summarize the median number of visits\n\nparks_summary # display the final data frame\n\n# A tibble: 3 × 2\n  park  median_visits\n  &lt;chr&gt;         &lt;dbl&gt;\n1 cnps         25698 \n2 dvnp         84672.\n3 jtnp        144762.\n\n\n\n\n9. Cleaning, wrangling, and visualizing all together\nLet’s say we want to create a figure of total annual visits through time. That would mean we would need to add up all the monthly visits for a given park in a given year. We can take advantage of the functions we’ve gone through to do that work!\nWe’ll also add in a new function here: mutate(). mutate() is a function that allows you to add new columns or manipulate existing columns in a data frame. In this case, we’ll use mutate to do two things:\n\nadd a new column called park_name that has the full name of each park (instead of the abbreviation)\n\nadd a new column called visits_millions that calculates the annual number of visits in millions\n\n\nannual_visits &lt;- parks_visits |&gt; # start with the parks_visits data frame\n  group_by(park, year) |&gt; # group by park AND year\n  summarize(total_visits = sum(visits, na.rm = TRUE)) |&gt; # calculate total visits per year\n  mutate(park_name = case_when( # create a new column called park_name\n    park == \"cnps\" ~ \"Channel Islands\", # when cnps appears in the park column, fill in Channel Islands\n    park == \"dvnp\" ~ \"Death Valley\", # when dvnp appears in the park column, fill in Death Valley\n    park == \"jtnp\" ~ \"Joshua Tree\" # when jtnp appears in the park column, fill in Joshua Tree\n  )) |&gt; \n  mutate(visits_millions = total_visits/1000000) # add a new column called visits_millions, where the total visits are divided by 1000000\n\nNow, we can visualize the data in a line plot, which is a type of scatter plot except the points are connected with lines. We can do that using ggplot() again, but this time with two new “geometries”: geom_point() and geom_line().\nWe’ll also add some color to the plot to make it more interesting to look at!\nLastly, we’ll add in a new function called labs(), which allows us to change the labels on the axes and legend and add a title to the plot, to make things more clear.\n\nggplot(data = annual_visits, # use the annual_visits data frame\n       aes(x = year, # the x-axis should be year\n           y = visits_millions, # the y-axis should be visits in millions\n           color = park_name)) + # color all geometries by park_name\n  geom_point() + # adding points\n  geom_line() + # adding lines\n  labs(x = \"Year\", # relabelling the x-axis\n       y = \"Recreation visits (in millions)\", # and the y-axis\n       title = \"Joshua Tree receives more visits than Death Valley and Channel Islands\", # adding a title\n       color = \"Park name\") # relabelling the legend\n\n\n\n\n\n\n\n\nEND OF WORKSHOP 1"
  },
  {
    "objectID": "workshop/workshop-01_2025.html#extra-stuff",
    "href": "workshop/workshop-01_2025.html#extra-stuff",
    "title": "Coding workshop: Week 1",
    "section": "3. Extra stuff",
    "text": "3. Extra stuff\n\nKeyboard shortcut for &lt;-\nOn Macs, this is Opt + -. On Windows, this is Alt + -.\n\n\nApplying and changing colors in a ggplot() object\nIf you want your plot to have colors in it and/or control the colors, you will need two things in your code:\n\nto apply colors: in the aes() call, have color = or fill = for the column in your data frame that represents the colors\n\nto control colors: you can add on another layer (using the + operator) of scale_color_manual() or scale_fill_manual.\n\n\n\n\n\n\n\nWhat to use: color or fill?\n\n\n\n\n\nfill is appropriate for any shape that you are filling in (i.e. something with a boundary); for example, in the boxplot, you are filling in the rectangle shape of the box.\ncolor is appropriate for anything that’s not a shape; points and lines are typically what you would “color”.\nIt takes some intuition building to decide which to use, so don’t get discouraged if you try fill but realize it’s supposed to be color or vice versa.\n\n\n\nHere’s a demonstration of how that works for a boxplot, where the argument in the aes() call is fill and the function to control the colors is scale_fill_manual().\n\n\n\n\n\n\nWithout colors:\n\nggplot(data = parks_visits, \n       aes(x = park, \n           y = visits)) + \n  geom_boxplot() \n\n\n\n\n\n\n\n\n\nWith colors:\n\nggplot(data = parks_visits, \n       aes(x = park, \n           y = visits,\n           fill = park)) + \n  geom_boxplot() +\n  scale_fill_manual(values = c(\"cnps\" = \"deeppink3\",\n                               \"jtnp\" = \"seagreen3\",\n                               \"dvnp\" = \"steelblue4\"))\n\n\n\n\n\n\n\n\n\n\n\nHere’s a demonstration of how it works with a line plot, where the argument in the aes() call is color and the function to control the colors is scale_color_manual().\n\n\n\nWithout colors:\n\nggplot(data = annual_visits, \n       aes(x = year, \n           y = visits_millions,\n           group = park)) + # this is an extra argument to make sure there is one line per park\n  geom_point() + \n  geom_line() + \n  labs(x = \"Year\", \n       y = \"Recreation visits (in millions)\", \n       title = \"Joshua Tree receives more visits than Death Valley and Channel Islands\", \n       color = \"Park name\") \n\n\n\n\n\n\n\n\n\nWith colors:\n\nggplot(data = annual_visits,\n       aes(x = year, \n           y = visits_millions, \n           color = park_name)) + \n  geom_point() +\n  geom_line() + \n  labs(x = \"Year\", \n       y = \"Recreation visits (in millions)\", \n       title = \"Joshua Tree receives more visits than Death Valley and Channel Islands\", \n       color = \"Park name\") + \n  scale_color_manual(values = c(\"Channel Islands\" = \"deeppink3\",\n                                \"Joshua Tree\" = \"seagreen3\",\n                                \"Death Valley\" = \"steelblue4\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCareful about your labels!\n\n\n\n\n\nWhen naming the colors that you’ll assign to each value in a column, be sure that they match up with the column you typed in for your fill or color argument.\nFor example, the boxplot uses fill = park. The park column in the parks_visits data frame has three values: cnps, jtnp, and dvnp. That’s why the scale_fill_manual() function contains a list of values using the abbreviations.\nIn contrast, the line plot uses color = park_name. The park_name column in the annual_visits data frame has three values: Channel Islands, Joshua Tree, and Death Valley. Thus, the scale_color_manual() function contains a list of values using the full names.\n\n\n\n\n\nChoosing colors!\nGo down color rabbit holes! Some resources to do that:\n\nNamed colors in R: R has a bunch of built in color names, like steelblue3, violetred2, and darkorchid4.\n\nhex codes: more customizable colors come from hex codes, which are 6 digit alphanumeric codes that describe a color. For example, #FFFFFFF represents white, while #000000 represents black, and #3d85c6 is a nice blue.\n\ncolor palettes: if you want to change the colors but you don’t want to pick your own, you can use color palettes. These are collections of colors that people have put into packages for you to use in your plots. There are lots of interesting packages of palettes: a beyonce package that has a bunch of palettes from music videos/concerts, a vangogh package that has palettes from Van Gogh paintings, and much more. A package I developed with my friends is calecopal, which is a package of palettes inspired by California ecosystems."
  },
  {
    "objectID": "lecture/lecture_week-01.html",
    "href": "lecture/lecture_week-01.html",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "",
    "text": "Code\n# cleaning\nlibrary(tidyverse)\ntheme_set(theme_classic() +\n            theme(panel.grid = element_blank(),\n                  axis.text = element_text(size = 18),\n                  axis.title = element_text(size = 18),\n                  text = element_text(family = \"Lato\")))\n\n# visualization\nlibrary(patchwork)"
  },
  {
    "objectID": "lecture/lecture_week-01.html#set-up",
    "href": "lecture/lecture_week-01.html#set-up",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "",
    "text": "Code\n# cleaning\nlibrary(tidyverse)\ntheme_set(theme_classic() +\n            theme(panel.grid = element_blank(),\n                  axis.text = element_text(size = 18),\n                  axis.title = element_text(size = 18),\n                  text = element_text(family = \"Lato\")))\n\n# visualization\nlibrary(patchwork)"
  },
  {
    "objectID": "lecture/lecture_week-01.html#math",
    "href": "lecture/lecture_week-01.html#math",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "1. Math",
    "text": "1. Math\n\nsample mean\n\\[\n\\bar{y} = \\frac{1}{n}\\sum_{i = 1}^ny_i\n\\]\n\n\nsample variance\n\\[\ns^2 = \\frac{\\sum(y_i - \\bar{y})^2}{n - 1}\n\\]\n\n\nsample standard deviation\n\\[\ns = \\sqrt{\\frac{\\sum(y_i - \\bar{y})^2}{n - 1}}\n\\]\n\n\ncoefficient of variation\n\\[\nCV = \\frac{\\sigma}{\\mu}\n\\]\n\n\nz-score for selecting a single individual\n\\[\nz = \\frac{y_i - \\mu}{\\sigma}\n\\]"
  },
  {
    "objectID": "lecture/lecture_week-01.html#mean-and-median",
    "href": "lecture/lecture_week-01.html#mean-and-median",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "2. Mean and median",
    "text": "2. Mean and median\nFor data following a symmetrical distribution, the mean and median tend to be similar.\n\n\nCode\nset.seed(1)\nrnorm(n = 100, mean = 6, sd = 1) %&gt;% \n  as_tibble() %&gt;% \n  ggplot(aes(x = value)) +\n  geom_density() +\n  geom_vline(aes(xintercept = mean(value)), color = \"blue\") +\n  annotate(\"text\", x = 5.75, y = 0.5, label = \"mean\", color = \"blue\") +\n  geom_vline(aes(xintercept = median(value))) +\n  annotate(\"text\", x = 6.5, y  = 0.5, label = \"median\") +\n  scale_x_continuous(limits = c(2.5, 10)) +\n  scale_y_continuous(limits = c(0, 0.5)) +\n  labs(x = \"Sculpin lengths (cm)\") +\n  theme(axis.text.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\nCode\nset.seed(10)\nsample(x = 1:10, \n       size = 100, \n       replace = TRUE,\n       prob = 10:1\n       #prob = 10:1\n       ) |&gt; \n  as_tibble() |&gt; \n  ggplot(aes(x = value)) +\n  geom_density() +\n  geom_vline(aes(xintercept = mean(value)),\n             color = \"blue\") +\n  geom_vline(aes(xintercept = median(value))) +\n  labs(x = \"Sculpin lengths (cm)\") +\n  theme(axis.text.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank())"
  },
  {
    "objectID": "lecture/lecture_week-01.html#range",
    "href": "lecture/lecture_week-01.html#range",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "3. Range",
    "text": "3. Range\n\n\nCode\nset.seed(1)\nnarrow &lt;- rnorm(n = 30, mean = 6, sd = 1) %&gt;% \n  as_tibble() %&gt;% \n  mutate(y = 0) %&gt;% \n  ggplot(aes(x = value, y = y)) +\n  geom_jitter(shape = 21) +\n  geom_point(aes(x = mean(value), y = 0), color = \"blue\", size = 3) +\n  scale_x_continuous(limits = c(0, 15)) +\n  scale_y_continuous(limits = c(-0.5, 0.5)) +\n  theme(axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank()) +\n  labs(x = \"Sculpin lengths (cm)\")\n# min: 3.78\n# max: 7.60\n\nset.seed(1)\nwide &lt;- rnorm(n = 30, mean = 6, sd = 2) %&gt;% \n  as_tibble() %&gt;% \n  mutate(y = 0) %&gt;% \n  ggplot(aes(x = value, y = y)) +\n  geom_jitter(shape = 21) +\n    geom_point(aes(x = mean(value), y = 0), color = \"blue\", size = 3) +\n  scale_x_continuous(limits = c(0, 15)) +\n  scale_y_continuous(limits = c(-0.5, 0.5)) +\n  theme(axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank()) +\n  labs(x = \"Sculpin lengths (cm)\")\n# min: 1.57\n# max: 9.19\n\nnarrow + wide\n\n\n\n\n\n\n\n\n\n\nHow would you describe this data?\n\n\nCode\nset.seed(1)\nex1 &lt;- rf(n = 100, df1 = 30, df2 = 10)\nmean(ex1)\n\n\n[1] 1.321259\n\n\nCode\nmedian(ex1)\n\n\n[1] 1.163362\n\n\nCode\nex1 %&gt;% \n  enframe() %&gt;% \n  ggplot(aes(x = value)) +\n  geom_histogram(bins = 9,\n                 color = \"#000000\",\n                 fill = \"orange\") +\n  scale_y_continuous(expand = c(0, 0)) +\n  labs(x = \"Hermit crab shell length (cm)\")\n\n\n\n\n\n\n\n\n\nCode\nset.seed(1)\nex2 &lt;- rnorm(n = 100, mean = 25, sd = 5)\nmean(ex2)\n\n\n[1] 25.54444\n\n\nCode\nmedian(ex2)\n\n\n[1] 25.56955\n\n\nCode\nex2 %&gt;% \n  enframe() %&gt;% \n  ggplot(aes(x = value)) +\n  geom_histogram(bins = 9,\n                 color = \"#000000\",\n                 fill = \"darkgreen\") +\n  scale_y_continuous(expand = c(0, 0)) +\n  labs(x = \"Octopus arm length (cm)\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#anemone-regression-example",
    "href": "lecture/lecture_week-01.html#anemone-regression-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "4. anemone regression example",
    "text": "4. anemone regression example\n\n\nCode\n# number of arms \narms &lt;- seq(from = 40, to = 100, by = 1)\n\n# diameter: anemones can be up to 8 cm long\nset.seed(10)\ndiam &lt;- rnorm(length(arms), mean = seq(from = 1, to = 5, length = length(arms)), sd = 1) \n\n# create a data frame\ndf &lt;- cbind(diam, arms) %&gt;% \n  as.data.frame()\n\nggplot(df, aes(x = arms, y = diam)) +\n  geom_point(size = 2) +\n  labs(x = \"Number of arms\", y = \"Diameter (cm)\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(df, aes(x = arms, y = diam)) +\n  geom_point(size = 2) +\n  # just using geom smooth for the purposes of visualization\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 2) +\n  labs(x = \"Number of arms\", y = \"Diameter (cm)\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#histogram-example",
    "href": "lecture/lecture_week-01.html#histogram-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "5. histogram example",
    "text": "5. histogram example\nThe Rice rule guidelines for the calculating the number of bins in a histogram:\n\\[\nbins = 2n^{1/3}\n\\]\nwhere \\(n\\) is the number of observations. This is an example of a histogram that does follow the rice rule, where the bin number is 8.\n\n\nCode\nggplot(df, aes(x = diam)) +\n  scale_x_continuous(breaks = seq(from = 0, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 19), breaks = seq(from = 0, to = 18, by = 3)) +\n  geom_histogram(breaks = seq(from = 0, to = 8, by = 1), color = \"#000000\", fill = \"lightblue\") +\n  labs(x = \"Anemone diameter (cm)\", y = \"Count\") +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n\n\n\nThese histograms do not, and it proves difficult to see the distribution:\n\n\nCode\nggplot(df, aes(x = diam)) +\n  scale_x_continuous(breaks = seq(from = 0, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 19), breaks = seq(from = 0, to = 18, by = 3)) +\n  geom_histogram(color = \"#000000\", fill = \"lightblue\") +\n  labs(x = \"Anemone diameter (cm)\", y = \"Count\") +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n\n\n\nCode\nggplot(df, aes(x = diam)) +\n  scale_x_continuous(breaks = seq(from = 0, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_histogram(color = \"#000000\", fill = \"lightblue\", bins = 3) +\n  labs(x = \"Anemone diameter (cm)\", y = \"Count\") +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#jitter-plot-and-box-and-whisker-plot-example",
    "href": "lecture/lecture_week-01.html#jitter-plot-and-box-and-whisker-plot-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "6. jitter plot and box and whisker plot example",
    "text": "6. jitter plot and box and whisker plot example\n\n\nCode\nset.seed(1)\n\npretend_lengths &lt;- cbind(\n  juveniles = rnorm(20, mean = 2, sd = 0.5), \n  females = rnorm(20, mean = 8, sd = 1), \n  males = rnorm(20, mean = 4, sd = 1)\n) %&gt;% \n  as_tibble() %&gt;% \n  pivot_longer(cols = 1:3)\n\nggplot(pretend_lengths, aes(x = name, y = value, color = name)) +\n  geom_jitter(width = 0.1, alpha = 0.8, size = 2) +\n  scale_color_manual(values = c(\"darkgreen\", \"cornflowerblue\", \"orange\")) +\n  labs(y = \"Weight (g)\") +\n  theme(axis.title.x = element_blank(),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(pretend_lengths, aes(x = name, y = value, color = name, fill = name)) +\n  geom_boxplot(alpha = 0.8) +\n  scale_color_manual(values = c(\"darkgreen\", \"cornflowerblue\", \"orange\")) +\n  scale_fill_manual(values = c(\"darkgreen\", \"cornflowerblue\", \"orange\")) +\n  labs(y = \"Weight (g)\") +\n  theme(axis.title.x = element_blank(),\n        legend.position = \"none\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#probability-mass-example",
    "href": "lecture/lecture_week-01.html#probability-mass-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "7. Probability mass example",
    "text": "7. Probability mass example\n\n\nCode\nggplot(data.frame(x = 1:55), aes(x)) +\n  stat_function(geom = \"bar\", n = 55, fun = dpois, args = list(lambda = 10), fill = \"coral\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.13)) +\n  coord_cartesian(xlim = c(0, 22)) +\n  labs(x = \"Mussel clump size (count)\", y = \"Probability mass\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#probability-density-example",
    "href": "lecture/lecture_week-01.html#probability-density-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "8. Probability density example",
    "text": "8. Probability density example\n\n\nCode\nggplot(data.frame(x = 1:20), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 10, sd = 2), linewidth = 1) +\n  stat_function(geom = \"area\", fun = dnorm, args = list(mean = 10, sd = 2), xlim = c(12, 14), fill = \"turquoise3\") +\n  geom_vline(xintercept = 12, lty = 2, color = \"grey\", linewidth = 1) +\n  geom_vline(xintercept = 14, lty = 2, color = \"grey\", linewidth = 1) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.22)) +\n  # coord_cartesian(xlim = c(0, 22)) +\n  labs(x = \"Individual mussel weight (g)\", y = \"Probability density\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#probability-distribution",
    "href": "lecture/lecture_week-01.html#probability-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "9. probability distribution",
    "text": "9. probability distribution\n\n\nCode\nset.seed(1)\nnormdist &lt;- rnorm(n = 100000, mean = 0, sd = 1) %&gt;% \n  as_tibble(rownames = \"x\")\n\nggplot(normdist) +\n  geom_histogram(aes(x = value, after_stat(density)), fill = \"white\", color = \"black\", bins = 100) +\n  stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = \"blue\", linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#normal-distribution",
    "href": "lecture/lecture_week-01.html#normal-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "10. normal distribution",
    "text": "10. normal distribution\n\n\nCode\nggplot(data.frame(x = -10:25), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1, color = \"darkorange\") +\n  annotate(\"text\", x = 4.5, y = 0.4, label = \"\\U03BC = 0, \\U03C3 = 1\", color = \"darkorange\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 15, sd = 3), linewidth = 1, color = \"blue\") +\n  annotate(\"text\", x = 16, y = 0.15, label = \"\\U03BC = 15, \\U03C3 = 3\", color = \"blue\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 5, sd = 5), linewidth = 1, color = \"darkgreen\") +\n  annotate(\"text\", x = 7, y = 0.1, label = \"\\U03BC = 5, \\U03C3 = 5\", color = \"darkgreen\", size = 6) +\n  scale_x_continuous(breaks = seq(-10, 25, 5)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#z-score-calculation",
    "href": "lecture/lecture_week-01.html#z-score-calculation",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "11. z-score calculation",
    "text": "11. z-score calculation\n\nfigure\nWe’ll use \\(z = -1.23\\) for this example.\n\n\nCode\n# z-score\nq &lt;- -1.23\n\nggplot(data.frame(x = -4:4), aes(x)) +\n  # zscore\n  geom_linerange(x = q, ymin = 0, ymax = 0.19) +\n  # area under the curve\n  stat_function(geom = \"area\", fun = dnorm, args = list(mean = 0, sd = 1), xlim = c(-4, -1.23), fill = \"turquoise3\") +\n  # Z distribution curve\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1.5, color = \"darkorange\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.45)) +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title = element_blank(),\n        axis.line.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\ncalculation\n\n\nCode\npnorm(q, mean = 0, sd = 1)\n\n\n[1] 0.1093486\n\n\nYou can compare this with the Z-score table.\n\n\nchiton example\nWhat is the probability of selecting a chiton that is less than 6 ft long given a normally distributed population with \\(\\mu = 12\\) g with \\(\\sigma = 3\\) g?\n\n\nCode\n# calculate the z-score\nchiton_z &lt;- (6 - 12)/3\n  \n# calculate the probability under the curve\npnorm(chiton_z, mean = 0, sd = 1)\n\n\n[1] 0.02275013"
  },
  {
    "objectID": "lecture/lecture_week-01.html#rule",
    "href": "lecture/lecture_week-01.html#rule",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "12. 68-95-99.7 rule",
    "text": "12. 68-95-99.7 rule\nIn a normal distribution, 68% of values lie within 1 standard deviation of the mean, 95% within 2 standard deviations, and 99.7% within 3 standard deviations.\n\n\nCode\nlabels &lt;- c(\n  \"\", \"\\U03BC - 3\\U03C3\", \"\\U03BC - 2\\U03C3\", \"\\U03BC - \\U03C3\", \"\\U03BC\", \"\\U03BC + \\U03C3\", \"\\U03BC + 2\\U03C3\", \"\\U03BC + 3\\U03C3\", \"\"\n)\n\nggplot(data.frame(x = -4:4), aes(x)) +\n  geom_linerange(x = 1, ymin = 0, ymax = 0.24) +\n  geom_linerange(x = -1, ymin = 0, ymax = 0.24) +\n  geom_linerange(x = 2, ymin = 0, ymax = 0.055) +\n  geom_linerange(x = -2, ymin = 0, ymax = 0.055) +\n  geom_linerange(x = 3, ymin = 0, ymax = 0.005) +\n  geom_linerange(x = -3, ymin = 0, ymax = 0.005) +\n  geom_linerange(x = 0, ymin = 0, ymax = 0.399) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1.5, color = \"darkorange\") +\n  scale_x_continuous(labels = labels, breaks = seq(-4, 4, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.41)) +\n  labs(x = \"\") +\n  theme_classic() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 24),\n        axis.line.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank())"
  },
  {
    "objectID": "lecture/lecture_week-01.html#students-t-distribution",
    "href": "lecture/lecture_week-01.html#students-t-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "13. Student’s t distribution",
    "text": "13. Student’s t distribution\n\n\nCode\nggplot(data.frame(x = -10:10), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#856F33\") +\n  annotate(\"text\", x = 3.5, y = 0.3, label = \"\\U03BD = 1\", color = \"#856F33\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 3), linewidth = 1, color = \"#E6821C\") + \n  annotate(\"text\", x = 3.5, y = 0.35, label = \"\\U03BD = 3\", color = \"#E6821C\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 5), linewidth = 1, color = \"#56E9E7\") +\n  annotate(\"text\", x = 3.5, y = 0.37, label = \"\\U03BD = 5\", color = \"#56E9E7\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 100), linewidth = 1, color = \"#04B37F\") +\n    annotate(\"text\", x = 3.5, y = 0.4, label = \"\\U03BD = 100\", color = \"#04B37F\", size = 6) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#uniform-distribution",
    "href": "lecture/lecture_week-01.html#uniform-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "14. Uniform distribution",
    "text": "14. Uniform distribution\n\n\nCode\nggplot(data.frame(x = 0:10), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dunif, args = list(min = 2, max = 8), linewidth = 1, color = \"firebrick4\") +\n  annotate(\"text\", x = 2, y = 0.172, label = \"a = 2\", color = \"firebrick4\", size = 6) + \n  annotate(\"text\", x = 8, y = 0.172, label = \"b = 8\", color = \"firebrick4\", size = 6) + \n  scale_x_continuous(breaks = seq(0, 10, 2)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(-0.001, 0.18)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#binomial-distribution",
    "href": "lecture/lecture_week-01.html#binomial-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "14. Binomial distribution",
    "text": "14. Binomial distribution\n\n\nCode\nggplot(data.frame(x = 1:20), aes(x)) +\n  stat_function(geom = \"line\", n = 20, fun = dbinom, args = list(size = 20, p = 0.1), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dbinom, args = list(size = 20, p = 0.1), color = \"#6D9929\", size = 3) +\n  annotate(\"text\", x = 5.5, y = 0.29, label = \"n = 20, p = 0.1\", color = \"#6D9929\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dbinom, args = list(size = 20, p = 0.4), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dbinom, args = list(size = 20, p = 0.4), color = \"#4A76E5\", size = 3) +\n  annotate(\"text\", x = 8, y = 0.2, label = \"n = 20, p = 0.4\", color = \"#4A76E5\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dbinom, args = list(size = 20, p = 0.7), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dbinom, args = list(size = 20, p = 0.7), color = \"#E67960\", size = 3) +\n  annotate(\"text\", x = 15, y = 0.21, label = \"n = 20, p = 0.7\", color = \"#E67960\", size = 6) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  labs(x = \"Number of successes\", y = \"Mass\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#poisson-distribution",
    "href": "lecture/lecture_week-01.html#poisson-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "15. Poisson distribution",
    "text": "15. Poisson distribution\n\n\nCode\nggplot(data.frame(x = 1:20), aes(x)) +\n  stat_function(geom = \"line\", n = 20, fun = dpois, args = list(lambda = 1), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dpois, args = list(lambda = 1), color = \"coral\", size = 4) +\n  annotate(\"text\", x = 3, y = 0.37, label = \"\\U03BB = 1\", color = \"coral\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dpois, args = list(lambda = 4), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dpois, args = list(lambda = 4), color = \"darkgreen\", size = 4) +\n  annotate(\"text\", x = 6, y = 0.2, label = \"\\U03BB = 4\", color = \"darkgreen\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dpois, args = list(lambda = 10), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dpois, args = list(lambda = 10), color = \"turquoise\", size = 4) +\n  annotate(\"text\", x = 14, y = 0.12, label = \"\\U03BB = 10\", color = \"turquoise\", size = 6) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Discrete value\", y = \"Mass\")"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Order By\n       Default\n         \n          Due date - Oldest\n        \n         \n          Due date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nDue date\n\n\n\n\n\n\nGetting set up\n\n\nApr 2, 2025\n\n\n\n\nReflection 1\n\n\nApr 6, 2025\n\n\n\n\nHomework 1\n\n\nApr 16, 2025\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "assignments/homework-01.html",
    "href": "assignments/homework-01.html",
    "title": "Homework 1",
    "section": "",
    "text": "Due on Wednesday April 16 (Week 3) at 11:59 PM\nRead these instructions before starting your homework and follow them carefully. See the end of this assignment for a checklist of components that your assignment must have at minimum (i.e. to earn at least partial credit). Only submit the items in that list, in the order requested."
  },
  {
    "objectID": "assignments/homework-01.html#part-1.-tasks",
    "href": "assignments/homework-01.html#part-1.-tasks",
    "title": "Homework 1",
    "section": "Part 1. Tasks",
    "text": "Part 1. Tasks\n\n\n\n\n\n\nNote\n\n\n\nYou will not need to submit any materials for tasks, but you are expected to complete the material/steps.\n\n\n\nTask 1. Set up your folders and .Rproj file\n\na. Create a new folder for this homework assignment within your ENVS-193DS folder.\nWithin the ENVS-193DS folder you set up, create a new folder for Homework 1. Name it whatever you want (a logical name could be homework-01).\n\n\nb. Download the files from Canvas\nDownload the homework files from Canvas into your homework folder on your computer. This includes:\n\nthe homework template\n\nglacial_volume_loss.csv\n\nglacial_volume_loss_copy.csv\n\n\n\nc. Create an Rproject for this homework assignment\nCreate an Rproj file within your homework-01 folder. If you need help with this, watch the “Creating an Rproject” video on Canvas.\n\n\n\nTask 2. Set up your code.\nAt the top of the template (or your own Quarto doc):\n\nLoad the tidyverse package.\n\nRead in data file 1 using read_csv(“glacial_volume_loss_copy.csv”) and store that as an object named glaciers.\n\n\n\nTask 3. Read about metadata from NOAA’s National Centers for Environmental Information\nRead the overview page on metadata here to understand what metadata is.\nThen, click through to the “Introduction to Metadata” page (under “Learn”) and read the questions that you should be able to answer with metadata.\n\nYou are now ready to start your homework!"
  },
  {
    "objectID": "assignments/homework-01.html#part-2.-problems-code-and-figures",
    "href": "assignments/homework-01.html#part-2.-problems-code-and-figures",
    "title": "Homework 1",
    "section": "Part 2. Problems, code, and figures",
    "text": "Part 2. Problems, code, and figures\n\nProblem 1. Measures of central tendency and data spread (11 points)\nAfter this winter’s rains, you’ve developed a new interest in slender salamanders (Batrachoseps spp.) You’ve collected the following lengths (in centimeters) for salamanders:\n\\[\n4.6, 4.4, 6.2, 5.2, 3.7, 6.0, 3.9, 4.6, 2.7\n\\]\n\nIn one sentence, categorize this data set: what type of data did you collect, and why is it that type? (2 points)\n\nCalculate the sample mean. Express your answer with the correct units and round to 1 decimal point. (3 points)\n\nCalculate the sample variance. Express your answer with the correct units and round to 1 decimal point. (3 points)\n\nCalculate the sample standard deviation. Express your answer with the correct units and round to 1 decimal point. (3 points)\n\n\n\nProblem 2. Visualizing data (50 points)\nIn this problem, you’ll work with data collected by the National Snow and Ice Data Center on glacial mass and sea level rise.\nBefore you start this problem, read about the data here.\nQuestions:\n\nOpen up the two data files (glacial_volume_loss_copy.csv and glacial_volume_loss.csv) in Excel (or another program, if you use something different). Look at the files side-by-side. In one sentence, explain how the data files are different. (2 points)\nUsing the “Introduction to Metadata” information from Task 3, choose one question from the examples for “Who”, “What”, “Why”, “Where”, “When” and “How”. Answer the questions you chose using the metadata in glacial_volume_loss.csv.\n\nEach response should have the “question” (who, what, why, where, when, how), the example (“Who collected and processed the data?”), and your response. Format each as:\n\nWho: Who collected and processed the data? [insert response here]\n\nWhat: What are the data about? [insert response here]\n\nWhy: Why were the data collected? [insert response here]\n\nWhere: Where are the data located? [insert response here]\n\nand so on. You should have one response for each question and example. (18 points)\n\n\n\n\n\n\nBefore you start parts c and d\n\n\n\n\n\nOn paper, sketch out the axes for the histogram and the scatterplot. Label the axes, and write down the columns in the data frame you will need to use to make the figures. Draw the bars of the histogram and the points of the scatterplot.\nBy doing this before you code up your figure, you’ll be able to gain some intuition for what your figure should look like. You can then check your work against what you thought based on your drawing.\n\n\n\n\nCreate a histogram of annual sea level rise using ggplot(). Label the x- and y-axes. (16 points)\n\nCreate a scatterplot of cumulative sea level rise through time (year on the x-axis, cumulative sea level rise on the y-axis) using ggplot(). Label the x- and y-axes. (14 points)\n\n\n\nProblem 3. Personal data (32 points total)\nThis quarter, you’ll collect data from your own life to see how data science concepts are part of your daily existence. For this homework assignment, you’ll come up with two ideas for data collection. The data you collect:\n\nhas to be something you can get at least 30 observations on by week 10 (e.g. minutes to get from ENVS 193DS to your next class, not number of shark views per week)\n\nhas to be something that you could actually remember to write down (e.g. liters of water consumed in a day, not time spent on tiktok)\n\nhas to be be shaped by a question\n\nhas to include variables that would be appropriate to share with the class\n\nFor each idea you have (remember you have to come up with two ideas), you should:\n\narticulate a question (2 points each)\n\ndescribe your response variable (i.e. your variable of interest) (2 points each)\n\ndescribe your predictor variable (2 points each)\n\ndescribe what variables you should measure or record that indicate the time of the observation (for example: date or time of day) (2 points each)\ndescribe 4 additional variables you think you should measure or record that could also influence your response variable (2 points each)\n\ndescribe what type of data all your variables are with units (2 points each)\n\ndescribe the sources of your data (e.g. phone step tracker, screen time tracker, self) (2 points each)\n\ndescribe when you would take down data for an observation (2 points each)\n\ndesign a data sheet with some example data: what are the columns and what are the rows? (2 points each)\n\n\n\n\n\n\n\nNeed an example? Here’s An’s.\n\n\n\n\n\n\nQuestion: Do I go on longer runs on non-work days?\n\nMy response variable is length of run, measured in miles.\n\nMy predictor variable is work day (yes or no).\n\nI would record the date and time of day.\n\nduration, average pace, cadence, temperature, elevation, type of run, run location, hydration level\n\n\n\n\ndate (yyyy-mm-dd): continuous\n\ntime of day (hh:mm, 24 hour time): continuous\n\nduration (mm:ss): continuous\n\nlength (miles): continuous\n\naverage pace (min/mile): continuous\n\ncadence (steps/min): continuous\n\ntemperature (F): continuous\n\nelevation (feet): continuous\n\ntype of run (road, trail, mix): categorical\n\nrun location (neighborhood, front country, NCOS, other): categorical\n\nhydration level (&gt; 2 L, between 1-2 L, less than 1 L): categorical\n\nwork day (yes/no): binary categorical\n\n\nDate, time of day, duration, length, average pace, cadence, temperature, and elevation are all variables that I could get from Strava (a running tracking app). The 4 additional variables that I could not get from Strava and could influence the length of my run are: type of run, run location, hydration level, and work day. I would assign these categories myself.\nI would record my data after every run.\n\n\n\n\n\n\n\n\n\n\n\nWhen can I start collecting data?\n\n\n\nAn will give you feedback and recommendations for what to pursue for this project on Canvas on Thursday the 17th of April. That means that you should be able to start collecting data by the end of week 3, if not sooner.\n\n\n\n\nProblem 4. Setting up statistical critique (6 points)\nThroughout the quarter, you’ll engage in a critique of statistical methods for a published paper. Some methods are appropriate for the data and research questions, and some are not. You’ll be the judge.\nFor this homework assignment, you will find 3 candidate papers for your critique. Find 3 papers that speak to your interests - the paper could be on human health, plant restoration, agroecology, or more. Anything you might be interested in within the realm of environmental studies is fair game. Not all 3 papers have to be on the same topic.\n\nFor each paper, read the Abstract to get a general sense of what the paper is about. Then, read the Methods section, looking for information on statistical analysis. A paper is a good choice if it includes one of these terms (or something similar) in the analysis description:\n\nt-test\n\nAnalysis of variance (ANOVA)\n\nMann-Whitney U\n\nKruskal-Wallis\n\nWilcoxon rank sum\n\nLinear model or linear regression\n\nSpearman correlation\n\nPearson correlation\n\nlogistic regression\n\nGeneralized linear mixed effect model\n\nOnce you’ve verified that your paper includes at least one of the above listed terms, find the digital object identifier (DOI), which is a unique identifier in the form of a URL for a paper. You will know it is a DOI if it has doi.org somewhere in the URL.\n\nOnce you find the DOI for your paper, add it to the Google form. Repeat this for all three papers. (3 points)\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to see what other people have chosen, see the class responses here.\n\n\n\nIn your homework document, list the papers in alphabetical order by author last name. (3 points)\nYour citations should take the form:\nLast name, first name, et al. Year. “Paper title.” Journal title volume:issue.\nExample:\nSanford, E., et al. 2019. “Widespread shifts in the coastal biota of northern California during the 2014–2016 marine heatwaves.” Scientific Reports 9:4216."
  },
  {
    "objectID": "assignments/homework-01.html#double-check-your-assignment",
    "href": "assignments/homework-01.html#double-check-your-assignment",
    "title": "Homework 1",
    "section": "Double check your assignment!",
    "text": "Double check your assignment!\nYour assignment should:\n\ninclude your name, the title, and the date (3 points)\n\ninclude all code with annotations (5 points)\n\nbe organized and readable (5 points)\n\nbe uploaded to Canvas as a single PDF (2 points)\n\nYour responses should include:\n\nwork and written responses for Problem 1\n\nwritten responses, annotated code, and figure outputs for Problem 2\n\nwritten responses for Problem 3\n\nwritten responses (3 paper citations) for Problem 4\n\nAdditionally, you should:\n\npaste 3 DOIs for the papers you’re interested in in the Google form\n\nLastly, check out the rubric on Canvas to see the point breakdown in more detail (rubric will be posted at the end of the day on Monday 7 April).\n100 points total"
  },
  {
    "objectID": "assignments/homework-01.html#frequently-asked-questions",
    "href": "assignments/homework-01.html#frequently-asked-questions",
    "title": "Homework 1",
    "section": "Frequently Asked Questions",
    "text": "Frequently Asked Questions\n\nI’m having trouble rendering to PDF. What can I do?\nYou could either install all the additional things R is asking for you to install, or you can render to a word doc instead (change pdf in the top part of the document to docx) and save that doc as a PDF.\n\n\nI don’t know how to insert an image into a Quarto document. How do I do that?\nHere is a resource for Quarto. If you rendered your Quarto file to a word document, you can insert an image into that word document the same way you would with any other word doc.\n\n\nWhere is the feedback for problem 4?\nIt is in the google sheet."
  },
  {
    "objectID": "workshop.html",
    "href": "workshop.html",
    "title": "Workshop documents",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nCoding workshop: Week 1\n\n\nbasics of using RStudio, intro to tidyverse\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resources/using-virtual-machine.html",
    "href": "resources/using-virtual-machine.html",
    "title": "Using the virtual machine",
    "section": "",
    "text": "1. What is the virtual machine?\nFor this class, we have a virtual machine: it allows you to run R and RStudio in a browser (e.g. Google Chrome, Safari, Firefox). Find the virtual machine here!\nThe benefits of using the virtual machine are plenty:\n\nyou don’t have to download R, RStudio, and Quarto\n\nthe versions of all the software you need are updated\n\nthe packages you need for the class are already installed\n\nyou can download everything you’ve worked on\n\nand more!\nThe one con is that you do need to be connected to the internet. But compared to the benefits, this is hopefully not a major hurdle.\nBasically, if you’re having any issues with your versions of R, RStudio, or Quarto, try running your code on the virtual machine.\n\n\n2. Logging in and opening things up\nOnce you open up the virtual machine, you’ll be asked to log in. Use your UCSB email to do that. You should then get a screen that looks like this:\n Click RStudio.\nYou should then see a screen that looks exactly like an RStudio screen!\n\n\n\n3. Setting up\nIf you’re opening this up for the first time, do task 4 in the Getting set up guide: Change your settings.\nAdditionally, you’ll want to set up a new folder for your ENVS 193DS materials. Make a new folder called ENVS-193DS by clicking on the “Folder” button in the Files tab in the bottom right.\n\n\n\n4. Getting files into the machine\nDownload the zipped file of workshop materials from Canvas. Hit the Upload button (yellow arrow pointing up against a white paper). You should see a window that looks like this:\n\nHit Choose file and select the .zip file.\nThe machine will automatically unzip the file and create a new folder with all the file contents.\n\n\n\n5. Creating and using Rprojects\nWe’re going to create a lot of Rprojects in this class to get used to it. You can create a project in an existing directory (aka folder) in the same way that you would in the desktop version of RStudio. Go to the button in the top left that says Project: (None) and click. Hit New Project.\n Then, select the “Existing Directory” option.\n\nChoose the directory you want to create a project in. Once you click “Browse”, you’ll see a box that looks like this:\n\nDouble click the folders until you get to the one you want (in this example, I went from ENVS-193DS &gt; ENVS-193DS_workshop-01).\nYou can confirm that you chose the right folder once you hit “Choose”:\n\nHit “Create Project”.\nYou should now see the new Rproject in two locations: 1) in the upper right corner and 2) in the list of files in your directory.\n\nOnce you’re done working in your project, you can close the project by going to Project &gt; Close Project.\n\nIf you need to open your project again, navigate to the folder using the Files tab in the bottom right corner. Click on the .Rproj file. You will then see a window that looks like this:\n\nHit “Yes” to open the project.\n\n\n6. Downloading your files\nIf you want to hold onto your files on your computer (for example, once the class ends), you can download a whole directory. Click on the folder you want to download and go to More &gt; Export in the lower right pane.\n\nThe machine will download the whole folder as a .zip file, which you can then unzip on your computer."
  },
  {
    "objectID": "lecture.html",
    "href": "lecture.html",
    "title": "Lecture visualizations",
    "section": "",
    "text": "Order By\n       Default\n         \n          Lecture date - Oldest\n        \n         \n          Lecture date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nLecture date\n\n\n\n\n\n\nWeek 1 figures - Lectures 1 and 2\n\n\nMar 31, 2025\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]