[
  {
    "objectID": "workshop/workshop-01_2023-04-05.html",
    "href": "workshop/workshop-01_2023-04-05.html",
    "title": "Coding workshop: Week 1",
    "section": "",
    "text": "1. Assigning values to objects\nWe’ll start with some basics. We’ll assign values to objects.\n\n# assign the number 5 to an object called snail_length\nsnail_length <- 5\n\n\n# print snail_length\nsnail_length\n\n[1] 5\n\n\nYou’ll see the output of this in the console, not your script.\nNow that you’ve assigned this value to an object, you can start to work with it. Let’s see what snail_length/2 is.\n\nsnail_length/2\n\n[1] 2.5\n\n\nThis doesn’t change the value of snail_length - check this in the console.\n\nsnail_length\n\n[1] 5\n\n\nYou can save this new variable as another object.\n\nhalf <- snail_length/2\n\n\n\n2. Using functions\nFunctions are where R gets interesting. R allows you to apply functions to do calculations, from simple to complex structures.\nWe can start by calculating the square root of snail_length.\n\nsqrt(snail_length)\n\n[1] 2.236068\n\n\nWe might not want all the digits in that calculation, so we could round it using the round() function.\n\nround(sqrt(snail_length))\n\n[1] 2\n\n\nThis rounds snail_length to 4. However, we want to be a little more precise than that. Check out what round() does in the console by typing ?round.\nLet’s round snail_length to 3 digits instead of the next whole number.\n\nround(sqrt(snail_length), digits = 3)\n\n[1] 2.236\n\n\n\n\n3. Basic sorting and filtering\nNow, let’s try a vector of numbers. Let’s say that we measured a bunch of different fish and recorded their weights in kilograms.\n\nfish_weights <- c(1, 2, 3, 1, 2)\n\nLet’s say “small” fish are any fish that are < 2 kilograms. We want to know the weights of all the “small” fish that we collected.\n\nfish_weights[fish_weights < 2]\n\n[1] 1 1\n\n\nWhat if we want all the “big” fish?\n\nfish_weights[fish_weights > 2]\n\n[1] 3\n\n\n\n\n4. Packages\nPackages (or libraries) have functions that aren’t already built into R.\nYou can install packages in one of two ways. The first (most common) way is to use the functioninstall.packages(). This is for any package that is on CRAN, or the Comprehensive R Archive Network. Try installing the package {tidyverse} using the following command: install.packages(\"tidyverse\").\nNow you have a package installed! But you now need to “load it in” to your environment. Installing a package is like buying a pan - you only need to do it once if you want to cook. However, you still need to put the pan on the stove in order to start cooking.\nYou can load in any package using the function library(). Try loading in the package below.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n\nNothing shows up once you’ve loaded in the package, but now you’re ready to use the functions in it!\n\n\n5. working with data in R\nLater in the quarter, we’ll work with data sets from real examples (i.e. from research). To get acquainted with how to work with data in R, we’ll use some of the built-in examples. Go to the documentation to see the list of data sets that are pre-installed with R. The topics are all over the place, but they are useful for testing things out if the data you have to work with is big and unwieldy.\nOne of the packages that has a cool dataset to test things out with is called {palmerpenguins}. Install it in your console and load it in to your environment.\nWhat is {palmerpenguins}? Read about it here.\nThe first step to using data is looking at it! Use View(penguins) to see what it is.\n(Hint: did that not work? Remember to load in the package before you start using it.)\n\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\npenguins is a data frame. Data frames have rows and columns, and their cells contain data. In this case, this data frame has 8 columns and 344 rows, which you can see in the visual display.\nFigure out what the columns are by using colnames(penguins).\n\ncolnames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n\n\nWrite out 1) the column name, 2) what type of variable it is, and 3) what data are in them. For example:\n- species: categorical, penguin species\n- island: categorical, islands were penguins were sampled\n- bill_length_mm: continuous, bill length in mm\n- bill_depth_mm: continuous, bill depth in mm\n- flipper_length_mm: continuous, flipper length in mm\n- body_mass_g: continuous, body mass in grams\n- sex: categorical, male or female\n- year: categorical (ordinal), year sampled\nYou can learn about the structure of a data frame by running the function str(). What is the output for that?\n\nstr(penguins)\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\n\nLet’s figure out some basic information about the data set. What’s the longest bill length they measured on a penguin? Save that as an object called long_bill.\n\nlong_bill <- 59.6\n\nWe did that visually, but you can do that in code. The function max() allows you to get the maximum number in a vector, which is a list of numbers. (Note: how would you double check how the function works if you hadn’t used it before?)\n\nmax(penguins$bill_length_mm)\n\n[1] NA\n\n\nHuh. That was weird. We knew the longest bill was 59.6, but why does this say NA?\n\nmax(penguins$bill_length_mm, na.rm = TRUE)\n\n[1] 59.6\n\n\nThat’s a lot better!\nTry finding the minimum bill length, and saving that as an object called short_bill.\n\nmin(penguins$bill_length_mm, na.rm = TRUE)\n\n[1] 32.1\n\n\n\n\n6. data exploration\nLet’s say you think the three different penguin species have different body masses, on average. This is where the {tidyverse} package we were using before comes in handy.\nWe know that there’s a column in the data frame that has species, and another column that has body masses. So if there’s a way we can get all the rows belonging to a species, then take all the numbers for body mass and average them, we can figure out the average body mass for a penguin species in the sample.\nThere are tidyverse functions that can help with that:\n- group_by(): identifying natural groups in the data frame (categorical variables)\n- summarize(): summarizes the data based on what you want\n- %>%: a very!!! useful operator (not a function). This is called a “pipe” and it allows you to string functions together. You’re basically telling R, “… and then”. An example below:\n\n# tell R what data frame you want to use\npenguins %>% \n  # and then, group the data frame by species\n  group_by(species) %>% \n  # and then, summarize: create a new column called `mean_body_mass` from body_mass_g\n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  species   mean_body_mass\n  <fct>              <dbl>\n1 Adelie             3701.\n2 Chinstrap          3733.\n3 Gentoo             5076.\n\n\nTry figuring out what the maximum flipper length is by island.\n\n# tell R that you want to use the data frame penguins\npenguins %>% \n  # and then, group the data frame by island\n  group_by(island) %>% \n  # and then, summarize: create a new column called 'max_flipper_length' from flipper_length_mm\n  summarize(max_flipper_length = max(flipper_length_mm, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  island    max_flipper_length\n  <fct>                  <int>\n1 Biscoe                   231\n2 Dream                    212\n3 Torgersen                210\n\n\nYou can also group by multiple columns.\n\n# use penguins\npenguins %>% \n  # group by island, then species\n  group_by(island, species) %>% \n  # summarize: get max flipper length\n  summarize(max_flipper_length = max(flipper_length_mm, na.rm = TRUE))\n\n`summarise()` has grouped output by 'island'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 5 × 3\n# Groups:   island [3]\n  island    species   max_flipper_length\n  <fct>     <fct>                  <int>\n1 Biscoe    Adelie                   203\n2 Biscoe    Gentoo                   231\n3 Dream     Adelie                   208\n4 Dream     Chinstrap                212\n5 Torgersen Adelie                   210\n\n\nWhat if you only want Biscoe island?\n- filter(): filters a data frame by data in a column\n\n# use the penguins data frame\npenguins %>% \n  # filter the data frame to only include Biscoe Island\n  filter(island == \"Biscoe\") %>% \n  # group by species\n  group_by(species) %>%\n  # calculate mean body mass\n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 2 × 2\n  species mean_body_mass\n  <fct>            <dbl>\n1 Adelie           3710.\n2 Gentoo           5076.\n\n\n\n\n\n\nCitationBibTeX citation:@online{bui2023,\n  author = {An Bui},\n  editor = {},\n  title = {Coding Workshop: {Week} 1},\n  date = {2023-04-05},\n  url = {https://an-bui.github.io/ES-193DS-W23/workshop/workshop-01_2023-04-05.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nAn Bui. 2023. “Coding Workshop: Week 1.” April 5, 2023. https://an-bui.github.io/ES-193DS-W23/workshop/workshop-01_2023-04-05.html."
  },
  {
    "objectID": "workshop.html",
    "href": "workshop.html",
    "title": "Workshop documents",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nApr 5, 2023\n\n\nCoding workshop: Week 1\n\n\nAn Bui\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to ES 193DS, Winter 2023!",
    "section": "",
    "text": "This is a page where the rendered outputs for all the materials we use in class are kept."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]