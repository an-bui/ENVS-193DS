[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nFixing code and getting help\n\n\nNeed help? Check here!\n\n\n\n\nUsing the virtual machine\n\n\nCan’t install R/RStudio on your computer? Don’t have a computer? Use the virtual machine!\n\n\n\n\nCampus resources\n\n\nplaces you can get help\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "ENVS 193DS",
    "section": "Instructor",
    "text": "Instructor\n\n\n\n\n\n\n\n\nName: An Bui\nEmail: an_bui [at] ucsb [dot] edu\nDrop-in hours: Wednesdays 3:30 - 5:30 PM\nDrop-in location: At the tables outside the UCen 1st floor (facing the lagoon)\nMore about me: an-bui.com"
  },
  {
    "objectID": "index.html#teaching-assistants",
    "href": "index.html#teaching-assistants",
    "title": "ENVS 193DS",
    "section": "Teaching assistants",
    "text": "Teaching assistants\n\n\n\nName: Thuy-Tien Bui\nEmail: thuy-tienbui [at] ucsb [dot] edu\nTeaching day: Thursdays\nDrop-in hours: Thursdays 2:00 - 3:00 PM\nDrop-in location: TBD\nMore about me: https://thuy-tienbui.github.io/\n\n\n\n\nTA: Grace Lewin\nEmail: glewin [at] ucsb [dot] edu\nTeaching day: Fridays\nDrop-in hours: Fridays 11:00 AM - 12:00 PM\nDrop-in location: TBD\nMore about me: TBD\n\n\n\nAcknowledgements\nI took much of my inspiration for this course from Allison Horst’s Environmental Data Science and Statistics course, Sam Sambado’s Biometry course, and Sam Csik’s Data Visualization and Communication course."
  },
  {
    "objectID": "resources/campus-resources.html",
    "href": "resources/campus-resources.html",
    "title": "Campus resources",
    "section": "",
    "text": "The Office of Student Conduct has a list of the resources available to students at UCSB. Some especially useful ones include:\n\nDisabled Students Program: testing accommodations, note-taking help\n\nCounseling & Psychological Services: mental health care and counseling\n\nResource Center for Sexual & Gender Diversity: resources to support members of the LGBTQIA+ community"
  },
  {
    "objectID": "resources/asking-for-code-help.html#before-doing-any-coding-remember",
    "href": "resources/asking-for-code-help.html#before-doing-any-coding-remember",
    "title": "Fixing code and getting help",
    "section": "Before doing any coding, remember:",
    "text": "Before doing any coding, remember:\n\nThings will go wrong when you are coding.\nThis happens to everyone, and is normal! It is totally ok to ask someone on the teaching team to help fix your code; however, you should feel empowered to figure out what is wrong with your code on your own, and we will talk through best practices to do so.\n\n\nStart assignments with enough time to troubleshoot!\nYou will run into errors when doing your assignments. Don’t leave things to the last minute! This class requires you to plan in advance to get things done correctly and on time. We talk about assignments in class a week before the due date - take that week to read the assignment, do the easy problems first, try your code, troubleshoot, and finally submit!\nHere are some tried-and-true steps to troubleshooting code in this class, and beyond:"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-1.-take-a-deep-breath-seriously",
    "href": "resources/asking-for-code-help.html#step-1.-take-a-deep-breath-seriously",
    "title": "Fixing code and getting help",
    "section": "Step 1. Take a deep breath (seriously)!",
    "text": "Step 1. Take a deep breath (seriously)!\nErrors show up in red text and look super alarmed. Easier said than done, but do not be alarmed! Take a moment before panicking, and then…"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-2.-look-for-typos.",
    "href": "resources/asking-for-code-help.html#step-2.-look-for-typos.",
    "title": "Fixing code and getting help",
    "section": "Step 2. Look for typos.",
    "text": "Step 2. Look for typos.\nDo you have a period where there should be a comma? Have you spelled everything correctly? Are you missing a parenthesis somewhere? All sorts of things can happen when you’re typing a bunch; double check your code to make sure you don’t have any typos."
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-3.-google-the-error.",
    "href": "resources/asking-for-code-help.html#step-3.-google-the-error.",
    "title": "Fixing code and getting help",
    "section": "Step 3. Google the error.",
    "text": "Step 3. Google the error.\nChances are you are not the only person who has ever experienced the specific error you are encountering. So, google it!\nYou can be smart about how you google things to find a solution to your problem. See Sam Shanny-Csik’s tutorial called “Teach Me How to Google” for tips on how to google to find solutions to coding problems.\nFor the next step, try at least 2 of these options:"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-4a.-ask-someone-to-look-at-your-code",
    "href": "resources/asking-for-code-help.html#step-4a.-ask-someone-to-look-at-your-code",
    "title": "Fixing code and getting help",
    "section": "Step 4a. Ask someone to look at your code!",
    "text": "Step 4a. Ask someone to look at your code!\nThis can be anyone: your housemate who knows how to code, your friend who took this class last year, etc.. Show your code to an actual human being (who knows how to code) and ask them if they can see anything wrong!"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-4b.-try-rubber-duck-debugging",
    "href": "resources/asking-for-code-help.html#step-4b.-try-rubber-duck-debugging",
    "title": "Fixing code and getting help",
    "section": "Step 4b. Try rubber duck debugging!",
    "text": "Step 4b. Try rubber duck debugging!\nRubber duck debugging is a silly way of talking through what you’re trying to do with your code. Generally, the steps are as follows (feel free to replace the rubber duck with an actual person or another object you want to use):\n\nObtain a rubber duck.\n\nLook at the rubber duck.\n\nExplain to the duck out loud, in words what you are trying to do with your code, line by line.\n\nAt some point, you will figure out what you did wrong!"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-4c.-go-to-sleep",
    "href": "resources/asking-for-code-help.html#step-4c.-go-to-sleep",
    "title": "Fixing code and getting help",
    "section": "Step 4c. Go to sleep!",
    "text": "Step 4c. Go to sleep!\nThis says it all:\n\n\n\n\n\nClose your computer! Go for a walk! Take a shower! Go to sleep! Do whatever you want other than keep coding. When you take a break, you might be able to figure out your problem.\nIf you’re still stuck then…"
  },
  {
    "objectID": "resources/asking-for-code-help.html#step-5.-email-someone-on-the-teaching-team-grace-thuy-tien-or-an",
    "href": "resources/asking-for-code-help.html#step-5.-email-someone-on-the-teaching-team-grace-thuy-tien-or-an",
    "title": "Fixing code and getting help",
    "section": "Step 5. Email someone on the teaching team (Grace, Thuy-Tien, or An)",
    "text": "Step 5. Email someone on the teaching team (Grace, Thuy-Tien, or An)\nWe are here to help you! However, inquiries about how to fix code will only be addressed if they include brief (1-2 sentences each) descriptions of the following: 1. What you’re trying to do\n2. What the problem is\n3. What you have done to try to solve the problem on your own\nWe can also best help you if you provide a screenshot of your code or the script so that we can see what is happening.\n\n\n\n\n\n\nBe patient with a response!\n\n\n\nAgain, we are here to help you - but if you email at 11:58 on Wednesdays right before the homework is due, it’s unlikely that you’ll get a response right away! You can expect a response from one of us within 36 hours of emailing (though we will try to respond sooner than that); plan accordingly!"
  },
  {
    "objectID": "assignments/reflection-01.html",
    "href": "assignments/reflection-01.html",
    "title": "Reflection 1",
    "section": "",
    "text": "Due on Sunday April 6 (Week 1) at 11:59 PM\nIn this assignment, you’ll introduce yourself and come up with a plan for what you’d like to get out of the class and roughly outline what you’d like to accomplish over the course of the quarter. You’ll continue visiting the goals you set for yourself in this assignment throughout the quarter, so it’s worth it to be as clear and specific as you can."
  },
  {
    "objectID": "assignments/reflection-01.html#components",
    "href": "assignments/reflection-01.html#components",
    "title": "Reflection 1",
    "section": "Components",
    "text": "Components\n\nA brief introduction\n\nyour name\n\nyour major\nyour year\n\npronouns (only if you feel comfortable sharing)\n\n\n\nSome questions about school and life\n\nWhy are you taking this class?\n\nWhat do you hope to get out of this class?\n\nIf you have a career in mind, how does this course apply to your future career, if at all?\n\nWhat do you wish your instructors knew about you, but don’t?\n\n\n\nSome questions about the way you like to learn\n\nWhat kinds of assignments, skills, or behaviors have you felt most comfortable with/enjoy from past classes? Why do you enjoy them?\n\nHow confident do you feel in your statistics skills (however you want to interpret that)? Why?\n\nHow confident do you feel in your coding skills (again, however you want to interpret that)? Why?\n\nWhat have you struggled with in the past in math or statistics courses? Why?\n\nOf the courses you’re taking this quarter, which do you expect to be the most challenging? Most demanding?\n\nWhich learning goals from the syllabus are you most excited about?\n\nWhat other learning goals do you have for the course?\n\nMost importantly, how do you plan on accomplishing your learning goals for this course?\n\n\n\n\n\n\n\nNote\n\n\n\nBe specific here! Instead of writing, “I will complete homework assignments” or “I will study”, you can make these more specific strategies: “I will use the homework assignments as opportunities for practice. I will communicate with classmates for help after trying…”"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Order By\n       Default\n         \n          Due date - Oldest\n        \n         \n          Due date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nDue date\n\n\n\n\n\n\nGetting set up\n\n\nApr 2, 2025\n\n\n\n\nReflection 1\n\n\nApr 6, 2025\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "lecture/lecture_week-01.html",
    "href": "lecture/lecture_week-01.html",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "",
    "text": "Code\n# cleaning\nlibrary(tidyverse)\ntheme_set(theme_classic() +\n            theme(panel.grid = element_blank(),\n                  axis.text = element_text(size = 18),\n                  axis.title = element_text(size = 18),\n                  text = element_text(family = \"Lato\")))\n\n# visualization\nlibrary(patchwork)"
  },
  {
    "objectID": "lecture/lecture_week-01.html#set-up",
    "href": "lecture/lecture_week-01.html#set-up",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "",
    "text": "Code\n# cleaning\nlibrary(tidyverse)\ntheme_set(theme_classic() +\n            theme(panel.grid = element_blank(),\n                  axis.text = element_text(size = 18),\n                  axis.title = element_text(size = 18),\n                  text = element_text(family = \"Lato\")))\n\n# visualization\nlibrary(patchwork)"
  },
  {
    "objectID": "lecture/lecture_week-01.html#math",
    "href": "lecture/lecture_week-01.html#math",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "1. Math",
    "text": "1. Math\n\nsample mean\n\\[\n\\bar{y} = \\frac{1}{n}\\sum_{i = 1}^ny_i\n\\]\n\n\nsample variance\n\\[\ns^2 = \\frac{\\sum(y_i - \\bar{y})^2}{n - 1}\n\\]\n\n\nsample standard deviation\n\\[\ns = \\sqrt{\\frac{\\sum(y_i - \\bar{y})^2}{n - 1}}\n\\]\n\n\ncoefficient of variation\n\\[\nCV = \\frac{\\sigma}{\\mu}\n\\]\n\n\nz-score for selecting a single individual\n\\[\nz = \\frac{y_i - \\mu}{\\sigma}\n\\]"
  },
  {
    "objectID": "lecture/lecture_week-01.html#mean-and-median",
    "href": "lecture/lecture_week-01.html#mean-and-median",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "2. Mean and median",
    "text": "2. Mean and median\nFor data following a symmetrical distribution, the mean and median tend to be similar.\n\n\nCode\nset.seed(1)\nrnorm(n = 40, mean = 6, sd = 1) %&gt;% \n  as_tibble() %&gt;% \n  ggplot(aes(x = value)) +\n  geom_density() +\n  geom_vline(aes(xintercept = mean(value)), color = \"blue\") +\n  annotate(\"text\", x = 5.75, y = 0.5, label = \"mean\", color = \"blue\") +\n  geom_vline(aes(xintercept = median(value))) +\n  annotate(\"text\", x = 6.5, y  = 0.5, label = \"median\") +\n  scale_x_continuous(limits = c(2.5, 10)) +\n  scale_y_continuous(limits = c(0, 0.5)) +\n  labs(x = \"Sculpin lengths (cm)\") +\n  theme(axis.text.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank())"
  },
  {
    "objectID": "lecture/lecture_week-01.html#range",
    "href": "lecture/lecture_week-01.html#range",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "3. Range",
    "text": "3. Range\n\n\nCode\nset.seed(1)\nnarrow &lt;- rnorm(n = 30, mean = 6, sd = 1) %&gt;% \n  as_tibble() %&gt;% \n  mutate(y = 0) %&gt;% \n  ggplot(aes(x = value, y = y)) +\n  geom_jitter(shape = 21) +\n  geom_point(aes(x = mean(value), y = 0), color = \"blue\", size = 3) +\n  scale_x_continuous(limits = c(0, 15)) +\n  scale_y_continuous(limits = c(-0.5, 0.5)) +\n  theme(axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank()) +\n  labs(x = \"Sculpin lengths (cm)\")\n# min: 3.78\n# max: 7.60\n\nset.seed(1)\nwide &lt;- rnorm(n = 30, mean = 6, sd = 2) %&gt;% \n  as_tibble() %&gt;% \n  mutate(y = 0) %&gt;% \n  ggplot(aes(x = value, y = y)) +\n  geom_jitter(shape = 21) +\n    geom_point(aes(x = mean(value), y = 0), color = \"blue\", size = 3) +\n  scale_x_continuous(limits = c(0, 15)) +\n  scale_y_continuous(limits = c(-0.5, 0.5)) +\n  theme(axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank()) +\n  labs(x = \"Sculpin lengths (cm)\")\n# min: 1.57\n# max: 9.19\n\nnarrow + wide\n\n\n\n\n\n\n\n\n\n\nHow would you describe this data?\n\n\nCode\nset.seed(1)\nex1 &lt;- rf(n = 100, df1 = 30, df2 = 10)\nmean(ex1)\n\n\n[1] 1.321259\n\n\nCode\nmedian(ex1)\n\n\n[1] 1.163362\n\n\nCode\nex1 %&gt;% \n  enframe() %&gt;% \n  ggplot(aes(x = value)) +\n  geom_histogram(bins = 9,\n                 color = \"#000000\",\n                 fill = \"orange\") +\n  scale_y_continuous(expand = c(0, 0)) +\n  labs(x = \"Hermit crab shell length (cm)\")\n\n\n\n\n\n\n\n\n\nCode\nset.seed(1)\nex2 &lt;- rnorm(n = 100, mean = 25, sd = 5)\nmean(ex2)\n\n\n[1] 25.54444\n\n\nCode\nmedian(ex2)\n\n\n[1] 25.56955\n\n\nCode\nex2 %&gt;% \n  enframe() %&gt;% \n  ggplot(aes(x = value)) +\n  geom_histogram(bins = 9,\n                 color = \"#000000\",\n                 fill = \"darkgreen\") +\n  scale_y_continuous(expand = c(0, 0)) +\n  labs(x = \"Octopus arm length (cm)\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#anemone-regression-example",
    "href": "lecture/lecture_week-01.html#anemone-regression-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "4. anemone regression example",
    "text": "4. anemone regression example\n\n\nCode\n# number of arms \narms &lt;- seq(from = 40, to = 100, by = 1)\n\n# diameter: anemones can be up to 8 cm long\nset.seed(10)\ndiam &lt;- rnorm(length(arms), mean = seq(from = 1, to = 5, length = length(arms)), sd = 1) \n\n# create a data frame\ndf &lt;- cbind(diam, arms) %&gt;% \n  as.data.frame()\n\nggplot(df, aes(x = arms, y = diam)) +\n  geom_point(size = 2) +\n  labs(x = \"Number of arms\", y = \"Diameter (cm)\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(df, aes(x = arms, y = diam)) +\n  geom_point(size = 2) +\n  # just using geom smooth for the purposes of visualization\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 2) +\n  labs(x = \"Number of arms\", y = \"Diameter (cm)\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#histogram-example",
    "href": "lecture/lecture_week-01.html#histogram-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "5. histogram example",
    "text": "5. histogram example\nThe Rice rule guidelines for the calculating the number of bins in a histogram:\n\\[\nbins = 2n^{1/3}\n\\]\nwhere \\(n\\) is the number of observations. This is an example of a histogram that does follow the rice rule, where the bin number is 8.\n\n\nCode\nggplot(df, aes(x = diam)) +\n  scale_x_continuous(breaks = seq(from = 0, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 19), breaks = seq(from = 0, to = 18, by = 3)) +\n  geom_histogram(breaks = seq(from = 0, to = 8, by = 1), color = \"#000000\", fill = \"lightblue\") +\n  labs(x = \"Anemone diameter (cm)\", y = \"Count\") +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n\n\n\nThese histograms do not, and it proves difficult to see the distribution:\n\n\nCode\nggplot(df, aes(x = diam)) +\n  scale_x_continuous(breaks = seq(from = 0, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 19), breaks = seq(from = 0, to = 18, by = 3)) +\n  geom_histogram(color = \"#000000\", fill = \"lightblue\") +\n  labs(x = \"Anemone diameter (cm)\", y = \"Count\") +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\")) \n\n\n\n\n\n\n\n\n\nCode\nggplot(df, aes(x = diam)) +\n  scale_x_continuous(breaks = seq(from = 0, to = 8, by = 1)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  geom_histogram(color = \"#000000\", fill = \"lightblue\", bins = 3) +\n  labs(x = \"Anemone diameter (cm)\", y = \"Count\") +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#jitter-plot-and-box-and-whisker-plot-example",
    "href": "lecture/lecture_week-01.html#jitter-plot-and-box-and-whisker-plot-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "6. jitter plot and box and whisker plot example",
    "text": "6. jitter plot and box and whisker plot example\n\n\nCode\nset.seed(1)\n\npretend_lengths &lt;- cbind(\n  juveniles = rnorm(20, mean = 2, sd = 0.5), \n  females = rnorm(20, mean = 8, sd = 1), \n  males = rnorm(20, mean = 4, sd = 1)\n) %&gt;% \n  as_tibble() %&gt;% \n  pivot_longer(cols = 1:3)\n\nggplot(pretend_lengths, aes(x = name, y = value, color = name)) +\n  geom_jitter(width = 0.1, alpha = 0.8, size = 2) +\n  scale_color_manual(values = c(\"darkgreen\", \"cornflowerblue\", \"orange\")) +\n  labs(y = \"Weight (g)\") +\n  theme(axis.title.x = element_blank(),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(pretend_lengths, aes(x = name, y = value, color = name, fill = name)) +\n  geom_boxplot(alpha = 0.8) +\n  scale_color_manual(values = c(\"darkgreen\", \"cornflowerblue\", \"orange\")) +\n  scale_fill_manual(values = c(\"darkgreen\", \"cornflowerblue\", \"orange\")) +\n  labs(y = \"Weight (g)\") +\n  theme(axis.title.x = element_blank(),\n        legend.position = \"none\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#probability-mass-example",
    "href": "lecture/lecture_week-01.html#probability-mass-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "7. Probability mass example",
    "text": "7. Probability mass example\n\n\nCode\nggplot(data.frame(x = 1:55), aes(x)) +\n  stat_function(geom = \"bar\", n = 55, fun = dpois, args = list(lambda = 10), fill = \"coral\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.13)) +\n  coord_cartesian(xlim = c(0, 22)) +\n  labs(x = \"Mussel clump size (count)\", y = \"Probability mass\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#probability-density-example",
    "href": "lecture/lecture_week-01.html#probability-density-example",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "8. Probability density example",
    "text": "8. Probability density example\n\n\nCode\nggplot(data.frame(x = 1:20), aes(x)) +\n  stat_function(geom = \"line\", n = 100, fun = dnorm, args = list(mean = 10, sd = 2), linewidth = 1) +\n  stat_function(geom = \"area\", fun = dnorm, args = list(mean = 10, sd = 2), xlim = c(12, 14), fill = \"turquoise3\") +\n  geom_vline(xintercept = 12, lty = 2, color = \"grey\", linewidth = 1) +\n  geom_vline(xintercept = 14, lty = 2, color = \"grey\", linewidth = 1) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.22)) +\n  # coord_cartesian(xlim = c(0, 22)) +\n  labs(x = \"Individual mussel weight (g)\", y = \"Probability density\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#probability-distribution",
    "href": "lecture/lecture_week-01.html#probability-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "9. probability distribution",
    "text": "9. probability distribution\n\n\nCode\nset.seed(1)\nnormdist &lt;- rnorm(n = 100000, mean = 0, sd = 1) %&gt;% \n  as_tibble(rownames = \"x\")\n\nggplot(normdist) +\n  geom_histogram(aes(x = value, after_stat(density)), fill = \"white\", color = \"black\", bins = 100) +\n  stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = \"blue\", linewidth = 2) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#normal-distribution",
    "href": "lecture/lecture_week-01.html#normal-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "10. normal distribution",
    "text": "10. normal distribution\n\n\nCode\nggplot(data.frame(x = -10:25), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1, color = \"darkorange\") +\n  annotate(\"text\", x = 4.5, y = 0.4, label = \"\\U03BC = 0, \\U03C3 = 1\", color = \"darkorange\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 15, sd = 3), linewidth = 1, color = \"blue\") +\n  annotate(\"text\", x = 16, y = 0.15, label = \"\\U03BC = 15, \\U03C3 = 3\", color = \"blue\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 5, sd = 5), linewidth = 1, color = \"darkgreen\") +\n  annotate(\"text\", x = 7, y = 0.1, label = \"\\U03BC = 5, \\U03C3 = 5\", color = \"darkgreen\", size = 6) +\n  scale_x_continuous(breaks = seq(-10, 25, 5)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\")"
  },
  {
    "objectID": "lecture/lecture_week-01.html#z-score-calculation",
    "href": "lecture/lecture_week-01.html#z-score-calculation",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "11. z-score calculation",
    "text": "11. z-score calculation\n\nfigure\nWe’ll use \\(z = -1.23\\) for this example.\n\n\nCode\n# z-score\nq &lt;- -1.23\n\nggplot(data.frame(x = -4:4), aes(x)) +\n  # zscore\n  geom_linerange(x = q, ymin = 0, ymax = 0.19) +\n  # area under the curve\n  stat_function(geom = \"area\", fun = dnorm, args = list(mean = 0, sd = 1), xlim = c(-4, -1.23), fill = \"turquoise3\") +\n  # Z distribution curve\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1.5, color = \"darkorange\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.45)) +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title = element_blank(),\n        axis.line.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n\ncalculation\n\n\nCode\npnorm(q, mean = 0, sd = 1)\n\n\n[1] 0.1093486\n\n\nYou can compare this with the Z-score table.\n\n\nchiton example\nWhat is the probability of selecting a chiton that is less than 6 ft long given a normally distributed population with \\(\\mu = 12\\) g with \\(\\sigma = 3\\) g?\n\n\nCode\n# calculate the z-score\nchiton_z &lt;- (6 - 12)/3\n  \n# calculate the probability under the curve\npnorm(chiton_z, mean = 0, sd = 1)\n\n\n[1] 0.02275013"
  },
  {
    "objectID": "lecture/lecture_week-01.html#rule",
    "href": "lecture/lecture_week-01.html#rule",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "12. 68-95-99.7 rule",
    "text": "12. 68-95-99.7 rule\nIn a normal distribution, 68% of values lie within 1 standard deviation of the mean, 95% within 2 standard deviations, and 99.7% within 3 standard deviations.\n\n\nCode\nlabels &lt;- c(\n  \"\", \"\\U03BC - 3\\U03C3\", \"\\U03BC - 2\\U03C3\", \"\\U03BC - \\U03C3\", \"\\U03BC\", \"\\U03BC + \\U03C3\", \"\\U03BC + 2\\U03C3\", \"\\U03BC + 3\\U03C3\", \"\"\n)\n\nggplot(data.frame(x = -4:4), aes(x)) +\n  geom_linerange(x = 1, ymin = 0, ymax = 0.24) +\n  geom_linerange(x = -1, ymin = 0, ymax = 0.24) +\n  geom_linerange(x = 2, ymin = 0, ymax = 0.055) +\n  geom_linerange(x = -2, ymin = 0, ymax = 0.055) +\n  geom_linerange(x = 3, ymin = 0, ymax = 0.005) +\n  geom_linerange(x = -3, ymin = 0, ymax = 0.005) +\n  geom_linerange(x = 0, ymin = 0, ymax = 0.399) +\n  stat_function(geom = \"line\", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1.5, color = \"darkorange\") +\n  scale_x_continuous(labels = labels, breaks = seq(-4, 4, by = 1)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.41)) +\n  labs(x = \"\") +\n  theme_classic() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 24),\n        axis.line.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank())"
  },
  {
    "objectID": "lecture/lecture_week-01.html#students-t-distribution",
    "href": "lecture/lecture_week-01.html#students-t-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "13. Student’s t distribution",
    "text": "13. Student’s t distribution\n\n\nCode\nggplot(data.frame(x = -10:10), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = \"#856F33\") +\n  annotate(\"text\", x = 3.5, y = 0.3, label = \"\\U03BD = 1\", color = \"#856F33\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 3), linewidth = 1, color = \"#E6821C\") + \n  annotate(\"text\", x = 3.5, y = 0.35, label = \"\\U03BD = 3\", color = \"#E6821C\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 5), linewidth = 1, color = \"#56E9E7\") +\n  annotate(\"text\", x = 3.5, y = 0.37, label = \"\\U03BD = 5\", color = \"#56E9E7\", size = 6) +\n  stat_function(geom = \"line\", n = 1000, fun = dt, args = list(df = 100), linewidth = 1, color = \"#04B37F\") +\n    annotate(\"text\", x = 3.5, y = 0.4, label = \"\\U03BD = 100\", color = \"#04B37F\", size = 6) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#uniform-distribution",
    "href": "lecture/lecture_week-01.html#uniform-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "14. Uniform distribution",
    "text": "14. Uniform distribution\n\n\nCode\nggplot(data.frame(x = 0:10), aes(x)) +\n  stat_function(geom = \"line\", n = 1000, fun = dunif, args = list(min = 2, max = 8), linewidth = 1, color = \"firebrick4\") +\n  annotate(\"text\", x = 2, y = 0.172, label = \"a = 2\", color = \"firebrick4\", size = 6) + \n  annotate(\"text\", x = 8, y = 0.172, label = \"b = 8\", color = \"firebrick4\", size = 6) + \n  scale_x_continuous(breaks = seq(0, 10, 2)) +\n  scale_y_continuous(expand = c(0, 0), limits = c(-0.001, 0.18)) +\n  labs(x = \"Continuous value\", y = \"Density\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#binomial-distribution",
    "href": "lecture/lecture_week-01.html#binomial-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "14. Binomial distribution",
    "text": "14. Binomial distribution\n\n\nCode\nggplot(data.frame(x = 1:20), aes(x)) +\n  stat_function(geom = \"line\", n = 20, fun = dbinom, args = list(size = 20, p = 0.1), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dbinom, args = list(size = 20, p = 0.1), color = \"#6D9929\", size = 3) +\n  annotate(\"text\", x = 5.5, y = 0.29, label = \"n = 20, p = 0.1\", color = \"#6D9929\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dbinom, args = list(size = 20, p = 0.4), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dbinom, args = list(size = 20, p = 0.4), color = \"#4A76E5\", size = 3) +\n  annotate(\"text\", x = 8, y = 0.2, label = \"n = 20, p = 0.4\", color = \"#4A76E5\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dbinom, args = list(size = 20, p = 0.7), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dbinom, args = list(size = 20, p = 0.7), color = \"#E67960\", size = 3) +\n  annotate(\"text\", x = 15, y = 0.21, label = \"n = 20, p = 0.7\", color = \"#E67960\", size = 6) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +\n  labs(x = \"Number of successes\", y = \"Mass\") +\n  theme_bw() +\n  theme(panel.grid = element_blank(),\n        axis.text = element_text(size = 18),\n        axis.title = element_text(size = 18),\n        text = element_text(family = \"Lato\"))"
  },
  {
    "objectID": "lecture/lecture_week-01.html#poisson-distribution",
    "href": "lecture/lecture_week-01.html#poisson-distribution",
    "title": "Week 1 figures - Lectures 1 and 2",
    "section": "15. Poisson distribution",
    "text": "15. Poisson distribution\n\n\nCode\nggplot(data.frame(x = 1:20), aes(x)) +\n  stat_function(geom = \"line\", n = 20, fun = dpois, args = list(lambda = 1), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dpois, args = list(lambda = 1), color = \"coral\", size = 4) +\n  annotate(\"text\", x = 3, y = 0.37, label = \"\\U03BB = 1\", color = \"coral\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dpois, args = list(lambda = 4), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dpois, args = list(lambda = 4), color = \"darkgreen\", size = 4) +\n  annotate(\"text\", x = 6, y = 0.2, label = \"\\U03BB = 4\", color = \"darkgreen\", size = 6) +\n  stat_function(geom = \"line\", n = 20, fun = dpois, args = list(lambda = 10), color = \"black\") +\n  stat_function(geom = \"point\", n = 20, fun = dpois, args = list(lambda = 10), color = \"turquoise\", size = 4) +\n  annotate(\"text\", x = 14, y = 0.12, label = \"\\U03BB = 10\", color = \"turquoise\", size = 6) +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +\n  labs(x = \"Discrete value\", y = \"Mass\")"
  },
  {
    "objectID": "workshop/workshop-01_2025.html",
    "href": "workshop/workshop-01_2025.html",
    "title": "Coding workshop: Week 1",
    "section": "",
    "text": "Workshop dates: April 3 (Thursday), April 4 (Friday)"
  },
  {
    "objectID": "workshop/workshop-01_2025.html#summary",
    "href": "workshop/workshop-01_2025.html#summary",
    "title": "Coding workshop: Week 1",
    "section": "1. Summary",
    "text": "1. Summary\n\nPackages\n\ntidyverse\n\n\n\nOperations\n\ncalculations using mean() and max()\n\nread in data using read_csv()\n\nfilter data using filter()\n\narrange data using arrange()\n\ncreate new column using mutate()\n\ngroup data using group_by()\n\ncount observations using count()\n\nchain functions together using %&gt;%\n\nvisualize data using ggplot()\n\ncreating points and lines using geom_point() and geom_line()\n\n\n\nData source\nThis workshop’s data comes from Tidy Tuesday 2023-06-20, which was from the National UFO Reporting Center and sunrise-sunset.org by Jon Harmon."
  },
  {
    "objectID": "workshop/workshop-01_2025.html#code",
    "href": "workshop/workshop-01_2025.html#code",
    "title": "Coding workshop: Week 1",
    "section": "2. Code",
    "text": "2. Code\n\n1. Intro to scripts\nIn class, we use an R Script. It allows you to write your code (recipe) and run the code in the console (kitchen).\nR considers everything in the script as code to run, so you can write comments in the R Script by putting a pound sign at the beginning of the line. This is especially useful when you want to explain what your code is doing at each line in plain language.\nTry writing a comment of your own in the line below.\n\n# This is a comment!\n\n\n\n2. Intro to functions\nR allows you to apply functions to do calculations, from simple to complex structures. Run code by putting your cursor on the line and hitting Ctrl + Enter or Cmd + Enter.\n\nmean(c(4, 5, 1, 2, 1))\n\n[1] 2.6\n\n\nYou can store things you want to use over and over again as objects.\n\nnumbers &lt;- c(4, 6, 2, 5, 3, 10)\n\nand then you can use those objects in functions.\n\nmax(numbers)\n\n[1] 10\n\n\n\n\n3. loading in packages and data\n\nlibrary(tidyverse)\n\n\nufo_sightings &lt;- read_csv(\"ufo_sightings.csv\")\n\n\nView(ufo_sightings)\n\n\n\n4. cleaning and wranging\nThese are all functions in the tidyverse that allow you to work with your data in R.\nFirst, you can filter by state to only include California.\n\ndf1 &lt;- filter(ufo_sightings, \n              state == \"CA\") \n\nThen, you can arrange the data frame by date.\n\ndf2 &lt;- arrange(df1,\n               reported_date_time)\n\nThen, you can make a new column just with the year.\n\ndf3 &lt;- mutate(df2,\n              extracted_year = year(reported_date_time)) \n\nThen, you can group the data frame by year and shape.\n\ndf4 &lt;- group_by(df3, \n                extracted_year, shape)\n\nThen, you can count the number of occurrences by year and shape.\n\ndf5 &lt;- count(df4) \n\nThen, you can filter the data frame by the shapes you’re interested in.\n\ndf6 &lt;- filter(df5, \n              shape %in% c(\"formation\", \"circle\", \"orb\", \"changing\", \"light\"))\n\n\n\n5. an easier way to clean and wrangle\nYou can use what’s called a pipe operator to chain functions together. The keyboard shortcut for a pipe is Ctrl + Shift + M or Cmd + Shift + M.\nWhen reading your code aloud, you can read the pipe as “and then”\n\nnew_mexico &lt;- ufo_sightings %&gt;% # use the ufo_sightings data frame\n  filter(state == \"NM\") %&gt;% # and then, filter by state to only include New Mexico\n  arrange(reported_date_time) %&gt;% # and then, arrange by date\n  mutate(extracted_year = year(reported_date_time)) %&gt;% # and then, create a new column for the year\n  group_by(extracted_year, shape) %&gt;% # and then, group by extracted_year and shape\n  count() # and then, count occurrences\n\n\n\n6. data visualization\n\nggplot(data = df6, \n       aes(x = extracted_year, \n           y = n,\n           color = shape)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Number of sightings\",\n       title = \"UFOs in California are mostly light\")"
  },
  {
    "objectID": "assignments/getting-set-up.html",
    "href": "assignments/getting-set-up.html",
    "title": "Getting set up",
    "section": "",
    "text": "Optional check in due on Wednesday April 2 (Week 1) at 11:59 PM\nIn this class, we’ll be using R and RStudio to code up our statistical analyses. Walk through these steps to make sure you have both programs on your computer and that everything is working properly. You need to make sure these tasks are completed before workshop on Thursday and Friday.\n\n\n\n\n\n\nDo these set up steps as soon as possible!\n\n\n\nEveryone needs to do tasks 1 - 7. If you want to submit the optional check-in for An to verify that you’ve done things correctly, you can do task 8 and submit your screenshot on Canvas.\nIf you do not have R, RStudio, and Quarto installed and running, we cannot stop for you. Do this before class starts!\n\n\n\n\n\n\n\n\nWhat version should I install? Do I need to update R/RStudio?\n\n\n\nYou should have at least R 4.2.2 (released November 2022) and RStudio 2023.12.1.\nIf you have downloaded R/RStudio for previously but you don’t have updated versions, then you need to update! To do so, follow the instructions for installation in Task 1.\nAn will be using R version 4.4.3 and RStudio version 2024.12.1+563.\n\n\n\nTask 1. Install R and RStudio (and optionally Quarto)\nFollow steps 1-3 here.\n\n\n\n\n\n\nInstalling Quarto\n\n\n\nYou only need to install Quarto if you are running RStudio version 2022.07.1 or earlier. Follow the instructions for installing Quarto here.\nIf you cannot install Quarto on your computer (because it doesn’t work with your operating system, etc.), that is fine - you just might have some differences between what we do in class and what you see on your own computer.\n\n\n\n\nTask 2. Open RStudio\nWhen we say we’re “using R” in the class, what we’re really using is RStudio, which is a graphical user interface (GUI) for R (the language). Basically, we’re never going to open up “R”, but we’ll always open up “RStudio”.\nOpen RStudio on your computer.\n\n\nTask 3. Change your workspace save settings\nWhen you’re using RStudio, you’ll get the option to “save your workspace” if you close out of the program. We’re going to make sure you don’t do that, because we want to make sure our code runs independently of any old information that was saved on your computer from RStudio.\nGo to Tools &gt; Global Options &gt; General and make sure that:\n\n“Restore .Rdata into workspace at startup” is unchecked\n\n“Save workspace to .RData on exit” is on “Never”\n\nHit “Apply”.\n\n\n\n\n\n\n\n\n\n\n\nNeed to see a bigger image?\n\n\n\n\n\nClick on the screenshot to make it bigger!\n\n\n\n\n\nTask 4. Change your color scheme\nYou don’t have to stick with the boring RStudio color scheme! Go to Appearance (from Tools &gt; Global Options) and choose an Editor Theme. Hit “Apply” to save it.\n\n\n\n\n\n\n\nTask 5. Test out installing a package\nPackages are the best part of using R. We’ll talk more about what packages are in workshop, but for now try installing a package. Go to your Console (the bottom left pane in the RStudio window), and type (or copy paste) install.packages(\"tidyverse\"). Hit Enter.\nYou should get a message that looks something like this:\n\n\n\n\n\n\n\n\n\n\n\nOperating system differences\n\n\n\nThe database that holds all these packages will automatically detect which version you need based on your operating system. Don’t worry if your output message doesn’t look exactly the same as the one here - just as long as you get something like “The downloaded binary packages are in…”, you’ve probably got the package installed.\n\n\n\n\nTask 6. Test out reading in a package\nNow you’ve installed a package, but you want to make sure you can actually run it. Again in the Console (the bottom left pane), type library(tidyverse) and hit Enter.\nYou should get a message that looks something like this:\n\n\n\n\n\n\n\nTask 7. Set up a folder on your computer for class materials\nUsing R/RStudio requires you to know how your computer is organized and where your files are. For now, we’ll want to set up a folder in your computer called ENVS-193DS (note no spaces in the folder name).\nAll operating systems are different, but make sure that your folder is not in the “iCloud” or “Google Drive” folders in your computer. Basically, you want to be sure that you can get from your “root” directory (i.e. your actual computer hard drive) to the folder you’re using.\nYou can check this using the file path, or the folders you would need to open to get to the folder called ENVS-193DS. One example for MacOS is below, where the file path is written out at the bottom of the pane:\n\n\n\n\n\n\n\nTask 8. Take a screenshot of your RStudio set up\nSo that the instructors can verify that you’ve gotten everything set up, take a screenshot of your RStudio window with the code for install.packages(\"tidyverse\") and library(tidyverse) in your Console and submit it to the portal on Canvas. Your screenshot should look something like this:\n\n\n\n\n\n\n\n\n\n\n\nDouble check your screenshot!\n\n\n\nMake sure that the messages in the orange box (above) are visible in your screenshot! Otherwise we will not be able to troubleshoot whatever issues you are having with installation (if you are actually having any)."
  },
  {
    "objectID": "workshop.html",
    "href": "workshop.html",
    "title": "Workshop documents",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nCoding workshop: Week 1\n\n\nbasics of using RStudio, intro to tidyverse\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resources/using-virtual-machine.html",
    "href": "resources/using-virtual-machine.html",
    "title": "Using the virtual machine",
    "section": "",
    "text": "1. What is the virtual machine?\nFor this class, we have a virtual machine: it allows you to run R and RStudio in a browser (e.g. Google Chrome, Safari, Firefox). Find the virtual machine here!\nThe benefits of using the virtual machine are plenty:\n\nyou don’t have to download R, RStudio, and Quarto\n\nthe versions of all the software you need are updated\n\nthe packages you need for the class are already installed\n\nyou can download everything you’ve worked on\n\nand more!\nThe one con is that you do need to be connected to the internet. But compared to the benefits, this is hopefully not a major hurdle.\nBasically, if you’re having any issues with your versions of R, RStudio, or Quarto, try running your code on the virtual machine.\n\n\n2. Logging in and opening things up\nOnce you open up the virtual machine, you’ll be asked to log in. Use your UCSB email to do that. You should then get a screen that looks like this:\n Click RStudio.\nYou should then see a screen that looks exactly like an RStudio screen!\n\n\n\n3. Setting up\nIf you’re opening this up for the first time, do task 3 in the Getting set up guide: Change your workspace save settings.\n\n\n4. Getting files into the machine\nDownload the zipped file of workshop materials from Canvas. Hit the Upload button (yellow arrow pointing up against a white paper). You should see a window that looks like this:\n\nHit Choose file and select the .zip file.\nThe machine will automatically unzip the file and create a new folder with all the file contents.\n\n\n\n5. Creating a project\nWe’re going to create a lot of Rprojects in this class to get used to it. You can create a project in an existing directory (aka folder) in the same way that you would in the desktop version of RStudio. Go to the button in the top left that says Project: (None) and click. Hit New Project.\n Then, select the “Existing Directory” option.\n\nYou should now see the new Rproject in two locations: 1) in the upper left and 2) in the list of files in your directory.\n\n\n\n6. Downloading your files\nIf you want to hold onto your files on your computer, you can download a whole directory. Click on the folder you want to download and go to More &gt; Export in the lower right pane.\n\nThe machine will download the whole folder as a .zip file, which you can then unzip on your computer."
  },
  {
    "objectID": "lecture.html",
    "href": "lecture.html",
    "title": "Lecture visualizations",
    "section": "",
    "text": "Order By\n       Default\n         \n          Lecture date - Oldest\n        \n         \n          Lecture date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nLecture date\n\n\n\n\n\n\nWeek 1 figures - Lectures 1 and 2\n\n\nMar 31, 2025\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]