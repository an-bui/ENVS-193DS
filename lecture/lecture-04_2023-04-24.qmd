---
title: "Lecture 04 figures"
editor: source
freeze: auto
author:
  - name: An Bui
    url: https://an-bui.com/
    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology
    affiliation-url: https://www.eemb.ucsb.edu/
date: 2023-04-24
categories: [t-test]
citation:
  url: https://an-bui.github.io/ES-193DS-W23/lecture/lecture-04_2023-04-24.html
---

# 0. set up

```{r}
# cleaning
library(tidyverse)

# visualization
library(showtext)
font_add_google("Lato", "Lato")
showtext_auto()

# panels together
library(patchwork)

# cohen's d
library(effsize)
```

# 1. one vs two tailed figure

```{r fig.width = 10, fig.height = 5, fig.align = "center"}
two <- ggplot(data.frame(x = -5:5), aes(x)) +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(3, 5), fill = "darkgrey") +
  geom_linerange(aes(x = 3, ymin = 0, ymax = 0.032), linewidth = 1, lty = 2, color = "#000000") +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(-5, -3), fill = "darkgrey") +
  geom_linerange(aes(x = -3, ymin = 0, ymax = 0.032), linewidth = 1, lty = 2, color = "#000000") +
  stat_function(geom = "line", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = "#000000") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +
  theme_void() +
  theme(panel.grid = element_blank())

one <- ggplot(data.frame(x = -5:5), aes(x)) +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(2, 5), fill = "darkgrey") +
  geom_linerange(aes(x = 2, ymin = 0, ymax = 0.063), linewidth = 1, lty = 2, color = "#000000") +
  stat_function(geom = "line", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = "#000000") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +
  theme_void() +
  theme(panel.grid = element_blank())

one + two
```


# 1. Acorn example

$$
\begin{align}
n &= 41 \\
\bar{x} &= 2.29 \\
s &= 1.04
\end{align}
$$

## random numbers from t-distribution

```{r}
set.seed(7)
# acorns <- rt(n = 41, df = 40, ncp = 2.5) 
acorns <- rnorm(n = 41, mean = 2, sd = 1)
```

## histogram

```{r fig.width = 8, fig.height = 6, fig.align = "center"}
hist <- enframe(acorns) %>% 
  ggplot(aes(x = value)) +
  geom_histogram(bins = 7, fill = "cornflowerblue", color = "#000000") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 11.5), breaks = c(0, 3, 6, 9, 12)) +
  theme_classic() +
  labs(x = "Acorn mass (g)", y = "Count")
```

## qq plot
```{r fig.width = 8, fig.height = 6, fig.align = "center"}
qq <- enframe(acorns) %>% 
  ggplot(aes(sample = value)) +
  stat_qq_line(aes(sample = value)) +
  stat_qq(aes(sample = value), color = "cornflowerblue", size = 3) +
  theme_classic() +
  labs(x = "Theoretical quantiles", y = "Sample quantiles")
```

```{r}
hist + qq
```


## calculating a critical value
```{r}
qt(p = .05/2, df = 40)
```

## calculating t-score

```{r}
# population mean
mu0 <- 2

# number of observations
n <- 41

# sample mean
xbar <- mean(acorns)

# sample standard deviation
s <- sd(acorns)

# sample standard error
se <- s/sqrt(n)

# degrees of freedom
df <- n - 1

# t-score
t <- (xbar-mu0)/se

t
```

$$
t_s = \frac{\bar{x} - \mu}{s/\sqrt{n}} = \frac{2.29 - 2}{1.04/\sqrt{41}} = 1.8
$$
## visual representation of sample t-statistic vs t-critical
```{r}
ggplot(data.frame(x = -5:5), aes(x)) +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(1.8, 5), fill = "darkgrey") +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(-5, -1.8), fill = "darkgrey") +
  geom_linerange(aes(x = 1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = "#000000") +
  geom_linerange(aes(x = -1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = "#000000") +
  
  geom_linerange(aes(x = 2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = "#FFFFFF") +
  geom_linerange(aes(x = -2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = "#FFFFFF") +
  stat_function(geom = "line", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = "#000000") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +
  theme_void() +
  theme(panel.grid = element_blank(),
        plot.margin = unit(c(1, 0, 0, 0), "cm"))
```

## manually calculating p-value
```{r}
# two-tailed: multiply probability by 2
# lower = FALSE: probability of the value being more than t
2*pt(t, df, lower = FALSE)
```

## doing a t-test
```{r}
t.test(acorns, mu = 2)
```

# 2. two-sample t-test

```{r}
ex1 <- ggplot(data.frame(x = -8:8), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 1, sd = 2), linewidth = 2, color = "#00A38D") +
  geom_vline(aes(xintercept = 1), color = "#00A38D", lty = 2, linewidth = 2) +
    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

set.seed(2)
x <- rnorm(30, mean = 0, sd = 2)
y <- rnorm(30, mean = 1, sd = 2)

t.test(x = x, y = y, var.equal = TRUE)

# 0.43
```

```{r}
ex2 <- ggplot(data.frame(x = -8:17), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 2, sd = 2), linewidth = 2, color = "#00A38D") +
  geom_vline(aes(xintercept = 1), color = "#00A38D", lty = 2, linewidth = 2) +
    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

set.seed(1000000000)
x <- rnorm(30, mean = 0, sd = 2)
y <- rnorm(30, mean = 2, sd = 2)

t.test(x = x, y = y, var.equal = TRUE)
# 0.6932
```


```{r}
ex3 <- ggplot(data.frame(x = -8:17), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 10, sd = 2), linewidth = 2, color = "#00A38D") +
  geom_vline(aes(xintercept = 10), color = "#00A38D", lty = 2, linewidth = 2) +
    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

set.seed(100)
x <- rnorm(40, mean = 0, sd = 2)
y <- rnorm(40, mean = 10, sd = 2)

t.test(x = x, y = y, var.equal = TRUE)
# p < 0.001
```

```{r fig.width = 10, fig.height = 3, fig.align = "center"}
ex1 + ex2 + ex3
```

## same differences in means, different SD
```{r}
small <- ggplot(data.frame(x = -6:9), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 3, sd = 2), linewidth = 2, color = "#00A38D") +
  geom_vline(aes(xintercept = 3), color = "#00A38D", lty = 2, linewidth = 2) +
    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

big <- ggplot(data.frame(x = -6:9), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 0.5), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 3, sd = 0.5), linewidth = 2, color = "#00A38D") +
  geom_vline(aes(xintercept = 3), color = "#00A38D", lty = 2, linewidth = 2) +
    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.8)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

small / big
```

# 3. Cohen's D


$$
Cohen's d = \frac{\bar{x_A} - \bar{x_B}}{\sqrt{(s^2_A + s^2_B)/2}}
$$

```{r}
cohen.d(acorns ~ ., mu = 2)
```





