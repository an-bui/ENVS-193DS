---
title: "Lecture 07 figures"
editor: source
freeze: auto
author:
  - name: An Bui
    url: https://an-bui.com/
    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology
    affiliation-url: https://www.eemb.ucsb.edu/
date: 2023-05-15
categories: []
citation:
  url: https://an-bui.github.io/ES-193DS-W23/lecture/lecture-07_2023-05-15.html
---

```{r libraries, message = FALSE}
library(tidyverse)
library(palmerpenguins)
library(showtext)
library(car)
font_add_google("Lato", "Lato")
showtext_auto()
library(patchwork)
library(ggeffects)
library(performance)
library(broom)
library(flextable)
```

# what is a residual?

$$
residual = y_i - \hat{y}
$$

$$
SS_{residuals} = (-1)^2 + (4)^2 + (-2)^2 + (-3)^2 = 30
$$
# R2

$$
\begin{align}
R^2 &= 1 - \frac{\sum_{i = 1}^{n}(y_i - \hat{y})^2}{\sum_{i = 1}^{n}(y_i - \bar{y})^2} \\
&= 1 - \frac{SS_{residuals}}{SS_{total}} 
\end{align}
$$

# linear model equation
$$
\begin{align}
y &= mx + b \\
y &= b_1x + b_0 + \epsilon = b_0 + b_1x + \epsilon \\
y &= \beta_1x + \beta_0 + \epsilon = \beta_0 + \beta_1x + \epsilon
\end{align}
$$


# what are we doing when we fit a linear model?

```{r what-is-a-linear-model}
set.seed(666)
data <- cbind(x = 1:5, y = rnorm(5, mean = 2, sd = 1)*1:5) %>% 
  as.data.frame()

noline <- ggplot(data, aes(x = x, y = y)) +
  geom_point(size = 5, color = "darkgreen", fill = "slategrey", shape = 21, stroke = 3) +
  theme_classic() +
  labs(x = "Predictor", y = "Response") +
  theme(text = element_text(size = 14))

opt1 <- ggplot(data, aes(x = x, y = y)) +
  geom_point(size = 5, color = "darkgreen", fill = "slategrey", shape = 21, stroke = 3) +
  geom_function(fun = function(x) 2*x, color = "coral2", linewidth = 2, lty = 2) +
  theme_classic() +
  labs(x = "Predictor", y = "Response") +
  theme(text = element_text(size = 14))

opt2 <- ggplot(data, aes(x = x, y = y)) +
  geom_point(size = 5, color = "darkgreen", fill = "slategrey", shape = 21, stroke = 3) +
  geom_function(fun = function(x) -2*x + 10, color = "coral2", linewidth = 2, lty = 2) +
  theme_classic() +
  labs(x = "Predictor", y = "Response") +
  theme(text = element_text(size = 14))
```

```{r noline-plot}
noline
```

```{r option-plot, fig.wdith = 8, fig.height = 4}
opt1 / opt2
```


# actual linear relationship example

## generating data and model

```{r linear-relationship}
x_lm <- seq(from = 1, to = 30, by = 1)

set.seed(666)
y_lm <- round(runif(length(x_lm), min = 1, max = 1.5), 1)*x_lm + runif(length(x_lm), min = 1, max = 10)

df_lm <- cbind(
  x = x_lm,
  y = y_lm
) %>% 
  as_tibble() %>% 
  mutate(outlier = case_when(
    rownames(.) %in% c(23, 27, 28) ~ "outlier",
    TRUE ~ "ok"
  ))
```

## model summaries

```{r model-summaries}
model1 <- lm(y ~ x, data = df_lm)
model1
summary(model1)
anova(model1)

model1_nooutliers <- lm(y ~ x, data = df_lm %>% filter(outlier == "ok"))
summary(model1_nooutliers)
```

$$
\begin{align}
R^2 &= 1 - \frac{SS_{residuals}}{SS_{total}} \\
&= 1 - \frac{359.64}{359.64 + 3003.92} \\
&= 0.8931
\end{align}
$$

```{r}
# if using quarto, don't label chunk with a table... so weird
anova_tbl <- broom::tidy(anova(model1)) %>% 
  mutate(across(where(is.numeric), ~ round(.x, digits = 2))) %>% 
  mutate(p.value = case_when(
    p.value < 0.001 ~ "< 0.001"
  )) 

flextable(anova_tbl) %>% 
  set_header_labels(term = "Term", 
                    df = "Degrees of freedom", 
                    sumsq = "Sum of squares", 
                    meansq = "Mean squares", 
                    statistic = "F-statistic", 
                    p.value = "p-value") %>% 
  set_table_properties(layout = "autofit", width = 0.8)
```


## model plots

```{r linear-model-plots, fig.width = 8, fig.height = 6}
model1_pred <- ggpredict(model1, terms = ~ x)
model1_nooutliers_pred <- ggpredict(model1_nooutliers, terms = ~ x)

model1_plot_noline <- ggplot(data = df_lm, aes(x = x, y = y)) +
  geom_point(shape = 19, size = 3, color = "cornflowerblue") +
  theme_classic() +
  theme(text = element_text(size = 14))

model1_plot <- ggplot(data = df_lm, aes(x = x, y = y)) +
  geom_point(shape = 19, size = 3, color = "cornflowerblue") +
  geom_line(data = model1_pred, aes(x = x, y = predicted), linewidth = 1) +
  theme_classic() +
  theme(text = element_text(size = 14))

model1_plot_nooutliers <- ggplot(data = df_lm %>% filter(outlier == "ok"), aes(x = x, y = y)) +
  geom_point(aes(color = outlier), shape = 19, size = 3) +
  scale_color_manual(values = c("ok" = "cornflowerblue", "outlier" = "red")) +
  geom_line(data = model1_nooutliers_pred, aes(x = x, y = predicted), linewidth = 1) +
  theme_classic() +
  theme(text = element_text(size = 14),
        legend.position = "none") 
```

# exponential growth example

```{r exp-data-and-model}
x_ex <- seq(from = 5, to = 9, length = 30)

y_ex <- exp(x_ex)

df_ex <- cbind(
  x = x_ex,
  y = exp(x_ex)
) %>% 
  as_tibble()

lm_ex <- lm(y ~ x, data = df_ex)

lm_ex
```

## model summary
```{r exp-model-summary}
summary(lm_ex)
```

## model plots

```{r exp-model-plots}
lm_pred <- ggpredict(lm_ex, terms = ~x)

ex_plot_noline <- ggplot(df_ex, aes(x= x, y = y)) +
  geom_point(shape = 17, size = 3, color = "orange") +
  theme_classic() +
  theme(text = element_text(size = 14))

ex_plot <- ggplot(df_ex, aes(x= x, y = y)) +
  geom_point(shape = 17, size = 3, color = "orange") +
  geom_line(data = lm_pred, aes(x = x, y = predicted), linewidth = 1) +
  theme_classic() +
  theme(text = element_text(size = 14))
```

# diagnostic plots
```{r diagnostics}
par(mfrow = c(2, 4))
plot(model1, which = c(1), col = "cornflowerblue", pch = 19)
plot(lm_ex, which = c(1), col = "orange", pch = 17)
plot(model1, which = c(2), col = "cornflowerblue", pch = 19)
plot(lm_ex, which = c(2), col = "orange", pch = 17)
plot(model1, which = c(3), col = "cornflowerblue", pch = 19)
plot(lm_ex, which = c(3), col = "orange", pch = 17)
plot(model1, which = c(5), col = "cornflowerblue", pch = 19)
plot(lm_ex, which = c(5), col = "orange", pch = 17)
dev.off()
```

# comparison plots

```{r plots-for-comparison}
model1_plot_noline + ex_plot_noline
model1_plot + ex_plot
```

