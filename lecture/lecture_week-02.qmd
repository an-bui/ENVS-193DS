---
title: "Week 2 figures - Lectures 3 and 4"
editor: source
freeze: auto
author:
  - name: An Bui
    url: https://an-bui.com/
    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology
    affiliation-url: https://www.eemb.ucsb.edu/
date: 2024-04-08
categories: [probability distribution, normal, Z-score, comparing groups, t-test, Student's t, qqplot]
citation:
  url: https://spring-2024.envs-193ds.com//lecture/lecture_week-02.html
---

# 0. set up

```{r}
# cleaning
library(tidyverse)
theme_set(theme_classic() +
            theme(panel.grid = element_blank(),
                  axis.text = element_text(size = 18),
                  axis.title = element_text(size = 18)))

# visualization
library(showtext)
font_add_google("Lato", "Lato")
showtext_auto()
library(ggdist)

# panels together
library(patchwork)

# cohen's d
library(effsize)
```

# 1. Math






# 2. central limit theorem

If you were to sample a bunch of times from any distribution (i.e. take many observations within a sample, take many observations in another sample), the mean values for each sample will be normally distributed. Kareem Carr has a nice explainer of how this works [here](https://twitter.com/kareem_carr/status/1754524686606626894).

```{r clt-setup-uniform-distribution}
#| fig-width: 12
#| fig-height: 8

# randomly select 10000 numbers from a uniform distribution for the population
uniform <- runif(10000, min = 2, max = 8)

# make a histogram for the population
uniformdf <- as.data.frame(uniform)

ggplot(uniformdf, aes(x = uniform)) +
  geom_histogram(breaks = seq(2, 8, length.out = 41), fill = "firebrick", alpha = 0.7, color = "firebrick") +
  geom_vline(xintercept = mean(uniform), linewidth = 2) +
  annotate("text", x = 4, y = 290, label = "mean = 4.967", size = 10) +
  scale_x_continuous(breaks = seq(from = 2, to = 8, by = 1)) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 305)) +
  labs(x = "Continuous value", y = "Count") +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18))
```


```{r clt-samples}
#| fig-width: 12
#| fig-height: 8

# for() loop to 
store2 <- c()
store5 <- c()
store15 <- c()
store30 <- c()
store50 <- c()

for(i in 1:100) {
  
  store2[i] <- mean(sample(uniform, 2, replace = FALSE))

}


for(i in 1:100) {
  
  store5[i] <- mean(sample(uniform, 5, replace = FALSE))

}
for(i in 1:100) {
  
  store15[i] <- mean(sample(uniform, 15, replace = FALSE))

}

for(i in 1:100) {
  
  store30[i] <- mean(sample(uniform, 30, replace = FALSE))

}

for(i in 1:100) {
  
  store50[i] <- mean(sample(uniform, 50, replace = FALSE))

}

df <- cbind(store2, store5, store15, store30, store50) %>% 
  as.data.frame()
  
ggplot(df) +
  geom_histogram(aes(x = store2), bins = 10, alpha = 0.7, fill = "chocolate1", color = "chocolate1") +
  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +
  scale_y_continuous(expand = c(0, 0)) +
  geom_vline(xintercept = mean(store2)) +
  geom_vline(xintercept = mean(uniform), color = "red") +
  labs(x = "Sample means", y = "Count") +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), "cm"))


ggplot(df) +
  geom_histogram(aes(x = store5), bins = 10, alpha = 0.7, fill = "blue3", color = "blue3") +
  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +
  scale_y_continuous(expand = c(0, 0)) +
  geom_vline(xintercept = mean(store5)) +
  geom_vline(xintercept = mean(uniform), color = "red") +
  labs(x = "Sample means", y = "Count") +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), "cm"))

ggplot(df) +
  geom_histogram(aes(x = store15), bins = 12, alpha = 0.7, fill = "darkorchid4", color = "darkorchid4") +
  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +
  scale_y_continuous(expand = c(0, 0)) +
  geom_vline(xintercept = mean(store15)) +
  geom_vline(xintercept = mean(uniform), color = "red") +
  labs(x = "Sample means", y = "Count") +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), "cm"))

ggplot(df) +
  geom_histogram(aes(x = store30), bins = 12, alpha = 0.7, fill = "lightseagreen", color = "lightseagreen") +
  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +
  scale_y_continuous(expand = c(0, 0)) +
  geom_vline(xintercept = mean(store30)) +
  geom_vline(xintercept = mean(uniform), color = "red") +
  labs(x = "Sample means", y = "Count") +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), "cm"))

ggplot(df) +
  geom_histogram(aes(x = store50), bins = 12, alpha = 0.7, fill = "violetred3", color = "violetred3") +
  coord_cartesian(xlim = c(2, 8), ylim = c(0, 30)) +
  scale_y_continuous(expand = c(0, 0)) +
  geom_vline(xintercept = mean(store50)) +
  geom_vline(xintercept = mean(uniform), color = "red") +
  labs(x = "Sample means", y = "Count") +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        plot.margin = unit(c(0.5, 0.5, 0.1, 0.1), "cm"))

```

# 3. z- vs t-distribution

t-distributions allow for more uncertainty around the tails.

```{r comparison-plot}
#| fig-width: 12
#| fig-height: 8

ggplot(data.frame(x = -5:5), aes(x)) +
  stat_function(geom = "line", n = 1000, fun = dnorm, args = list(mean = 0, sd = 1), linewidth = 1, color = "darkorange") +
  annotate("text", x = 2.5, y = 0.4, label = "normal", color = "darkorange", size = 6) +
  stat_function(geom = "line", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = "#856F33") +
  annotate("text", x = 3, y = 0.32, label = "t-distribution (small n)", color = "#856F33", size = 6) +
  stat_function(geom = "line", n = 1000, fun = dt, args = list(df = 10), linewidth = 1, color = "#56E9E7") +
  annotate("text", x = 3, y = 0.37, label = "t-distribution (large n)", color = "#56E9E7", size = 6) +
    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.42)) +
  labs(x = "Continuous value", y = "Density") +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        text = element_text(family = "Lato")) 
```

# 4. math notation

## a. standard error

$$
standard \: error = SE_{\bar{x}} = \frac{s}{\sqrt{n}}
$$

## b. confidence interval

$$
\begin{align}
CI = estimate \: &\pm \: margin \: of \: error \\
CI = \bar{x} \: &\pm \: t_{\alpha(2), df} \times \frac{s}{\sqrt{n}}
\end{align}
$$

$$
t_{\alpha(2), df}
$$

$$
t_{0.05(2), 19}
$$

## c. visual representation of t-distribution

```{r t-dist-and-significance}
#| fig-width: 14
#| fig-height: 6
#| fig-align: center

ggplot(data.frame(x = -5:5), aes(x)) +
  stat_function(geom = "area", fun = dt, args = list(df = 19), xlim = c(1.8, 5), fill = "#0070c0") +
  stat_function(geom = "area", fun = dt, args = list(df = 19), xlim = c(-5, -1.8), fill = "#0070c0") +
  stat_function(geom = "line", n = 1000, fun = dt, args = list(df = 19), linewidth = 1, color = "#000000") +
  geom_hline(yintercept = 0) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.4)) +
  theme_void() +
  theme(panel.grid = element_blank(),
        plot.margin = unit(c(1, 0, 0, 0), "cm"))
```


# 5. qqplot examples

We use qqplots (quantile-quantile plots) to visually evaluate the normality of some variable. The x-axis is the "theoretical" quantile, and the y-axis is the "sample" quantile. If the points follow a 1:1 line, then the variable is normally distributed.  

The New Haven temperature data is normally distributed:

```{r nhtemp-histogram-and-qq}
#| fig-width: 12
#| fig-height: 8

as_tibble(nhtemp) %>% 
  ggplot(aes(x = x)) +
  geom_histogram(breaks = seq(47, 55, length.out = 9), fill = "turquoise3", color = "#000000") +
  scale_x_continuous(breaks = seq(47, 55, length.out = 9), expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 23)) +
  theme_classic() +
  labs(x = "Bins", y = "Count") +
    theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        text = element_text(family = "Lato"),
        plot.margin = unit(c(0.1, 1, 0.1, 0.1), "cm")) 

ggplot(as_tibble(nhtemp)) +
  stat_qq(aes(sample = x), color = "turquoise3", size = 3) +
  theme_classic() +
  labs(x = "Theoretical", y = "Sample") +
      theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        text = element_text(family = "Lato"),
        plot.margin = unit(c(0.1, 1, 0.1, 0.1), "cm")) 
```

The sunspot data is not:

```{r sunspots-histogram-and-qq}
#| fig-width: 14
#| fig-height: 8

as_tibble(sunspots) %>% 
  ggplot(aes(x = x)) +
  geom_histogram(breaks = round(seq(0, 260, length.out = 30)), fill = "tomato2", color = "#000000") +
  scale_x_continuous(breaks = round(seq(0, 260, length.out = 30)), expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 480)) +
  theme_classic() +
  labs(x = "Bins", y = "Count") +
    theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        text = element_text(family = "Lato"),
        plot.margin = unit(c(0.1, 1, 0.1, 0.1), "cm")) 

ggplot(as_tibble(sunspots)) +
  stat_qq(aes(sample = x), color = "tomato2", size = 3) +
  theme_classic() +
  labs(x = "Theoretical", y = "Sample") +
      theme(panel.grid = element_blank(),
        axis.text = element_text(size = 18),
        axis.title = element_text(size = 18),
        text = element_text(family = "Lato"),
        plot.margin = unit(c(0.1, 1, 0.1, 0.1), "cm")) 

```

# 6. one vs two tailed figure

```{r one-two-tailed-test-comparison}
#| fig-width: 10
#| fig-height: 5
#| fig-align: center

two <- ggplot(data.frame(x = -5:5), aes(x)) +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(3, 5), fill = "darkgrey") +
  geom_linerange(aes(x = 3, ymin = 0, ymax = 0.032), linewidth = 1, lty = 2, color = "#000000") +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(-5, -3), fill = "darkgrey") +
  geom_linerange(aes(x = -3, ymin = 0, ymax = 0.032), linewidth = 1, lty = 2, color = "#000000") +
  stat_function(geom = "line", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = "#000000") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +
  theme_void() +
  theme(panel.grid = element_blank())

one <- ggplot(data.frame(x = -5:5), aes(x)) +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(2, 5), fill = "darkgrey") +
  geom_linerange(aes(x = 2, ymin = 0, ymax = 0.063), linewidth = 1, lty = 2, color = "#000000") +
  stat_function(geom = "line", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = "#000000") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +
  theme_void() +
  theme(panel.grid = element_blank())

one + two
```


# 7. Leaf example 

## random numbers from t-distribution

```{r leaf-number-generation}
set.seed(7)
leaves <- rnorm(n = 20, mean = 4.92, sd = 0.3)
```

## histogram

```{r leaf-histogram}
#| fig-width: 8
#| fig-height: 6
#| fig-align: center
breakpoints <- round(seq(from = min(leaves), to = max(leaves), length.out = 7), 2)

hist <- enframe(leaves) %>% 
  ggplot(aes(x = value)) +
  geom_histogram(bins = 7, fill = "cornflowerblue", color = "#000000", breaks = breakpoints) +
  scale_x_continuous(breaks = breakpoints) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 5.2), breaks = c(0, 1, 2, 3, 4, 5)) +
  theme_classic() +
  labs(x = "Leaf length (cm)", y = "Count")
hist
```

## density plot
```{r}
enframe(leaves) %>% 
  ggplot(aes(x = value)) +
  geom_density(fill = "cornflowerblue", color = "#000000", linewidth = 1) +
  scale_x_continuous(limits = c(3.5, 7)) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1.1)) +
  geom_vline(xintercept = 1.33) +
  theme_classic() +
  labs(x = "Leaf length (cm)", y = "Density")
```

## dot and whisker plot
```{r}
snail_conflev <- tribble(
  ~ conflev,
  0.85,
  0.90,
  0.95,
  0.99
) %>% 
  mutate(upper = case_when(
    conflev == 0.85 ~ mean(leaves) + qt(p = 0.15/2, df = 19)*sd(leaves)/sqrt(length(leaves)),
    conflev == 0.90 ~ mean(leaves) + qt(p = 0.1/2, df = 19)*sd(leaves)/sqrt(length(leaves)),
    conflev == 0.95 ~ mean(leaves) + qt(p = 0.05/2, df = 19)*sd(leaves)/sqrt(length(leaves)),
    conflev == 0.99 ~ mean(leaves) + qt(p = 0.01/2, df = 19)*sd(leaves)/sqrt(length(leaves))
  ),
  lower = case_when(
    conflev == 0.85 ~ mean(leaves) - qt(p = 0.15/2, df = 19)*sd(leaves)/sqrt(length(leaves)),
    conflev == 0.90 ~ mean(leaves) - qt(p = 0.1/2, df = 19)*sd(leaves)/sqrt(length(leaves)),
    conflev == 0.95 ~ mean(leaves) - qt(p = 0.05/2, df = 19)*sd(leaves)/sqrt(length(leaves)),
    conflev == 0.99 ~ mean(leaves) - qt(p = 0.01/2, df = 19)*sd(leaves)/sqrt(length(leaves)) 
  )) %>% 
  mutate(mean = mean(leaves))
  # se <- s/sqrt(n)

ggplot() +
  geom_point(data = enframe(leaves), aes(x = 0.84, y = leaves),
             alpha = 0.6, shape = 21) +
  geom_point(data = enframe(leaves), aes(x = 0.89, y = leaves),
             alpha = 0.6, shape = 21) +
  geom_point(data = enframe(leaves), aes(x = 0.94, y = leaves),
             alpha = 0.6, shape = 21) +
  geom_point(data = enframe(leaves), aes(x = 0.98, y = leaves),
             alpha = 0.6, shape = 21) +
  geom_point(data = snail_conflev, aes(x = conflev, y = mean), 
             size = 3,
             color = "cornflowerblue") +
  geom_errorbar(data = snail_conflev, aes(x = conflev, y = mean, ymin = lower, ymax = upper), 
                width = 0.006, 
                linewidth = 1,
                color = "cornflowerblue") +
  theme_void() +
  theme(panel.grid = element_blank()) +
  labs(x = "Confidence levels", 
       y = "Snail diameter (cm)") 


```


## qq plot
```{r leaf-qq-plot}
#| fig-width: 8
#| fig-height: 6
#| fig-align: center

qq <- enframe(leaves) %>% 
  ggplot(aes(sample = value)) +
  stat_qq_line(aes(sample = value)) +
  stat_qq(aes(sample = value), color = "cornflowerblue", size = 3) +
  theme_classic() +
  labs(x = "Theoretical quantiles", y = "Sample quantiles")
```

```{r acorn-histogram-and-qq-plot}
hist + qq
```


## calculating a critical value
```{r leaf-crit-value}
qt(p = 0.05/2, df = 19)
```

## calculating t-score

```{r acorn-t-score}
# population mean
mu0 <- 2

# number of observations
n <- 20

# sample mean
xbar <- mean(leaves)

# sample standard deviation
s <- sd(leaves)

# sample standard error
se <- s/sqrt(n)

# degrees of freedom
df <- n - 1

# t-score
t <- (xbar-mu0)/se

t
```

$$
SE = \frac{s}{\sqrt{n}} = \frac{0.235}{4.47} = 0.05
$$

$$
t_s = \frac{\bar{x} - \mu}{s/\sqrt{n}} = \frac{2.29 - 2}{1.04/\sqrt{41}} = 1.8
$$

## visual representation of sample t-statistic vs t-critical
```{r sample-t-vs-t-crit}
ggplot(data.frame(x = -5:5), aes(x)) +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(1.8, 5), fill = "darkgrey") +
  stat_function(geom = "area", fun = dt, args = list(df = 1), xlim = c(-5, -1.8), fill = "darkgrey") +
  geom_linerange(aes(x = 1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = "#000000") +
  geom_linerange(aes(x = -1.8, ymin = 0, ymax = 0.075), linewidth = 1, lty = 2, color = "#000000") +
  
  geom_linerange(aes(x = 2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = "#FFFFFF") +
  geom_linerange(aes(x = -2.021, ymin = 0, ymax = 0.075), linewidth = 1, lty = 3, color = "#FFFFFF") +
  stat_function(geom = "line", n = 1000, fun = dt, args = list(df = 1), linewidth = 1, color = "#000000") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.32)) +
  theme_void() +
  theme(panel.grid = element_blank(),
        plot.margin = unit(c(1, 0, 0, 0), "cm"))
```

## manually calculating p-value
```{r leaf-calculate-p-value}
# two-tailed: multiply probability by 2
# lower = FALSE: probability of the value being more than t
2*pt(t, df, lower = FALSE)
```

## doing a t-test
```{r acorn-t-test}
t.test(leaves, mu = 2)
```

# 8. two-sample t-test

```{r two-sample-example-1}
ex1 <- ggplot(data.frame(x = -8:8), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 1, sd = 2), linewidth = 2, color = "#00A38D") +
  geom_vline(aes(xintercept = 1), color = "#00A38D", lty = 2, linewidth = 2) +
    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

set.seed(2)
x <- rnorm(30, mean = 0, sd = 2)
y <- rnorm(30, mean = 1, sd = 2)

t.test(x = x, y = y, var.equal = TRUE)

# 0.43
```

```{r two-sample-example-2}
ex2 <- ggplot(data.frame(x = -8:17), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 2, sd = 2), linewidth = 2, color = "#00A38D") +
  geom_vline(aes(xintercept = 2), color = "#00A38D", lty = 2, linewidth = 2) +
    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

set.seed(1000000000)
x <- rnorm(30, mean = 0, sd = 2)
y <- rnorm(30, mean = 2, sd = 2)

t.test(x = x, y = y, var.equal = TRUE)
# 0.6932
```


```{r two-sample-example-3}
ex3 <- ggplot(data.frame(x = -8:17), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 10, sd = 2), linewidth = 2, color = "#00A38D") +
  geom_vline(aes(xintercept = 10), color = "#00A38D", lty = 2, linewidth = 2) +
    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

set.seed(100)
x <- rnorm(40, mean = 0, sd = 2)
y <- rnorm(40, mean = 10, sd = 2)

t.test(x = x, y = y, var.equal = TRUE)
# p < 0.001
```

```{r two-sample-examples-together}
#| fig-width: 12
#| fig-height: 3
#| fig-align: center

ex1 + ex2 + ex3
```

## same differences in means, different SD

```{r two-sample-means-different-variances}
#| fig-width: 8
#| fig-height: 10

small <- ggplot(data.frame(x = -6:9), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 2), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 3, sd = 2), linewidth = 2, color = "#0070C0") +
  geom_vline(aes(xintercept = 3), color = "#0070C0", lty = 2, linewidth = 2) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.21)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

big <- ggplot(data.frame(x = -6:9), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 0.5), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 3, sd = 0.5), linewidth = 2, color = "#0070C0") +
  geom_vline(aes(xintercept = 3), color = "#0070C0", lty = 2, linewidth = 2) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.8)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

diff <- ggplot(data.frame(x = -6:9), aes(x)) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 0, sd = 0.5), linewidth = 2, color = "#FF6B2B") +
  geom_vline(aes(xintercept = 0), color = "#FF6B2B", lty = 2, linewidth = 2) +
  stat_function(geom = "line", n = 100, fun = dnorm, args = list(mean = 3, sd = 1.25), linewidth = 2, color = "#0070C0") +
  geom_vline(aes(xintercept = 3), color = "#0070C0", lty = 2, linewidth = 2) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.85)) +
  theme_void() +
  theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))

small / big / diff
```

## test statistic math notation

$$
t = \frac{\bar{x_A} - \bar{x_B}}{\sqrt{\frac{s_A^2}{N_A}+\frac{s_B^2}{N_B}}}
$$
When you have unequal variances:

$$
df = \frac{(\frac{s_A^2}{N_A}+\frac{S_B^2}{N_B})^2}{\frac{(\frac{s_A^2}{N_A})^2}{N_A-1}+\frac{(\frac{s_B^2}{N_B})^2}{N_B-1}}
$$


so for two-sample t-test where you have equal variances:

$$
t = \frac{\bar{x_A} - \bar{x_B}}{s_p \times \sqrt{\frac{1}{N_A + N_B}}}
$$

the degrees of freedom are:

$$
df = (N_A - 1) + (N_B - 1)
$$

testing test statistic formula to compare against t-test from above:

```{r}
xa <- mean(x)
xb <- mean(y)

vara <- var(x)
varb <- var(y)

nA <- length(x)
nB <- length(y)

(xa - xb)/sqrt((vara/nA)+(varb/nB))
(nA - 1) + (nB - 1)

(((vara/nA)+(varb/nB))^2)/((vara/nA)^2/(nA-1)+(varb/nB)^2/(nB-1))
```



# 9. Cohen's D

$$
Cohen's \; d = \frac{\bar{x_A} - \bar{x_B}}{\sqrt{(s^2_A + s^2_B)/2}}
$$

```{r}
cohen.d(leaves ~ ., mu = 2)
```

# 10. Confidence interval for two sample t-test

$$
CI = (\bar{x_A} - \bar{x_B}) \pm t \times \sqrt{\frac{(n_A - 1)s_A^2 + (n_B - 1)s_B^2}{n_A+n_B-2}} \times \sqrt{\frac{1}{n_A}+\frac{1}{n_B}}
$$







