---
title: "Week 8 figures - Lectures 14 and 15"
date: 2025-05-19
categories: [multiple linear regression, AIC]
citation:
  url: https://spring-2025.envs-193ds.com/lecture/lecture_week-08.html
---

```{r libraries}
# cleaning
library(tidyverse)

# visualization
theme_set(theme_classic() +
            theme(panel.grid = element_blank(),
                  axis.text = element_text(size = 18),
                  axis.title = element_text(size = 18),
                  text = element_text(family = "Lato")))
library(patchwork)
library(ggeffects)
library(flextable)
library(GGally)

# data
library(palmerpenguins)

# analysis
library(car)
library(performance)
library(broom)
library(DHARMa)
library(MuMIn)
library(gtsummary)
```

# multiple linear regression equation

$$
\begin{align}
y &= \beta_0 + \beta_1x_1 + \beta_2x_2 + ... \beta_kx_k + \epsilon
\end{align}
$$

# formulas

## sum of squares for linear regression

### regression (or model)

$$
SS_{reg} = \sum_{i = 1}^{n}(\hat{y} - \bar{y})^2
$$

### error

$$
SS_{err} = \sum_{i = 1}^{n}(y_i - \hat{y})^2
$$

### total 

$$
SS_{tot} = \sum_{i = 1}^n(y_i - \bar{y})
$$

## mean square

### regression

$$
MS_{reg} = \frac{SS_{reg}}{1}
$$

### error

$$
MS_{err} = \frac{SS_{err}}{n - 2}
$$

## F-statistic

$$
F = \frac{MS_{reg}}{MS_{err}}
$$

# soil example

```{r}
set.seed(666)
# sample size
n <- 64

soil_df <- tibble(
  # compaction
  force_mpa = round(rnorm(n = n, mean = 0.7, sd = 0.03), 3),
  # root length
  root_mm = round(rnorm(n = n, mean = -1, sd = 0.02)*force_mpa, 3) + 5
) 

ggplot(data = soil_df,
       aes(x = force_mpa,
           y = root_mm)) +
  geom_point()

soil_lm <- lm(root_mm ~ force_mpa,
              data = soil_df)

par(mfrow = c(2, 2))
plot(soil_lm)

summary(soil_lm)

cor.test(soil_df$root_mm, soil_df$force_mpa)

model_preds <- ggpredict(soil_lm,
                         terms = "force_mpa [0.63:0.77 by = 0.01]") 

ggpredict(soil_lm,
          terms = "force_mpa [0.63:0.77 by = 0.01]") %>% 
  plot(show_data = TRUE)

flextable::as_flextable(soil_lm) 

flextable::as_flextable(soil_lm) %>% 
  set_formatter(
    # special function to represent p < 0.001
    values = list("p.value" = function(x){ 
      z <- scales::label_pvalue()(x)
      z[!is.finite(x)] <- ""
      z
    })
  )
```


# plant example

```{r plant-data}
set.seed(666)
# sample size
n <- 64
plant_df <- tibble(
  # predictor variables
  temperature = round(rnorm(n = n, mean = 28, sd = 1), digits = 1),
  light = round(rnorm(n = n, mean = 1, sd = 0.2), digits = 1),
  ph = rnorm(n = n, mean = 7, sd = 0.01),
  
  # response: growth in cm/week
  growth = light*rnorm(n = n, mean = 0.3, sd = 0.1) + temperature/round(rnorm(n = n, mean = 5, sd = 0.1))
) 

ggplot(data = plant_df,
       aes(x = temperature,
           y = growth)) +
  geom_point()

ggplot(data = plant_df,
       aes(x = ph,
           y = light)) +
  geom_point()

ggplot(data = plant_df,
       aes(x = light,
           y = growth)) +
  geom_point()

plant_lm <- lm(growth ~ temperature + ph + light,
               data = plant_df)
simulateResiduals(plant_lm) %>% plot()

summary(plant_lm)

ggpredict(plant_lm,
          terms = c("temperature")) %>% 
  plot(show_data = TRUE)

ggpredict(plant_lm,
          terms = c("ph")) %>% 
  plot(show_data = TRUE)

ggpredict(plant_lm,
          terms = c("light")) %>% 
  plot(show_data = TRUE)
```

```{r plant-model}
plant_model <- lm(growth ~ light + temperature, 
                  data = plant_df)
```

```{r plant-diagnostics}
simulateResiduals(plant_model,
                  plot = TRUE)
```

```{r plant-model-performance}
check_model(plant_model)
pairs(plant_df, upper.panel = NULL)
ggpairs(plant_df)
cor(plant_df)
vif(plant_model)
```


```{r plant-summary}
summary(plant_model)

# anova(plant_model)
```

For example, temperature F-value:

```{r}
2.85039/0.0083
```

$$
\begin{align}
F &= \frac{2.85039}{0.00830} \\
&= 343.4205
\end{align}
$$

# dummy variable examples

```{r}
tibble(
  herbivores = sample(x = c("absent", "present"), size = 10, replace = TRUE, prob = c(0.5, 0.5))
)

tibble(
  fertilizer = sample(x = c("low", "medium", "high"), size = 10, replace = TRUE, prob = c(0.3, 0.3, 0.3))
)

df <- tibble(
  year = sample(x = c("1st", "2nd", "3rd", "4th", "5th"), size = 20, replace = TRUE, prob = c(0.2, 0.2, 0.2, 0.2, 0.2))
) %>% 
  mutate(year = as_factor(year),
         year = fct_relevel(year, "1st", "2nd", "3rd", "4th", "5th"))

df 

str(df)
```

## plant growth dummy variable

```{r}
# humidity units: %
# plant growth: cm / week

low_col <- "#2176ae"
medium_col <- "#fbb13c"
high_col <- "#fe6847"

n <- 30
set.seed(10)
plant_df <- tibble(
  humidity = round(rnorm(n = n, mean = 60, sd = 15), 0),
  low = humidity*rnorm(n = n, mean = 0.025, sd = 0.012) + 1,
  medium = humidity*rnorm(n = n, mean = 0.025, sd = 0.015) + 1.5,
  high = humidity*rnorm(n = n, mean = 0.025, sd = 0.017) + 2
) %>% 
  pivot_longer(cols = low:high,
               names_to = "fertilizer", 
               values_to = "growth") %>% 
  mutate(fertilizer = fct_relevel(fertilizer, "low", "medium", "high"))

# gives you a random sample
sample_n(plant_df, 10)

# look at the structure
str(plant_df)

ggplot(data = plant_df,
       aes(x = humidity,
           y = growth)) +
  geom_point() 

ggplot(data = plant_df,
       aes(x = fertilizer,
           y = growth,
           color = fertilizer)) +
  geom_jitter(width = 0.2,
              height = 0,
              alpha = 0.3) +
  stat_summary(fun.data = mean_cl_normal,
               geom = "pointrange",
               size = 1,
               linewidth = 1) +
  scale_color_manual(values = c(low_col, medium_col, high_col)) +
  theme(legend.position = "none")

plant_df %>% 
  group_by(fertilizer) %>% 
  summarize(mean = mean(growth))

plant_df %>% 
  summarize(mean = mean(growth))

plant_lm <- lm(growth ~ humidity + fertilizer,
               data = plant_df)

# am i broken because i can't look at anything other than dharma residuals
simulateResiduals(plant_lm) %>% plot()

par(mfrow = c(2, 2))
plot(plant_lm)

ggpredict(plant_lm,
          terms = c("humidity",
                    "fertilizer")) %>% 
  plot(show_data = TRUE) +
  scale_color_manual(values = c(low_col, medium_col, high_col)) +
  scale_fill_manual(values = c(low_col, medium_col, high_col)) +
  theme_classic()

ggpredict(plant_lm,
          terms = c("humidity")) %>% 
  plot(show_data = TRUE) +
  theme_classic()

ggpredict(lm(growth ~ humidity, data = plant_df),
          terms = "humidity") %>% 
  plot(show_data = TRUE) +
  theme_classic()

summary(plant_lm)
summary(lm(growth ~ humidity, data = plant_df))



tbl_regression(plant_lm,
               label = list(humidity = "Humidity (%)",
                            fertilizer = "Fertilizer treatment")) |> 
  as_flex_table() 
``` 


# frog example

## generating data

```{r frog-data}
set.seed(666)
frog_n <- 87

frog_df <- tibble(
  weight = (round(rnorm(n = frog_n, mean = 3, sd = 0.1), 2)),
  blue = round(rnorm(n = frog_n, mean = 2.5, sd = 0.09)*(round(rnorm(n = frog_n, mean = 3, sd = 0.1), 2)), 2),
  green = round(rnorm(n = frog_n, mean = 3, sd = 0.05)*(round(rnorm(n = frog_n, mean = 3, sd = 0.1), 2)), 2),
  red = round(rnorm(n = frog_n, mean = 2.3, sd = 0.05)*(round(rnorm(n = frog_n, mean = 3, sd = 0.1), 2)), 2)
) %>% 
  pivot_longer(cols = blue:red,
               names_to = "color",
               values_to = "toxicity")

df <- cbind(
  # predictor variables
  # color = sample(x = c("blue", "green", "red"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3)),
  weight = (round(rnorm(n = frog_n, mean = 3, sd = 0.1), 2))
  #pattern = sample(x = c("striped", "spotted", "none"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3))
) %>%
  as_tibble() %>%
  mutate(toxicity = round(rnorm(n = frog_n, mean = 1.5, sd = 0.06)*weight, 3)) %>%
  mutate(color = case_when(
    between(toxicity, 2.5, 4.4) ~ "blue",
    between(toxicity, 4.4, 4.6) ~ "green",
    between(toxicity, 4.6, 5.5) ~ "red"
  )) %>% 
  mutate(toxicity = case_when(
    color == "blue" ~ round(rnorm(n = frog_n, mean = 2.5, sd = 0.09)*weight, 3),
    color == "green" ~ round(rnorm(n = frog_n, mean = 3, sd = 0.05)*weight, 3),
    color == "red" ~ round(rnorm(n = frog_n, mean = 2.3, sd = 0.05)*weight, 3)
  )) %>% 
  mutate(color = as_factor(color),
         color = fct_relevel(color, "red", "blue", "green"))


# df <- cbind(
#   color = sample(x = c("blue", "green", "red"), size = frog_n, replace = TRUE, prob = c(0.3, 0.3, 0.3))
# ) %>% 
#   as_tibble() %>% 
#   mutate(weight = (round(rnorm(n = frog_n, mean = 3.5, sd = 0.1), 2))) %>% 
#   mutate(toxicity = case_when(
#     color == "blue" ~ round(rnorm(n = frog_n, mean = 3, sd = 0.4)*weight, 2),
#     color == "green" ~ round(rnorm(n = frog_n, mean = 2, sd = 0.5)*weight, 2),
#     color == "red" ~ round(rnorm(n = frog_n, mean = 1, sd = 0.03)*weight, 2)
#   ))
```

## plotting data

```{r frog-plots}
blue_col <- "cornflowerblue"
green_col <- "darkgreen"
red_col <- "maroon"

striped_col <- "grey1"
spotted_col <- "grey50"
none_col <- "grey80"

ggplot(data = frog_df, aes(x = color, y = toxicity, color = color, fill = color)) +
  geom_jitter(width = 0.2, height = 0, alpha = 0.3) +
  scale_color_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
  scale_fill_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
  stat_summary(geom = "pointrange", 
               fun = mean, 
               fun.min = function(x) mean(x) - sd(x), 
               fun.max = function(x) mean(x) + sd(x), 
               shape = 21, 
               size = 1) +
 #  geom_point(position = position_jitter(width = 0.2, height = 0, seed = 666), alpha = 0.3) +
  labs(title = "Color") +
  theme(legend.position = "none",
        axis.title.x = element_blank(),
        text = element_text(size = 22))

ggplot(data = frog_df, aes(x = weight, y = toxicity)) +
  geom_point() +
  # geom_smooth(method = "lm") +
  labs(title = "Weight") +
  theme(legend.position = "none",
        axis.title.x = element_blank(),
        text = element_text(size = 22))

ggplot(data = frog_df, aes(x = weight, y = toxicity, color = color)) +
  geom_point() +
  scale_color_manual(values = c("blue" = blue_col, "green" = green_col, "red" = red_col)) +
  geom_smooth(method = "lm") +
  labs(title = "Weight")

head(df, 10)
```

## model
```{r frog-model}
model1 <- lm(toxicity ~ weight + color, 
             data = frog_df)

model2 <- lm(toxicity ~ weight * color, 
             data = frog_df)

simulateResiduals(model1, plot = TRUE)
simulateResiduals(model2, plot = TRUE)
check_model(model2)
testOutliers(model2)
```

## diagnostics
```{r frog-diagnostics}
par(mfrow = c(2, 2))
plot(model1)
plot(model2)
```

## model summary

```{r}
summary(model1)
summary(model2)
model.sel(model1, model2)

ggpredict(model1,
          terms = c("weight [2:4 by = 0.01]", 
                    "color")) %>% 
  plot(show_data = TRUE,
       limit_range = TRUE) +
  scale_color_manual(values = c("green" = green_col, 
                                "red" = red_col, 
                                "blue" = blue_col)) +
  scale_fill_manual(values = c("green" = green_col, 
                               "red" = red_col, 
                               "blue" = blue_col)) +
  theme_classic()

ggpredict(model2,
          terms = c("weight [2:4 by = 0.01]", 
                    "color")) %>% 
  plot(show_data = TRUE,
       limit_range = TRUE) +
  scale_color_manual(values = c("green" = green_col, 
                                "red" = red_col, 
                                "blue" = blue_col)) +
  scale_fill_manual(values = c("green" = green_col, 
                               "red" = red_col, 
                               "blue" = blue_col)) +
  theme_classic()
```

$$
\hat{y}_h \pm t_{(1-\alpha/2, n-2)}*\sqrt{MSE*(\frac{1}{n}+\frac{(x_h-\bar{x})^2}{\sum(x_i-\bar{x})^2})}
$$

$$
MSE = \frac{\sum(y_i-\hat{y})^2}{n}
$$

```{r}
tidy(model2, conf.int = TRUE, conf.level = 0.95)
```


```{r}
model_summary <- summary(model2)
c("lower" = model_summary$coef[2,1] - qt(0.975, df = model_summary$df[2]) * model_summary$coef[2, 2],
  "upper" = model_summary$coef[2,1] + qt(0.975, df = model_summary$df[2]) * model_summary$coef[2, 2])
```

Confidence interval for a single coefficient:
in words: estimate plus or minus the t-value at your confidence level * standard error



