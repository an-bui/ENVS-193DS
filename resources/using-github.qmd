---
title: "Git/GitHub basics"
description: "cloning, committing, pushing, forking, pulling"
freeze: auto
execute: 
  warning: false
  message: false
author:
  - name: An Bui
    url: https://an-bui.com/
    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology
    affiliation-url: https://www.eemb.ucsb.edu/
date: 2024-05-17
categories: [GitHub, Git]
filters:
  - lightbox
lightbox: auto
---

## Why are we using Git/GitHub?

Git and GitHub allow us to do a few important things in data science:

- keep track of different versions of our work (so that old work is never lost forever)  
- store our work remotely (so that if our computers die, we still have access to our stuff)  
- reuse other people's work (so that we can reproduce their work and also repurpose for our own needs)  
- collaborate with others (so that you're not emailing, texting, etc. code back and forth)  

See Horst and Lowndes, ["GitHub for supporting, reusing, contributing, and failing safely."](https://openscapes.org/blog/2022-05-27-github-illustrated-series/) for a broad overview of how Git/GitHub work together, and Jenny Brian's ["Excuse me, do you have a moment to talk about version control?](https://peerj.com/preprints/3159v2/) for more.

## What is the difference between Git and GitHub?

Git is what tracks your changes (and allows you to have version control), while GitHub is a cloud hosting service for those changes. We use both together.  

## Operations

### Creating a repository and using Git/GitHub

:::{.callout-note}
#### Definitions
- **repo**: short for "repository", think of this as a folder  
- **remote**: your repository on GitHub (in the cloud)  
- **clone**: essentially making a local copy (i.e. a copy on your computer) of a remote repo  
- **commit**: track the changes you've made using Git (on your computer only)  
- **push**: _push_ the changes you've committed to GitHub (now in the cloud)  
:::

#### 1. Create a repository.

Go to the GitHub homepage. Click the green "New" button.

:::{.callout-tip}
If you're having trouble seeing the screenshot, click the image to make it bigger (this goes for all images in this tutorial).
:::

![](/resources/images/github/01_creating-new-repo.png){width=80%}

#### 2. Fill information about your new repository.

This includes the name, a description, whether it is public or private (keep your repository public for now).  

Additionally, **initialize your repository with a README.** It is very important to start your remote repository with a file, and GitHub does it for your by creating a file called `README.md`. See the README section below for more details about what it is, but for now remember to **always initialize your repository with a README.**

![](/resources/images/github/02_filling-in-info.png){width=80%}

#### 3. Clone your repo to your computer. 

When you are **"cloning"**, you are essentially making a local copy (i.e. on your computer) of your remote. Do this by clicking the green "Code" button and copying the url that shows up.  

![](/resources/images/github/03_copying-url-to-clone.png){width=80%}

Then, create a new project in RStudio. Select "Version Control".

![](/resources/images/github/04_creating-new-proj.png){width=80%}

Then, select "Git".

![](/resources/images/github/05_creating-new-proj-git.png){width=80%}

Paste the clone url into the first box. Keep your cursor in that box, then hit the Tab key. The new project directory name should automatically fill in.  

![](/resources/images/github/06_cloning-url.png){width=80%}

:::{.callout-warning}
#### Directory names
It is **very important** that your remote and local repositories have the _same name_. The easiest way to ensure this is by not typing anything into the second box. Paste the url into the first box, then hit Tab.
:::

Then, select the folder on your computer where you are keeping all your repositories for Git/GitHub. If you created a folder called "Git" or "GitHub" in your root directory, use that folder. This is something that you only have to do once; for each subsequent repo you clone from GitHub, the file path will be automatically filled in.  

After you have created your repository, a new RStudio window will open. Verify that the clone has worked by seeing that you have:  

- a project (should be the same as the directory name)  
- the "Git" tab  
- a `.gitignore` file (a file that tells git which files to ignore when tracking changes)  

![](/resources/images/github/07_after-cloning.png){width=80%}

#### 4. Make changes to your repository.

Create a new Quarto document. Make sure the output is set to "html". Type in some code.  

Save your document. Open up the "Git" tab. You should see your new `.qmd` file along with any other new files (the `.gitignore` and the `.Rproj` file.).  

![](/resources/images/github/08_making-changes.png){width=80%}

#### 5. Commit your changes.

In the Status column, you will see two yellow question marks. This means that the files are new, and git isn't tracking them yet. Check the boxes next to each file, which turns the two yellow question marks to a green "A" for "added". 

Click "Commit". A new screen will pop up that looks like this: 

![](/resources/images/github/10_writing-commit-message.png){width=80%}

If you click through each file in the top left pane, you will see the changes to the file in the lower pane.  

The top right pane is where your commit message goes. 

:::{.callout-tip}
#### Writing a useful commit message
Commit messages accompany each git commit and push. They should describe the changes to the file since the last version. They're best as short phrases describing the changes. For a first commit/push, you could just write something like "initial commit", as in the example.
:::

Write a commit message, then hit "Commit". You should see a window that shows your commit message and a summary of the file changes.  

![](/resources/images/github/11_committing-done.png){width=80%}

Congratulations! Your files are now being tracked by git.

#### 6. Push your changes.

Your file is now being tracked, but it's not on GitHub yet.  

To get your files on GitHub, **push** the commit. Click the "Push" button. You should see a window that looks like this:

![](/resources/images/github/12_pushing-done.png){width=80%}

Double check that your push to GitHub by looking back at your remote. Refresh the repository page. You should see your new files in the repository, and your commit message showing up next to the files that you changed. 

![](/resources/images/github/13_remote-after-pushing.png){width=80%}

Congratulations! Your files are now on GitHub.  

#### 7. Make more changes.

Version control only works if you actually use it. That means you should commit and push with each change you make. The frequency of committing/pushing you do depends on you. Some people are totally commit-happy and commit/push with every chunk of code they write; you might find it more reasonable to commit/push after each coding session.  

Every time you make a change, your modified file will show up in the "Git" tab with a blue M for "modified". The process for changes is the same as for new files:  

- Click the check box,  
- hit "Commit",  
- fill in a commit message,  
- commit,  
- then push.  

In the commit window, you'll see any modified files with changes highlighted in green, as before.

![](/resources/images/github/14_committing-new-changes.png){width=80%}









