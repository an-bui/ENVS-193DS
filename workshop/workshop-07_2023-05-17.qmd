---
title: "Coding workshop: Week 7"
description: "linear models"
freeze: auto
execute: 
  warning: false
  message: false
author:
  - name: An Bui
    url: https://an-bui.com/
    affiliation: UC Santa Barbara, Ecology, Evolution, and Marine Biology
    affiliation-url: https://www.eemb.ucsb.edu/
date: 2023-05-17
categories: [tidyverse, lterdatasampler, linear models, anova, tables]
citation:
  url: https://an-bui.github.io/ES-193DS-W23/workshop/workshop-07_2023-05-17.html
---

# Set up

```{r libraries}
# should haves
library(tidyverse)
library(here)
library(lterdatasampler)

# would be nice to have
library(performance)
library(broom)
library(flextable)
library(ggeffects)
library(car)
```


# 1. Linear models

How does stem length predict stem dry mass?

```{r inital-wrangling}
maples_data <- hbr_maples %>% 
  filter(year == 2003 & watershed == "Reference")
```

Look at your data (we've looked at this data set before, so we won't go through it now)

Then, create some exploratory data visualization:

```{r exploratory-data-visualization}
ggplot(data = maples_data, aes(x = stem_length, y = stem_dry_mass)) +
  geom_point()
```

Seems like there should be a relationship between dry mass and length! Let's try a model: 

```{r stem-model}
modelobject <- lm(stem_dry_mass ~ stem_length, data = maples_data)
```

```{r model-diagnostics}
# makes the viewer pane show a 2x2 grid of plots
# format: par(mfrow = c(number of rows, number of columns))
par(mfrow = c(2, 2))
plot(modelobject)
```

```{r turning-off, results = FALSE}
# turns off the 2x2 grid - pop this under the code chunk where you set the 2x2 grid
dev.off()
```

# 2. Putting things together to communicate

## a. model predictions

```{r using-ggpredict}
# extract model predictions using ggpredict
predictions <- ggpredict(modelobject, terms = "stem_length")

predictions
```

```{r plot-predictions-on-data}
plot_predictions <- ggplot(data = maples_data, 
                           aes(x = stem_length, y = stem_dry_mass)) +
  # first plot the underlying data from maples_data
  geom_point() +
  # then plot the predictions
  geom_line(data = predictions, 
            aes(x = x, y = predicted), 
            color = "blue", linewidth = 1) +
  # then plot the 95% confidence interval from ggpredict
  geom_ribbon(data = predictions, 
              aes(x = x, y = predicted, ymin = conf.low, ymax = conf.high), 
              alpha = 0.2) +
  # theme and meaningful labels
  theme_bw() +
  labs(x = "Stem length (mm)",
       y = "Stem dry mass (g)")

plot_predictions
```

## b. summary tables

```{r model-summary-and-anova}
# store the model summary as an object
model_summary <- summary(modelobject)

# store the ANOVA table as an object
# anova(): special function to get analysis of variance tables for a model
model_squares <- anova(modelobject)

model_summary
model_squares
```

model summary table:

```{r}
# don't name this chunk! some intricacies with Quarto: do not name chunks with tables in them

model_squares_table <- tidy(model_squares) %>% 
  # round the sum of squares and mean squares columns to have 5 digits (could be less)
  mutate(across(sumsq:meansq, ~ round(.x, digits = 5))) %>% 
  # round the F-statistic to have 1 digit
  mutate(statistic = round(statistic, digits = 1)) %>% 
  # replace the very very very small p value with < 0.001
  mutate(p.value = case_when(
    p.value < 0.001 ~ "< 0.001"
  )) %>% 
  # rename the stem_length cell to be meaningful
  mutate(term = case_when(
    term == "stem_length" ~ "Stem length (mm)",
    TRUE ~ term
  )) %>% 
  # make the data frame a flextable object
  flextable() %>% 
  # change the header labels to be meaningful
  set_header_labels(df = "Degrees of Freedom", 
                    sumsq = "Sum of squares",
                    meansq = "Mean squares",
                    statistic = "F-statistic",
                    p.value = "p-value")

model_squares_table
```


**Note! We didn't get to analysis of variance in workshop on Wednesday. We will do it next week.**

# 3. Analysis of variance

Do coastal giant salamander lengths differ by units?

```{r initial-wrangling}
sal <- and_vertebrates %>% 
  # filter for the species and unit type
  filter(species == "Coastal giant salamander", 
         unittype %in% c("C", "P", "SC")) %>% 
  # creating a new column with the full unit name
  mutate(unit_name = case_when(
    unittype == "C" ~ "cascade", 
    unittype == "P" ~ "pool", 
    unittype == "SC" ~ "channel"
  )) %>% 
  # transforming the length variable with a natural log
  mutate(tf = log(length_1_mm))
```

```{r visualizing-the-missing-data}
naniar::gg_miss_var(sal, facet = unit_name) 
```

```{r summarizing-the-data}
sal_summary <- sal %>% 
  group_by(unit_name) %>% 
  summarize(mean = mean(length_1_mm, na.rm = TRUE),
            sd = sd(length_1_mm, na.rm = TRUE),
            count = length(length_1_mm), 
            se = sd/sqrt(count),
            var = var(length_1_mm, na.rm = TRUE))

sal_summary
# if the largest sample variance is < 4Ã— the smallest sample variance, the variances are close enough
```

```{r}
# weirdness with quarto: don't name code chunks if they have tables in them!

flextable(sal_summary) %>% 
  set_header_labels(unit_name = "Unit name",
                    mean = "Mean length (mm)", 
                    sd = "Standard deviation",
                    count = "Number of observations",
                    se = "Standard error",
                    var = "Variance")
```

```{r plotting-the-data}
ggplot(sal, aes(x = unit_name, y = length_1_mm)) +
  geom_boxplot()
 
ggplot(sal, aes(x = length_1_mm)) +
  geom_histogram() +
  facet_wrap(~ unit_name, scales = "free")

ggplot(sal, aes(sample = length_1_mm)) +
  stat_qq_line(color = "blue") +
  stat_qq() +
  facet_wrap(~ unit_name)
```

```{r testing-for-variances}
leveneTest(length_1_mm ~ unit_name, data = sal)
```

```{r analysis-of-variance}
# note different function from before!
sal_anova <- aov(length_1_mm ~ unit_name, data = sal)

summary(sal_anova)

TukeyHSD(sal_anova)
```

tables:

```{r salamander-anova-table}
tidy(sal_anova)
```

# Transformations

(if we have time)

```{r tf-plots}
ggplot(sal, aes(x = tf)) +
  geom_histogram() +
  facet_wrap(~ unit_name, scales = "free")

ggplot(sal, aes(sample = tf)) +
  stat_qq_line(color = "blue") +
  stat_qq() +
  facet_wrap(~ unit_name)
```


```{r log-levene-and-anova}
leveneTest(tf ~ unit_name, data = sal)

log_anova <- aov(tf ~ unit_name, data = sal)

par(mfrow = c(1, 2))
plot(log_anova, which = c(1))
plot(log_anova, which = c(2))
```

```{r turning-off-again, results = FALSE}
dev.off()
```

```{r summary-and-HSD}
summary(log_anova)

TukeyHSD(log_anova)
```

